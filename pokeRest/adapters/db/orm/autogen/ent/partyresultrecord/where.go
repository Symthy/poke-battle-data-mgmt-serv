// Code generated by entc, DO NOT EDIT.

package partyresultrecord

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PartyID applies equality check predicate on the "party_id" field. It's identical to PartyIDEQ.
func PartyID(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyID), v))
	})
}

// Generation applies equality check predicate on the "generation" field. It's identical to GenerationEQ.
func Generation(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneration), v))
	})
}

// Seasen applies equality check predicate on the "seasen" field. It's identical to SeasenEQ.
func Seasen(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeasen), v))
	})
}

// MaxRate applies equality check predicate on the "max_rate" field. It's identical to MaxRateEQ.
func MaxRate(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxRate), v))
	})
}

// MaxRanking applies equality check predicate on the "max_ranking" field. It's identical to MaxRankingEQ.
func MaxRanking(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxRanking), v))
	})
}

// PartyIDEQ applies the EQ predicate on the "party_id" field.
func PartyIDEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyID), v))
	})
}

// PartyIDNEQ applies the NEQ predicate on the "party_id" field.
func PartyIDNEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPartyID), v))
	})
}

// PartyIDIn applies the In predicate on the "party_id" field.
func PartyIDIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPartyID), v...))
	})
}

// PartyIDNotIn applies the NotIn predicate on the "party_id" field.
func PartyIDNotIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPartyID), v...))
	})
}

// GenerationEQ applies the EQ predicate on the "generation" field.
func GenerationEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneration), v))
	})
}

// GenerationNEQ applies the NEQ predicate on the "generation" field.
func GenerationNEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGeneration), v))
	})
}

// GenerationIn applies the In predicate on the "generation" field.
func GenerationIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGeneration), v...))
	})
}

// GenerationNotIn applies the NotIn predicate on the "generation" field.
func GenerationNotIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGeneration), v...))
	})
}

// GenerationGT applies the GT predicate on the "generation" field.
func GenerationGT(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGeneration), v))
	})
}

// GenerationGTE applies the GTE predicate on the "generation" field.
func GenerationGTE(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGeneration), v))
	})
}

// GenerationLT applies the LT predicate on the "generation" field.
func GenerationLT(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGeneration), v))
	})
}

// GenerationLTE applies the LTE predicate on the "generation" field.
func GenerationLTE(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGeneration), v))
	})
}

// SeasenEQ applies the EQ predicate on the "seasen" field.
func SeasenEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeasen), v))
	})
}

// SeasenNEQ applies the NEQ predicate on the "seasen" field.
func SeasenNEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeasen), v))
	})
}

// SeasenIn applies the In predicate on the "seasen" field.
func SeasenIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeasen), v...))
	})
}

// SeasenNotIn applies the NotIn predicate on the "seasen" field.
func SeasenNotIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeasen), v...))
	})
}

// SeasenGT applies the GT predicate on the "seasen" field.
func SeasenGT(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeasen), v))
	})
}

// SeasenGTE applies the GTE predicate on the "seasen" field.
func SeasenGTE(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeasen), v))
	})
}

// SeasenLT applies the LT predicate on the "seasen" field.
func SeasenLT(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeasen), v))
	})
}

// SeasenLTE applies the LTE predicate on the "seasen" field.
func SeasenLTE(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeasen), v))
	})
}

// MaxRateEQ applies the EQ predicate on the "max_rate" field.
func MaxRateEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxRate), v))
	})
}

// MaxRateNEQ applies the NEQ predicate on the "max_rate" field.
func MaxRateNEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxRate), v))
	})
}

// MaxRateIn applies the In predicate on the "max_rate" field.
func MaxRateIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxRate), v...))
	})
}

// MaxRateNotIn applies the NotIn predicate on the "max_rate" field.
func MaxRateNotIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxRate), v...))
	})
}

// MaxRateGT applies the GT predicate on the "max_rate" field.
func MaxRateGT(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxRate), v))
	})
}

// MaxRateGTE applies the GTE predicate on the "max_rate" field.
func MaxRateGTE(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxRate), v))
	})
}

// MaxRateLT applies the LT predicate on the "max_rate" field.
func MaxRateLT(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxRate), v))
	})
}

// MaxRateLTE applies the LTE predicate on the "max_rate" field.
func MaxRateLTE(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxRate), v))
	})
}

// MaxRateIsNil applies the IsNil predicate on the "max_rate" field.
func MaxRateIsNil() predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxRate)))
	})
}

// MaxRateNotNil applies the NotNil predicate on the "max_rate" field.
func MaxRateNotNil() predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxRate)))
	})
}

// MaxRankingEQ applies the EQ predicate on the "max_ranking" field.
func MaxRankingEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxRanking), v))
	})
}

// MaxRankingNEQ applies the NEQ predicate on the "max_ranking" field.
func MaxRankingNEQ(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxRanking), v))
	})
}

// MaxRankingIn applies the In predicate on the "max_ranking" field.
func MaxRankingIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxRanking), v...))
	})
}

// MaxRankingNotIn applies the NotIn predicate on the "max_ranking" field.
func MaxRankingNotIn(vs ...int) predicate.PartyResultRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxRanking), v...))
	})
}

// MaxRankingGT applies the GT predicate on the "max_ranking" field.
func MaxRankingGT(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxRanking), v))
	})
}

// MaxRankingGTE applies the GTE predicate on the "max_ranking" field.
func MaxRankingGTE(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxRanking), v))
	})
}

// MaxRankingLT applies the LT predicate on the "max_ranking" field.
func MaxRankingLT(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxRanking), v))
	})
}

// MaxRankingLTE applies the LTE predicate on the "max_ranking" field.
func MaxRankingLTE(v int) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxRanking), v))
	})
}

// MaxRankingIsNil applies the IsNil predicate on the "max_ranking" field.
func MaxRankingIsNil() predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxRanking)))
	})
}

// MaxRankingNotNil applies the NotNil predicate on the "max_ranking" field.
func MaxRankingNotNil() predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxRanking)))
	})
}

// HasResultToParty applies the HasEdge predicate on the "result_to_party" edge.
func HasResultToParty() predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ResultToPartyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ResultToPartyTable, ResultToPartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResultToPartyWith applies the HasEdge predicate on the "result_to_party" edge with a given conditions (other predicates).
func HasResultToPartyWith(preds ...predicate.Party) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ResultToPartyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ResultToPartyTable, ResultToPartyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartyResultRecord) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartyResultRecord) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartyResultRecord) predicate.PartyResultRecord {
	return predicate.PartyResultRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
