// Code generated by entc, DO NOT EDIT.

package trainedpokemondetails

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), vc))
	})
}

// AbilityID applies equality check predicate on the "ability_id" field. It's identical to AbilityIDEQ.
func AbilityID(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbilityID), v))
	})
}

// HeldItemID applies equality check predicate on the "held_item_id" field. It's identical to HeldItemIDEQ.
func HeldItemID(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeldItemID), v))
	})
}

// MoveId1 applies equality check predicate on the "move_id1" field. It's identical to MoveId1EQ.
func MoveId1(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoveId1), v))
	})
}

// MoveId2 applies equality check predicate on the "move_id2" field. It's identical to MoveId2EQ.
func MoveId2(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoveId2), v))
	})
}

// MoveId3 applies equality check predicate on the "move_id3" field. It's identical to MoveId3EQ.
func MoveId3(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoveId3), v))
	})
}

// MoveId4 applies equality check predicate on the "move_id4" field. It's identical to MoveId4EQ.
func MoveId4(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoveId4), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickname), v))
	})
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNickname), v...))
	})
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNickname), v...))
	})
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickname), v))
	})
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickname), v))
	})
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickname), v))
	})
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickname), v))
	})
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickname), v))
	})
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickname), v))
	})
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickname), v))
	})
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNickname)))
	})
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNickname)))
	})
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickname), v))
	})
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickname), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), vc))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), vc))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...property.Gender) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...property.Gender) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), vc))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), vc))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), vc))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), vc))
	})
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGender), vc))
	})
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGender), vc))
	})
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGender), vc))
	})
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGender)))
	})
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGender)))
	})
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGender), vc))
	})
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v property.Gender) predicate.TrainedPokemonDetails {
	vc := string(v)
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGender), vc))
	})
}

// AbilityIDEQ applies the EQ predicate on the "ability_id" field.
func AbilityIDEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbilityID), v))
	})
}

// AbilityIDNEQ applies the NEQ predicate on the "ability_id" field.
func AbilityIDNEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAbilityID), v))
	})
}

// AbilityIDIn applies the In predicate on the "ability_id" field.
func AbilityIDIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAbilityID), v...))
	})
}

// AbilityIDNotIn applies the NotIn predicate on the "ability_id" field.
func AbilityIDNotIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAbilityID), v...))
	})
}

// HeldItemIDEQ applies the EQ predicate on the "held_item_id" field.
func HeldItemIDEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeldItemID), v))
	})
}

// HeldItemIDNEQ applies the NEQ predicate on the "held_item_id" field.
func HeldItemIDNEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeldItemID), v))
	})
}

// HeldItemIDIn applies the In predicate on the "held_item_id" field.
func HeldItemIDIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeldItemID), v...))
	})
}

// HeldItemIDNotIn applies the NotIn predicate on the "held_item_id" field.
func HeldItemIDNotIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeldItemID), v...))
	})
}

// MoveId1EQ applies the EQ predicate on the "move_id1" field.
func MoveId1EQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoveId1), v))
	})
}

// MoveId1NEQ applies the NEQ predicate on the "move_id1" field.
func MoveId1NEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMoveId1), v))
	})
}

// MoveId1In applies the In predicate on the "move_id1" field.
func MoveId1In(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMoveId1), v...))
	})
}

// MoveId1NotIn applies the NotIn predicate on the "move_id1" field.
func MoveId1NotIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMoveId1), v...))
	})
}

// MoveId2EQ applies the EQ predicate on the "move_id2" field.
func MoveId2EQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoveId2), v))
	})
}

// MoveId2NEQ applies the NEQ predicate on the "move_id2" field.
func MoveId2NEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMoveId2), v))
	})
}

// MoveId2In applies the In predicate on the "move_id2" field.
func MoveId2In(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMoveId2), v...))
	})
}

// MoveId2NotIn applies the NotIn predicate on the "move_id2" field.
func MoveId2NotIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMoveId2), v...))
	})
}

// MoveId2IsNil applies the IsNil predicate on the "move_id2" field.
func MoveId2IsNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMoveId2)))
	})
}

// MoveId2NotNil applies the NotNil predicate on the "move_id2" field.
func MoveId2NotNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMoveId2)))
	})
}

// MoveId3EQ applies the EQ predicate on the "move_id3" field.
func MoveId3EQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoveId3), v))
	})
}

// MoveId3NEQ applies the NEQ predicate on the "move_id3" field.
func MoveId3NEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMoveId3), v))
	})
}

// MoveId3In applies the In predicate on the "move_id3" field.
func MoveId3In(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMoveId3), v...))
	})
}

// MoveId3NotIn applies the NotIn predicate on the "move_id3" field.
func MoveId3NotIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMoveId3), v...))
	})
}

// MoveId3IsNil applies the IsNil predicate on the "move_id3" field.
func MoveId3IsNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMoveId3)))
	})
}

// MoveId3NotNil applies the NotNil predicate on the "move_id3" field.
func MoveId3NotNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMoveId3)))
	})
}

// MoveId4EQ applies the EQ predicate on the "move_id4" field.
func MoveId4EQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoveId4), v))
	})
}

// MoveId4NEQ applies the NEQ predicate on the "move_id4" field.
func MoveId4NEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMoveId4), v))
	})
}

// MoveId4In applies the In predicate on the "move_id4" field.
func MoveId4In(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMoveId4), v...))
	})
}

// MoveId4NotIn applies the NotIn predicate on the "move_id4" field.
func MoveId4NotIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMoveId4), v...))
	})
}

// MoveId4IsNil applies the IsNil predicate on the "move_id4" field.
func MoveId4IsNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMoveId4)))
	})
}

// MoveId4NotNil applies the NotNil predicate on the "move_id4" field.
func MoveId4NotNil() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMoveId4)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.TrainedPokemonDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// HasUseAbility applies the HasEdge predicate on the "use_ability" edge.
func HasUseAbility() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseAbilityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseAbilityTable, UseAbilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseAbilityWith applies the HasEdge predicate on the "use_ability" edge with a given conditions (other predicates).
func HasUseAbilityWith(preds ...predicate.Abilities) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseAbilityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseAbilityTable, UseAbilityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUseHeldItem applies the HasEdge predicate on the "use_held_item" edge.
func HasUseHeldItem() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseHeldItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseHeldItemTable, UseHeldItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseHeldItemWith applies the HasEdge predicate on the "use_held_item" edge with a given conditions (other predicates).
func HasUseHeldItemWith(preds ...predicate.HeldItems) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseHeldItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseHeldItemTable, UseHeldItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUseMove1 applies the HasEdge predicate on the "use_move1" edge.
func HasUseMove1() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseMove1Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseMove1Table, UseMove1Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseMove1With applies the HasEdge predicate on the "use_move1" edge with a given conditions (other predicates).
func HasUseMove1With(preds ...predicate.Moves) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseMove1InverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseMove1Table, UseMove1Column),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUseMove2 applies the HasEdge predicate on the "use_move2" edge.
func HasUseMove2() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseMove2Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseMove2Table, UseMove2Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseMove2With applies the HasEdge predicate on the "use_move2" edge with a given conditions (other predicates).
func HasUseMove2With(preds ...predicate.Moves) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseMove2InverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseMove2Table, UseMove2Column),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUseMove3 applies the HasEdge predicate on the "use_move3" edge.
func HasUseMove3() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseMove3Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseMove3Table, UseMove3Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseMove3With applies the HasEdge predicate on the "use_move3" edge with a given conditions (other predicates).
func HasUseMove3With(preds ...predicate.Moves) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseMove3InverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseMove3Table, UseMove3Column),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUseMove4 applies the HasEdge predicate on the "use_move4" edge.
func HasUseMove4() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseMove4Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseMove4Table, UseMove4Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseMove4With applies the HasEdge predicate on the "use_move4" edge with a given conditions (other predicates).
func HasUseMove4With(preds ...predicate.Moves) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseMove4InverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UseMove4Table, UseMove4Column),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrainingDetailUser applies the HasEdge predicate on the "training_detail_user" edge.
func HasTrainingDetailUser() predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TrainingDetailUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TrainingDetailUserTable, TrainingDetailUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrainingDetailUserWith applies the HasEdge predicate on the "training_detail_user" edge with a given conditions (other predicates).
func HasTrainingDetailUserWith(preds ...predicate.Users) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TrainingDetailUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TrainingDetailUserTable, TrainingDetailUserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TrainedPokemonDetails) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TrainedPokemonDetails) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TrainedPokemonDetails) predicate.TrainedPokemonDetails {
	return predicate.TrainedPokemonDetails(func(s *sql.Selector) {
		p(s.Not())
	})
}
