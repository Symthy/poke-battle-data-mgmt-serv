// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battlerecords"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/partyresultrecord"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/tags"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// PartyCreate is the builder for creating a Party entity.
type PartyCreate struct {
	config
	mutation *PartyMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pc *PartyCreate) SetUserID(i int) *PartyCreate {
	pc.mutation.SetUserID(i)
	return pc
}

// SetName sets the "name" field.
func (pc *PartyCreate) SetName(s string) *PartyCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *PartyCreate) SetNillableName(s *string) *PartyCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetBattleFormat sets the "battle_format" field.
func (pc *PartyCreate) SetBattleFormat(pf property.BattleFormats) *PartyCreate {
	pc.mutation.SetBattleFormat(pf)
	return pc
}

// SetNillableBattleFormat sets the "battle_format" field if the given value is not nil.
func (pc *PartyCreate) SetNillableBattleFormat(pf *property.BattleFormats) *PartyCreate {
	if pf != nil {
		pc.SetBattleFormat(*pf)
	}
	return pc
}

// AddPartyBattleRecordIDs adds the "party_battle_record" edge to the BattleRecords entity by IDs.
func (pc *PartyCreate) AddPartyBattleRecordIDs(ids ...int) *PartyCreate {
	pc.mutation.AddPartyBattleRecordIDs(ids...)
	return pc
}

// AddPartyBattleRecord adds the "party_battle_record" edges to the BattleRecords entity.
func (pc *PartyCreate) AddPartyBattleRecord(b ...*BattleRecords) *PartyCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddPartyBattleRecordIDs(ids...)
}

// AddPartyToTagIDs adds the "party_to_tag" edge to the Tags entity by IDs.
func (pc *PartyCreate) AddPartyToTagIDs(ids ...int) *PartyCreate {
	pc.mutation.AddPartyToTagIDs(ids...)
	return pc
}

// AddPartyToTag adds the "party_to_tag" edges to the Tags entity.
func (pc *PartyCreate) AddPartyToTag(t ...*Tags) *PartyCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddPartyToTagIDs(ids...)
}

// AddResultRecordIDs adds the "result_record" edge to the PartyResultRecord entity by IDs.
func (pc *PartyCreate) AddResultRecordIDs(ids ...int) *PartyCreate {
	pc.mutation.AddResultRecordIDs(ids...)
	return pc
}

// AddResultRecord adds the "result_record" edges to the PartyResultRecord entity.
func (pc *PartyCreate) AddResultRecord(p ...*PartyResultRecord) *PartyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddResultRecordIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (pc *PartyCreate) Mutation() *PartyMutation {
	return pc.mutation
}

// Save creates the Party in the database.
func (pc *PartyCreate) Save(ctx context.Context) (*Party, error) {
	var (
		err  error
		node *Party
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PartyCreate) SaveX(ctx context.Context) *Party {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PartyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PartyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PartyCreate) check() error {
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if v, ok := pc.mutation.UserID(); ok {
		if err := party.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "user_id": %w`, err)}
		}
	}
	return nil
}

func (pc *PartyCreate) sqlSave(ctx context.Context) (*Party, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PartyCreate) createSpec() (*Party, *sqlgraph.CreateSpec) {
	var (
		_node = &Party{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: party.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: party.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.BattleFormat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldBattleFormat,
		})
		_node.BattleFormat = value
	}
	if nodes := pc.mutation.PartyBattleRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.PartyBattleRecordTable,
			Columns: []string{party.PartyBattleRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battlerecords.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PartyToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   party.PartyToTagTable,
			Columns: party.PartyToTagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tags.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ResultRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.ResultRecordTable,
			Columns: []string{party.ResultRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyresultrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PartyCreateBulk is the builder for creating many Party entities in bulk.
type PartyCreateBulk struct {
	config
	builders []*PartyCreate
}

// Save creates the Party entities in the database.
func (pcb *PartyCreateBulk) Save(ctx context.Context) ([]*Party, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Party, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PartyCreateBulk) SaveX(ctx context.Context) []*Party {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PartyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PartyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
