// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battleopponentparty"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battlerecords"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// BattleRecordsCreate is the builder for creating a BattleRecords entity.
type BattleRecordsCreate struct {
	config
	mutation *BattleRecordsMutation
	hooks    []Hook
}

// SetPartyID sets the "party_id" field.
func (brc *BattleRecordsCreate) SetPartyID(i int) *BattleRecordsCreate {
	brc.mutation.SetPartyID(i)
	return brc
}

// SetBattleFormat sets the "battle_format" field.
func (brc *BattleRecordsCreate) SetBattleFormat(pf property.BattleFormats) *BattleRecordsCreate {
	brc.mutation.SetBattleFormat(pf)
	return brc
}

// SetBattleOpponentPartyID sets the "battle_opponent_party_id" field.
func (brc *BattleRecordsCreate) SetBattleOpponentPartyID(i int) *BattleRecordsCreate {
	brc.mutation.SetBattleOpponentPartyID(i)
	return brc
}

// SetSelfElectionPokemonId1 sets the "self_election_pokemon_id1" field.
func (brc *BattleRecordsCreate) SetSelfElectionPokemonId1(i int) *BattleRecordsCreate {
	brc.mutation.SetSelfElectionPokemonId1(i)
	return brc
}

// SetSelfElectionPokemonId2 sets the "self_election_pokemon_id2" field.
func (brc *BattleRecordsCreate) SetSelfElectionPokemonId2(i int) *BattleRecordsCreate {
	brc.mutation.SetSelfElectionPokemonId2(i)
	return brc
}

// SetSelfElectionPokemonId3 sets the "self_election_pokemon_id3" field.
func (brc *BattleRecordsCreate) SetSelfElectionPokemonId3(i int) *BattleRecordsCreate {
	brc.mutation.SetSelfElectionPokemonId3(i)
	return brc
}

// SetSelfElectionPokemonId4 sets the "self_election_pokemon_id4" field.
func (brc *BattleRecordsCreate) SetSelfElectionPokemonId4(i int) *BattleRecordsCreate {
	brc.mutation.SetSelfElectionPokemonId4(i)
	return brc
}

// SetNillableSelfElectionPokemonId4 sets the "self_election_pokemon_id4" field if the given value is not nil.
func (brc *BattleRecordsCreate) SetNillableSelfElectionPokemonId4(i *int) *BattleRecordsCreate {
	if i != nil {
		brc.SetSelfElectionPokemonId4(*i)
	}
	return brc
}

// SetOpponentElectionPokemonId1 sets the "opponent_election_pokemon_id1" field.
func (brc *BattleRecordsCreate) SetOpponentElectionPokemonId1(i int) *BattleRecordsCreate {
	brc.mutation.SetOpponentElectionPokemonId1(i)
	return brc
}

// SetOpponentElectionPokemonId2 sets the "opponent_election_pokemon_id2" field.
func (brc *BattleRecordsCreate) SetOpponentElectionPokemonId2(i int) *BattleRecordsCreate {
	brc.mutation.SetOpponentElectionPokemonId2(i)
	return brc
}

// SetOpponentElectionPokemonId3 sets the "opponent_election_pokemon_id3" field.
func (brc *BattleRecordsCreate) SetOpponentElectionPokemonId3(i int) *BattleRecordsCreate {
	brc.mutation.SetOpponentElectionPokemonId3(i)
	return brc
}

// SetOpponentElectionPokemonId4 sets the "opponent_election_pokemon_id4" field.
func (brc *BattleRecordsCreate) SetOpponentElectionPokemonId4(i int) *BattleRecordsCreate {
	brc.mutation.SetOpponentElectionPokemonId4(i)
	return brc
}

// SetUsePartyID sets the "use_party" edge to the Party entity by ID.
func (brc *BattleRecordsCreate) SetUsePartyID(id int) *BattleRecordsCreate {
	brc.mutation.SetUsePartyID(id)
	return brc
}

// SetUseParty sets the "use_party" edge to the Party entity.
func (brc *BattleRecordsCreate) SetUseParty(p *Party) *BattleRecordsCreate {
	return brc.SetUsePartyID(p.ID)
}

// SetOpponentPartyID sets the "opponent_party" edge to the BattleOpponentParty entity by ID.
func (brc *BattleRecordsCreate) SetOpponentPartyID(id int) *BattleRecordsCreate {
	brc.mutation.SetOpponentPartyID(id)
	return brc
}

// SetOpponentParty sets the "opponent_party" edge to the BattleOpponentParty entity.
func (brc *BattleRecordsCreate) SetOpponentParty(b *BattleOpponentParty) *BattleRecordsCreate {
	return brc.SetOpponentPartyID(b.ID)
}

// Mutation returns the BattleRecordsMutation object of the builder.
func (brc *BattleRecordsCreate) Mutation() *BattleRecordsMutation {
	return brc.mutation
}

// Save creates the BattleRecords in the database.
func (brc *BattleRecordsCreate) Save(ctx context.Context) (*BattleRecords, error) {
	var (
		err  error
		node *BattleRecords
	)
	if len(brc.hooks) == 0 {
		if err = brc.check(); err != nil {
			return nil, err
		}
		node, err = brc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BattleRecordsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = brc.check(); err != nil {
				return nil, err
			}
			brc.mutation = mutation
			if node, err = brc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(brc.hooks) - 1; i >= 0; i-- {
			if brc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = brc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, brc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BattleRecordsCreate) SaveX(ctx context.Context) *BattleRecords {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BattleRecordsCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BattleRecordsCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BattleRecordsCreate) check() error {
	if _, ok := brc.mutation.PartyID(); !ok {
		return &ValidationError{Name: "party_id", err: errors.New(`ent: missing required field "party_id"`)}
	}
	if v, ok := brc.mutation.PartyID(); ok {
		if err := battlerecords.PartyIDValidator(v); err != nil {
			return &ValidationError{Name: "party_id", err: fmt.Errorf(`ent: validator failed for field "party_id": %w`, err)}
		}
	}
	if _, ok := brc.mutation.BattleFormat(); !ok {
		return &ValidationError{Name: "battle_format", err: errors.New(`ent: missing required field "battle_format"`)}
	}
	if _, ok := brc.mutation.BattleOpponentPartyID(); !ok {
		return &ValidationError{Name: "battle_opponent_party_id", err: errors.New(`ent: missing required field "battle_opponent_party_id"`)}
	}
	if v, ok := brc.mutation.BattleOpponentPartyID(); ok {
		if err := battlerecords.BattleOpponentPartyIDValidator(v); err != nil {
			return &ValidationError{Name: "battle_opponent_party_id", err: fmt.Errorf(`ent: validator failed for field "battle_opponent_party_id": %w`, err)}
		}
	}
	if _, ok := brc.mutation.SelfElectionPokemonId1(); !ok {
		return &ValidationError{Name: "self_election_pokemon_id1", err: errors.New(`ent: missing required field "self_election_pokemon_id1"`)}
	}
	if v, ok := brc.mutation.SelfElectionPokemonId1(); ok {
		if err := battlerecords.SelfElectionPokemonId1Validator(v); err != nil {
			return &ValidationError{Name: "self_election_pokemon_id1", err: fmt.Errorf(`ent: validator failed for field "self_election_pokemon_id1": %w`, err)}
		}
	}
	if _, ok := brc.mutation.SelfElectionPokemonId2(); !ok {
		return &ValidationError{Name: "self_election_pokemon_id2", err: errors.New(`ent: missing required field "self_election_pokemon_id2"`)}
	}
	if v, ok := brc.mutation.SelfElectionPokemonId2(); ok {
		if err := battlerecords.SelfElectionPokemonId2Validator(v); err != nil {
			return &ValidationError{Name: "self_election_pokemon_id2", err: fmt.Errorf(`ent: validator failed for field "self_election_pokemon_id2": %w`, err)}
		}
	}
	if _, ok := brc.mutation.SelfElectionPokemonId3(); !ok {
		return &ValidationError{Name: "self_election_pokemon_id3", err: errors.New(`ent: missing required field "self_election_pokemon_id3"`)}
	}
	if v, ok := brc.mutation.SelfElectionPokemonId3(); ok {
		if err := battlerecords.SelfElectionPokemonId3Validator(v); err != nil {
			return &ValidationError{Name: "self_election_pokemon_id3", err: fmt.Errorf(`ent: validator failed for field "self_election_pokemon_id3": %w`, err)}
		}
	}
	if v, ok := brc.mutation.SelfElectionPokemonId4(); ok {
		if err := battlerecords.SelfElectionPokemonId4Validator(v); err != nil {
			return &ValidationError{Name: "self_election_pokemon_id4", err: fmt.Errorf(`ent: validator failed for field "self_election_pokemon_id4": %w`, err)}
		}
	}
	if _, ok := brc.mutation.OpponentElectionPokemonId1(); !ok {
		return &ValidationError{Name: "opponent_election_pokemon_id1", err: errors.New(`ent: missing required field "opponent_election_pokemon_id1"`)}
	}
	if v, ok := brc.mutation.OpponentElectionPokemonId1(); ok {
		if err := battlerecords.OpponentElectionPokemonId1Validator(v); err != nil {
			return &ValidationError{Name: "opponent_election_pokemon_id1", err: fmt.Errorf(`ent: validator failed for field "opponent_election_pokemon_id1": %w`, err)}
		}
	}
	if _, ok := brc.mutation.OpponentElectionPokemonId2(); !ok {
		return &ValidationError{Name: "opponent_election_pokemon_id2", err: errors.New(`ent: missing required field "opponent_election_pokemon_id2"`)}
	}
	if v, ok := brc.mutation.OpponentElectionPokemonId2(); ok {
		if err := battlerecords.OpponentElectionPokemonId2Validator(v); err != nil {
			return &ValidationError{Name: "opponent_election_pokemon_id2", err: fmt.Errorf(`ent: validator failed for field "opponent_election_pokemon_id2": %w`, err)}
		}
	}
	if _, ok := brc.mutation.OpponentElectionPokemonId3(); !ok {
		return &ValidationError{Name: "opponent_election_pokemon_id3", err: errors.New(`ent: missing required field "opponent_election_pokemon_id3"`)}
	}
	if v, ok := brc.mutation.OpponentElectionPokemonId3(); ok {
		if err := battlerecords.OpponentElectionPokemonId3Validator(v); err != nil {
			return &ValidationError{Name: "opponent_election_pokemon_id3", err: fmt.Errorf(`ent: validator failed for field "opponent_election_pokemon_id3": %w`, err)}
		}
	}
	if _, ok := brc.mutation.OpponentElectionPokemonId4(); !ok {
		return &ValidationError{Name: "opponent_election_pokemon_id4", err: errors.New(`ent: missing required field "opponent_election_pokemon_id4"`)}
	}
	if v, ok := brc.mutation.OpponentElectionPokemonId4(); ok {
		if err := battlerecords.OpponentElectionPokemonId4Validator(v); err != nil {
			return &ValidationError{Name: "opponent_election_pokemon_id4", err: fmt.Errorf(`ent: validator failed for field "opponent_election_pokemon_id4": %w`, err)}
		}
	}
	if _, ok := brc.mutation.UsePartyID(); !ok {
		return &ValidationError{Name: "use_party", err: errors.New("ent: missing required edge \"use_party\"")}
	}
	if _, ok := brc.mutation.OpponentPartyID(); !ok {
		return &ValidationError{Name: "opponent_party", err: errors.New("ent: missing required edge \"opponent_party\"")}
	}
	return nil
}

func (brc *BattleRecordsCreate) sqlSave(ctx context.Context) (*BattleRecords, error) {
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (brc *BattleRecordsCreate) createSpec() (*BattleRecords, *sqlgraph.CreateSpec) {
	var (
		_node = &BattleRecords{config: brc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: battlerecords.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: battlerecords.FieldID,
			},
		}
	)
	if value, ok := brc.mutation.BattleFormat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battlerecords.FieldBattleFormat,
		})
		_node.BattleFormat = value
	}
	if value, ok := brc.mutation.SelfElectionPokemonId1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battlerecords.FieldSelfElectionPokemonId1,
		})
		_node.SelfElectionPokemonId1 = value
	}
	if value, ok := brc.mutation.SelfElectionPokemonId2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battlerecords.FieldSelfElectionPokemonId2,
		})
		_node.SelfElectionPokemonId2 = value
	}
	if value, ok := brc.mutation.SelfElectionPokemonId3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battlerecords.FieldSelfElectionPokemonId3,
		})
		_node.SelfElectionPokemonId3 = value
	}
	if value, ok := brc.mutation.SelfElectionPokemonId4(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battlerecords.FieldSelfElectionPokemonId4,
		})
		_node.SelfElectionPokemonId4 = value
	}
	if value, ok := brc.mutation.OpponentElectionPokemonId1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battlerecords.FieldOpponentElectionPokemonId1,
		})
		_node.OpponentElectionPokemonId1 = value
	}
	if value, ok := brc.mutation.OpponentElectionPokemonId2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battlerecords.FieldOpponentElectionPokemonId2,
		})
		_node.OpponentElectionPokemonId2 = value
	}
	if value, ok := brc.mutation.OpponentElectionPokemonId3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battlerecords.FieldOpponentElectionPokemonId3,
		})
		_node.OpponentElectionPokemonId3 = value
	}
	if value, ok := brc.mutation.OpponentElectionPokemonId4(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battlerecords.FieldOpponentElectionPokemonId4,
		})
		_node.OpponentElectionPokemonId4 = value
	}
	if nodes := brc.mutation.UsePartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battlerecords.UsePartyTable,
			Columns: []string{battlerecords.UsePartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PartyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := brc.mutation.OpponentPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battlerecords.OpponentPartyTable,
			Columns: []string{battlerecords.OpponentPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battleopponentparty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BattleOpponentPartyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BattleRecordsCreateBulk is the builder for creating many BattleRecords entities in bulk.
type BattleRecordsCreateBulk struct {
	config
	builders []*BattleRecordsCreate
}

// Save creates the BattleRecords entities in the database.
func (brcb *BattleRecordsCreateBulk) Save(ctx context.Context) ([]*BattleRecords, error) {
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BattleRecords, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BattleRecordsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BattleRecordsCreateBulk) SaveX(ctx context.Context) []*BattleRecords {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BattleRecordsCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BattleRecordsCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
