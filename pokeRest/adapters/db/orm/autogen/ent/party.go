// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// Party is the model entity for the Party schema.
type Party struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// BattleFormat holds the value of the "battle_format" field.
	BattleFormat property.BattleFormats `json:"battle_format,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartyQuery when eager-loading is set.
	Edges PartyEdges `json:"edges"`
}

// PartyEdges holds the relations/edges for other nodes in the graph.
type PartyEdges struct {
	// PartyBattleRecord holds the value of the party_battle_record edge.
	PartyBattleRecord []*BattleRecords `json:"party_battle_record,omitempty"`
	// PartyToTag holds the value of the party_to_tag edge.
	PartyToTag []*Tags `json:"party_to_tag,omitempty"`
	// ResultRecord holds the value of the result_record edge.
	ResultRecord []*PartyResultRecord `json:"result_record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PartyBattleRecordOrErr returns the PartyBattleRecord value or an error if the edge
// was not loaded in eager-loading.
func (e PartyEdges) PartyBattleRecordOrErr() ([]*BattleRecords, error) {
	if e.loadedTypes[0] {
		return e.PartyBattleRecord, nil
	}
	return nil, &NotLoadedError{edge: "party_battle_record"}
}

// PartyToTagOrErr returns the PartyToTag value or an error if the edge
// was not loaded in eager-loading.
func (e PartyEdges) PartyToTagOrErr() ([]*Tags, error) {
	if e.loadedTypes[1] {
		return e.PartyToTag, nil
	}
	return nil, &NotLoadedError{edge: "party_to_tag"}
}

// ResultRecordOrErr returns the ResultRecord value or an error if the edge
// was not loaded in eager-loading.
func (e PartyEdges) ResultRecordOrErr() ([]*PartyResultRecord, error) {
	if e.loadedTypes[2] {
		return e.ResultRecord, nil
	}
	return nil, &NotLoadedError{edge: "result_record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Party) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case party.FieldID, party.FieldUserID:
			values[i] = new(sql.NullInt64)
		case party.FieldName, party.FieldBattleFormat:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Party", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Party fields.
func (pa *Party) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case party.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case party.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pa.UserID = int(value.Int64)
			}
		case party.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case party.FieldBattleFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field battle_format", values[i])
			} else if value.Valid {
				pa.BattleFormat = property.BattleFormats(value.String)
			}
		}
	}
	return nil
}

// QueryPartyBattleRecord queries the "party_battle_record" edge of the Party entity.
func (pa *Party) QueryPartyBattleRecord() *BattleRecordsQuery {
	return (&PartyClient{config: pa.config}).QueryPartyBattleRecord(pa)
}

// QueryPartyToTag queries the "party_to_tag" edge of the Party entity.
func (pa *Party) QueryPartyToTag() *TagsQuery {
	return (&PartyClient{config: pa.config}).QueryPartyToTag(pa)
}

// QueryResultRecord queries the "result_record" edge of the Party entity.
func (pa *Party) QueryResultRecord() *PartyResultRecordQuery {
	return (&PartyClient{config: pa.config}).QueryResultRecord(pa)
}

// Update returns a builder for updating this Party.
// Note that you need to call Party.Unwrap() before calling this method if this Party
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Party) Update() *PartyUpdateOne {
	return (&PartyClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Party entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Party) Unwrap() *Party {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Party is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Party) String() string {
	var builder strings.Builder
	builder.WriteString("Party(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.UserID))
	builder.WriteString(", name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", battle_format=")
	builder.WriteString(fmt.Sprintf("%v", pa.BattleFormat))
	builder.WriteByte(')')
	return builder.String()
}

// Parties is a parsable slice of Party.
type Parties []*Party

func (pa Parties) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
