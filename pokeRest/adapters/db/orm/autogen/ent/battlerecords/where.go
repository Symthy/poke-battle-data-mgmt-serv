// Code generated by entc, DO NOT EDIT.

package battlerecords

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PartyID applies equality check predicate on the "party_id" field. It's identical to PartyIDEQ.
func PartyID(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyID), v))
	})
}

// BattleFormat applies equality check predicate on the "battle_format" field. It's identical to BattleFormatEQ.
func BattleFormat(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBattleFormat), vc))
	})
}

// BattleOpponentPartyID applies equality check predicate on the "battle_opponent_party_id" field. It's identical to BattleOpponentPartyIDEQ.
func BattleOpponentPartyID(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBattleOpponentPartyID), v))
	})
}

// SelfElectionPokemonId1 applies equality check predicate on the "self_election_pokemon_id1" field. It's identical to SelfElectionPokemonId1EQ.
func SelfElectionPokemonId1(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfElectionPokemonId1), v))
	})
}

// SelfElectionPokemonId2 applies equality check predicate on the "self_election_pokemon_id2" field. It's identical to SelfElectionPokemonId2EQ.
func SelfElectionPokemonId2(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfElectionPokemonId2), v))
	})
}

// SelfElectionPokemonId3 applies equality check predicate on the "self_election_pokemon_id3" field. It's identical to SelfElectionPokemonId3EQ.
func SelfElectionPokemonId3(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfElectionPokemonId3), v))
	})
}

// SelfElectionPokemonId4 applies equality check predicate on the "self_election_pokemon_id4" field. It's identical to SelfElectionPokemonId4EQ.
func SelfElectionPokemonId4(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfElectionPokemonId4), v))
	})
}

// OpponentElectionPokemonId1 applies equality check predicate on the "opponent_election_pokemon_id1" field. It's identical to OpponentElectionPokemonId1EQ.
func OpponentElectionPokemonId1(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentElectionPokemonId1), v))
	})
}

// OpponentElectionPokemonId2 applies equality check predicate on the "opponent_election_pokemon_id2" field. It's identical to OpponentElectionPokemonId2EQ.
func OpponentElectionPokemonId2(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentElectionPokemonId2), v))
	})
}

// OpponentElectionPokemonId3 applies equality check predicate on the "opponent_election_pokemon_id3" field. It's identical to OpponentElectionPokemonId3EQ.
func OpponentElectionPokemonId3(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentElectionPokemonId3), v))
	})
}

// OpponentElectionPokemonId4 applies equality check predicate on the "opponent_election_pokemon_id4" field. It's identical to OpponentElectionPokemonId4EQ.
func OpponentElectionPokemonId4(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentElectionPokemonId4), v))
	})
}

// PartyIDEQ applies the EQ predicate on the "party_id" field.
func PartyIDEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyID), v))
	})
}

// PartyIDNEQ applies the NEQ predicate on the "party_id" field.
func PartyIDNEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPartyID), v))
	})
}

// PartyIDIn applies the In predicate on the "party_id" field.
func PartyIDIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPartyID), v...))
	})
}

// PartyIDNotIn applies the NotIn predicate on the "party_id" field.
func PartyIDNotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPartyID), v...))
	})
}

// BattleFormatEQ applies the EQ predicate on the "battle_format" field.
func BattleFormatEQ(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatNEQ applies the NEQ predicate on the "battle_format" field.
func BattleFormatNEQ(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatIn applies the In predicate on the "battle_format" field.
func BattleFormatIn(vs ...property.BattleFormats) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBattleFormat), v...))
	})
}

// BattleFormatNotIn applies the NotIn predicate on the "battle_format" field.
func BattleFormatNotIn(vs ...property.BattleFormats) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBattleFormat), v...))
	})
}

// BattleFormatGT applies the GT predicate on the "battle_format" field.
func BattleFormatGT(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatGTE applies the GTE predicate on the "battle_format" field.
func BattleFormatGTE(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatLT applies the LT predicate on the "battle_format" field.
func BattleFormatLT(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatLTE applies the LTE predicate on the "battle_format" field.
func BattleFormatLTE(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatContains applies the Contains predicate on the "battle_format" field.
func BattleFormatContains(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatHasPrefix applies the HasPrefix predicate on the "battle_format" field.
func BattleFormatHasPrefix(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatHasSuffix applies the HasSuffix predicate on the "battle_format" field.
func BattleFormatHasSuffix(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatEqualFold applies the EqualFold predicate on the "battle_format" field.
func BattleFormatEqualFold(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBattleFormat), vc))
	})
}

// BattleFormatContainsFold applies the ContainsFold predicate on the "battle_format" field.
func BattleFormatContainsFold(v property.BattleFormats) predicate.BattleRecords {
	vc := string(v)
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBattleFormat), vc))
	})
}

// BattleOpponentPartyIDEQ applies the EQ predicate on the "battle_opponent_party_id" field.
func BattleOpponentPartyIDEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBattleOpponentPartyID), v))
	})
}

// BattleOpponentPartyIDNEQ applies the NEQ predicate on the "battle_opponent_party_id" field.
func BattleOpponentPartyIDNEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBattleOpponentPartyID), v))
	})
}

// BattleOpponentPartyIDIn applies the In predicate on the "battle_opponent_party_id" field.
func BattleOpponentPartyIDIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBattleOpponentPartyID), v...))
	})
}

// BattleOpponentPartyIDNotIn applies the NotIn predicate on the "battle_opponent_party_id" field.
func BattleOpponentPartyIDNotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBattleOpponentPartyID), v...))
	})
}

// SelfElectionPokemonId1EQ applies the EQ predicate on the "self_election_pokemon_id1" field.
func SelfElectionPokemonId1EQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfElectionPokemonId1), v))
	})
}

// SelfElectionPokemonId1NEQ applies the NEQ predicate on the "self_election_pokemon_id1" field.
func SelfElectionPokemonId1NEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfElectionPokemonId1), v))
	})
}

// SelfElectionPokemonId1In applies the In predicate on the "self_election_pokemon_id1" field.
func SelfElectionPokemonId1In(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSelfElectionPokemonId1), v...))
	})
}

// SelfElectionPokemonId1NotIn applies the NotIn predicate on the "self_election_pokemon_id1" field.
func SelfElectionPokemonId1NotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSelfElectionPokemonId1), v...))
	})
}

// SelfElectionPokemonId1GT applies the GT predicate on the "self_election_pokemon_id1" field.
func SelfElectionPokemonId1GT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfElectionPokemonId1), v))
	})
}

// SelfElectionPokemonId1GTE applies the GTE predicate on the "self_election_pokemon_id1" field.
func SelfElectionPokemonId1GTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfElectionPokemonId1), v))
	})
}

// SelfElectionPokemonId1LT applies the LT predicate on the "self_election_pokemon_id1" field.
func SelfElectionPokemonId1LT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfElectionPokemonId1), v))
	})
}

// SelfElectionPokemonId1LTE applies the LTE predicate on the "self_election_pokemon_id1" field.
func SelfElectionPokemonId1LTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfElectionPokemonId1), v))
	})
}

// SelfElectionPokemonId2EQ applies the EQ predicate on the "self_election_pokemon_id2" field.
func SelfElectionPokemonId2EQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfElectionPokemonId2), v))
	})
}

// SelfElectionPokemonId2NEQ applies the NEQ predicate on the "self_election_pokemon_id2" field.
func SelfElectionPokemonId2NEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfElectionPokemonId2), v))
	})
}

// SelfElectionPokemonId2In applies the In predicate on the "self_election_pokemon_id2" field.
func SelfElectionPokemonId2In(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSelfElectionPokemonId2), v...))
	})
}

// SelfElectionPokemonId2NotIn applies the NotIn predicate on the "self_election_pokemon_id2" field.
func SelfElectionPokemonId2NotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSelfElectionPokemonId2), v...))
	})
}

// SelfElectionPokemonId2GT applies the GT predicate on the "self_election_pokemon_id2" field.
func SelfElectionPokemonId2GT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfElectionPokemonId2), v))
	})
}

// SelfElectionPokemonId2GTE applies the GTE predicate on the "self_election_pokemon_id2" field.
func SelfElectionPokemonId2GTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfElectionPokemonId2), v))
	})
}

// SelfElectionPokemonId2LT applies the LT predicate on the "self_election_pokemon_id2" field.
func SelfElectionPokemonId2LT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfElectionPokemonId2), v))
	})
}

// SelfElectionPokemonId2LTE applies the LTE predicate on the "self_election_pokemon_id2" field.
func SelfElectionPokemonId2LTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfElectionPokemonId2), v))
	})
}

// SelfElectionPokemonId3EQ applies the EQ predicate on the "self_election_pokemon_id3" field.
func SelfElectionPokemonId3EQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfElectionPokemonId3), v))
	})
}

// SelfElectionPokemonId3NEQ applies the NEQ predicate on the "self_election_pokemon_id3" field.
func SelfElectionPokemonId3NEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfElectionPokemonId3), v))
	})
}

// SelfElectionPokemonId3In applies the In predicate on the "self_election_pokemon_id3" field.
func SelfElectionPokemonId3In(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSelfElectionPokemonId3), v...))
	})
}

// SelfElectionPokemonId3NotIn applies the NotIn predicate on the "self_election_pokemon_id3" field.
func SelfElectionPokemonId3NotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSelfElectionPokemonId3), v...))
	})
}

// SelfElectionPokemonId3GT applies the GT predicate on the "self_election_pokemon_id3" field.
func SelfElectionPokemonId3GT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfElectionPokemonId3), v))
	})
}

// SelfElectionPokemonId3GTE applies the GTE predicate on the "self_election_pokemon_id3" field.
func SelfElectionPokemonId3GTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfElectionPokemonId3), v))
	})
}

// SelfElectionPokemonId3LT applies the LT predicate on the "self_election_pokemon_id3" field.
func SelfElectionPokemonId3LT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfElectionPokemonId3), v))
	})
}

// SelfElectionPokemonId3LTE applies the LTE predicate on the "self_election_pokemon_id3" field.
func SelfElectionPokemonId3LTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfElectionPokemonId3), v))
	})
}

// SelfElectionPokemonId4EQ applies the EQ predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4EQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfElectionPokemonId4), v))
	})
}

// SelfElectionPokemonId4NEQ applies the NEQ predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4NEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfElectionPokemonId4), v))
	})
}

// SelfElectionPokemonId4In applies the In predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4In(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSelfElectionPokemonId4), v...))
	})
}

// SelfElectionPokemonId4NotIn applies the NotIn predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4NotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSelfElectionPokemonId4), v...))
	})
}

// SelfElectionPokemonId4GT applies the GT predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4GT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfElectionPokemonId4), v))
	})
}

// SelfElectionPokemonId4GTE applies the GTE predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4GTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfElectionPokemonId4), v))
	})
}

// SelfElectionPokemonId4LT applies the LT predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4LT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfElectionPokemonId4), v))
	})
}

// SelfElectionPokemonId4LTE applies the LTE predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4LTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfElectionPokemonId4), v))
	})
}

// SelfElectionPokemonId4IsNil applies the IsNil predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4IsNil() predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSelfElectionPokemonId4)))
	})
}

// SelfElectionPokemonId4NotNil applies the NotNil predicate on the "self_election_pokemon_id4" field.
func SelfElectionPokemonId4NotNil() predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSelfElectionPokemonId4)))
	})
}

// OpponentElectionPokemonId1EQ applies the EQ predicate on the "opponent_election_pokemon_id1" field.
func OpponentElectionPokemonId1EQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentElectionPokemonId1), v))
	})
}

// OpponentElectionPokemonId1NEQ applies the NEQ predicate on the "opponent_election_pokemon_id1" field.
func OpponentElectionPokemonId1NEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentElectionPokemonId1), v))
	})
}

// OpponentElectionPokemonId1In applies the In predicate on the "opponent_election_pokemon_id1" field.
func OpponentElectionPokemonId1In(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentElectionPokemonId1), v...))
	})
}

// OpponentElectionPokemonId1NotIn applies the NotIn predicate on the "opponent_election_pokemon_id1" field.
func OpponentElectionPokemonId1NotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentElectionPokemonId1), v...))
	})
}

// OpponentElectionPokemonId1GT applies the GT predicate on the "opponent_election_pokemon_id1" field.
func OpponentElectionPokemonId1GT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentElectionPokemonId1), v))
	})
}

// OpponentElectionPokemonId1GTE applies the GTE predicate on the "opponent_election_pokemon_id1" field.
func OpponentElectionPokemonId1GTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentElectionPokemonId1), v))
	})
}

// OpponentElectionPokemonId1LT applies the LT predicate on the "opponent_election_pokemon_id1" field.
func OpponentElectionPokemonId1LT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentElectionPokemonId1), v))
	})
}

// OpponentElectionPokemonId1LTE applies the LTE predicate on the "opponent_election_pokemon_id1" field.
func OpponentElectionPokemonId1LTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentElectionPokemonId1), v))
	})
}

// OpponentElectionPokemonId2EQ applies the EQ predicate on the "opponent_election_pokemon_id2" field.
func OpponentElectionPokemonId2EQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentElectionPokemonId2), v))
	})
}

// OpponentElectionPokemonId2NEQ applies the NEQ predicate on the "opponent_election_pokemon_id2" field.
func OpponentElectionPokemonId2NEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentElectionPokemonId2), v))
	})
}

// OpponentElectionPokemonId2In applies the In predicate on the "opponent_election_pokemon_id2" field.
func OpponentElectionPokemonId2In(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentElectionPokemonId2), v...))
	})
}

// OpponentElectionPokemonId2NotIn applies the NotIn predicate on the "opponent_election_pokemon_id2" field.
func OpponentElectionPokemonId2NotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentElectionPokemonId2), v...))
	})
}

// OpponentElectionPokemonId2GT applies the GT predicate on the "opponent_election_pokemon_id2" field.
func OpponentElectionPokemonId2GT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentElectionPokemonId2), v))
	})
}

// OpponentElectionPokemonId2GTE applies the GTE predicate on the "opponent_election_pokemon_id2" field.
func OpponentElectionPokemonId2GTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentElectionPokemonId2), v))
	})
}

// OpponentElectionPokemonId2LT applies the LT predicate on the "opponent_election_pokemon_id2" field.
func OpponentElectionPokemonId2LT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentElectionPokemonId2), v))
	})
}

// OpponentElectionPokemonId2LTE applies the LTE predicate on the "opponent_election_pokemon_id2" field.
func OpponentElectionPokemonId2LTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentElectionPokemonId2), v))
	})
}

// OpponentElectionPokemonId3EQ applies the EQ predicate on the "opponent_election_pokemon_id3" field.
func OpponentElectionPokemonId3EQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentElectionPokemonId3), v))
	})
}

// OpponentElectionPokemonId3NEQ applies the NEQ predicate on the "opponent_election_pokemon_id3" field.
func OpponentElectionPokemonId3NEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentElectionPokemonId3), v))
	})
}

// OpponentElectionPokemonId3In applies the In predicate on the "opponent_election_pokemon_id3" field.
func OpponentElectionPokemonId3In(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentElectionPokemonId3), v...))
	})
}

// OpponentElectionPokemonId3NotIn applies the NotIn predicate on the "opponent_election_pokemon_id3" field.
func OpponentElectionPokemonId3NotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentElectionPokemonId3), v...))
	})
}

// OpponentElectionPokemonId3GT applies the GT predicate on the "opponent_election_pokemon_id3" field.
func OpponentElectionPokemonId3GT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentElectionPokemonId3), v))
	})
}

// OpponentElectionPokemonId3GTE applies the GTE predicate on the "opponent_election_pokemon_id3" field.
func OpponentElectionPokemonId3GTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentElectionPokemonId3), v))
	})
}

// OpponentElectionPokemonId3LT applies the LT predicate on the "opponent_election_pokemon_id3" field.
func OpponentElectionPokemonId3LT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentElectionPokemonId3), v))
	})
}

// OpponentElectionPokemonId3LTE applies the LTE predicate on the "opponent_election_pokemon_id3" field.
func OpponentElectionPokemonId3LTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentElectionPokemonId3), v))
	})
}

// OpponentElectionPokemonId4EQ applies the EQ predicate on the "opponent_election_pokemon_id4" field.
func OpponentElectionPokemonId4EQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentElectionPokemonId4), v))
	})
}

// OpponentElectionPokemonId4NEQ applies the NEQ predicate on the "opponent_election_pokemon_id4" field.
func OpponentElectionPokemonId4NEQ(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentElectionPokemonId4), v))
	})
}

// OpponentElectionPokemonId4In applies the In predicate on the "opponent_election_pokemon_id4" field.
func OpponentElectionPokemonId4In(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentElectionPokemonId4), v...))
	})
}

// OpponentElectionPokemonId4NotIn applies the NotIn predicate on the "opponent_election_pokemon_id4" field.
func OpponentElectionPokemonId4NotIn(vs ...int) predicate.BattleRecords {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleRecords(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentElectionPokemonId4), v...))
	})
}

// OpponentElectionPokemonId4GT applies the GT predicate on the "opponent_election_pokemon_id4" field.
func OpponentElectionPokemonId4GT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentElectionPokemonId4), v))
	})
}

// OpponentElectionPokemonId4GTE applies the GTE predicate on the "opponent_election_pokemon_id4" field.
func OpponentElectionPokemonId4GTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentElectionPokemonId4), v))
	})
}

// OpponentElectionPokemonId4LT applies the LT predicate on the "opponent_election_pokemon_id4" field.
func OpponentElectionPokemonId4LT(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentElectionPokemonId4), v))
	})
}

// OpponentElectionPokemonId4LTE applies the LTE predicate on the "opponent_election_pokemon_id4" field.
func OpponentElectionPokemonId4LTE(v int) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentElectionPokemonId4), v))
	})
}

// HasUseParty applies the HasEdge predicate on the "use_party" edge.
func HasUseParty() predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsePartyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UsePartyTable, UsePartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsePartyWith applies the HasEdge predicate on the "use_party" edge with a given conditions (other predicates).
func HasUsePartyWith(preds ...predicate.Party) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsePartyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UsePartyTable, UsePartyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOpponentParty applies the HasEdge predicate on the "opponent_party" edge.
func HasOpponentParty() predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OpponentPartyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OpponentPartyTable, OpponentPartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOpponentPartyWith applies the HasEdge predicate on the "opponent_party" edge with a given conditions (other predicates).
func HasOpponentPartyWith(preds ...predicate.BattleOpponentParty) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OpponentPartyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OpponentPartyTable, OpponentPartyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BattleRecords) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BattleRecords) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BattleRecords) predicate.BattleRecords {
	return predicate.BattleRecords(func(s *sql.Selector) {
		p(s.Not())
	})
}
