// Code generated by entc, DO NOT EDIT.

package moves

import (
	"fmt"

	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

const (
	// Label holds the string label denoting the moves type in the database.
	Label = "moves"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSpecies holds the string denoting the species field in the database.
	FieldSpecies = "species"
	// FieldPower holds the string denoting the power field in the database.
	FieldPower = "power"
	// FieldAccuracy holds the string denoting the accuracy field in the database.
	FieldAccuracy = "accuracy"
	// FieldPp holds the string denoting the pp field in the database.
	FieldPp = "pp"
	// FieldIsContact holds the string denoting the is_contact field in the database.
	FieldIsContact = "is_contact"
	// FieldIsCanGuard holds the string denoting the is_can_guard field in the database.
	FieldIsCanGuard = "is_can_guard"
	// EdgeToTrainedPokemonMove1 holds the string denoting the to_trained_pokemon_move1 edge name in mutations.
	EdgeToTrainedPokemonMove1 = "to_trained_pokemon_move1"
	// EdgeToTrainedPokemonMove2 holds the string denoting the to_trained_pokemon_move2 edge name in mutations.
	EdgeToTrainedPokemonMove2 = "to_trained_pokemon_move2"
	// EdgeToTrainedPokemonMove3 holds the string denoting the to_trained_pokemon_move3 edge name in mutations.
	EdgeToTrainedPokemonMove3 = "to_trained_pokemon_move3"
	// EdgeToTrainedPokemonMove4 holds the string denoting the to_trained_pokemon_move4 edge name in mutations.
	EdgeToTrainedPokemonMove4 = "to_trained_pokemon_move4"
	// EdgeMoveToPokemon holds the string denoting the move_to_pokemon edge name in mutations.
	EdgeMoveToPokemon = "move_to_pokemon"
	// Table holds the table name of the moves in the database.
	Table = "moves"
	// ToTrainedPokemonMove1Table is the table that holds the to_trained_pokemon_move1 relation/edge.
	ToTrainedPokemonMove1Table = "trained_pokemon_details"
	// ToTrainedPokemonMove1InverseTable is the table name for the TrainedPokemonDetails entity.
	// It exists in this package in order to avoid circular dependency with the "trainedpokemondetails" package.
	ToTrainedPokemonMove1InverseTable = "trained_pokemon_details"
	// ToTrainedPokemonMove1Column is the table column denoting the to_trained_pokemon_move1 relation/edge.
	ToTrainedPokemonMove1Column = "move_id1"
	// ToTrainedPokemonMove2Table is the table that holds the to_trained_pokemon_move2 relation/edge.
	ToTrainedPokemonMove2Table = "trained_pokemon_details"
	// ToTrainedPokemonMove2InverseTable is the table name for the TrainedPokemonDetails entity.
	// It exists in this package in order to avoid circular dependency with the "trainedpokemondetails" package.
	ToTrainedPokemonMove2InverseTable = "trained_pokemon_details"
	// ToTrainedPokemonMove2Column is the table column denoting the to_trained_pokemon_move2 relation/edge.
	ToTrainedPokemonMove2Column = "move_id2"
	// ToTrainedPokemonMove3Table is the table that holds the to_trained_pokemon_move3 relation/edge.
	ToTrainedPokemonMove3Table = "trained_pokemon_details"
	// ToTrainedPokemonMove3InverseTable is the table name for the TrainedPokemonDetails entity.
	// It exists in this package in order to avoid circular dependency with the "trainedpokemondetails" package.
	ToTrainedPokemonMove3InverseTable = "trained_pokemon_details"
	// ToTrainedPokemonMove3Column is the table column denoting the to_trained_pokemon_move3 relation/edge.
	ToTrainedPokemonMove3Column = "move_id3"
	// ToTrainedPokemonMove4Table is the table that holds the to_trained_pokemon_move4 relation/edge.
	ToTrainedPokemonMove4Table = "trained_pokemon_details"
	// ToTrainedPokemonMove4InverseTable is the table name for the TrainedPokemonDetails entity.
	// It exists in this package in order to avoid circular dependency with the "trainedpokemondetails" package.
	ToTrainedPokemonMove4InverseTable = "trained_pokemon_details"
	// ToTrainedPokemonMove4Column is the table column denoting the to_trained_pokemon_move4 relation/edge.
	ToTrainedPokemonMove4Column = "move_id4"
	// MoveToPokemonTable is the table that holds the move_to_pokemon relation/edge. The primary key declared below.
	MoveToPokemonTable = "moves_move_to_pokemon"
	// MoveToPokemonInverseTable is the table name for the Pokemons entity.
	// It exists in this package in order to avoid circular dependency with the "pokemons" package.
	MoveToPokemonInverseTable = "pokemons"
)

// Columns holds all SQL columns for moves fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldSpecies,
	FieldPower,
	FieldAccuracy,
	FieldPp,
	FieldIsContact,
	FieldIsCanGuard,
}

var (
	// MoveToPokemonPrimaryKey and MoveToPokemonColumn2 are the table columns denoting the
	// primary key for the move_to_pokemon relation (M2M).
	MoveToPokemonPrimaryKey = []string{"moves_id", "pokemons_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PowerValidator is a validator for the "power" field. It is called by the builders before save.
	PowerValidator func(int) error
	// AccuracyValidator is a validator for the "accuracy" field. It is called by the builders before save.
	AccuracyValidator func(int) error
	// PpValidator is a validator for the "pp" field. It is called by the builders before save.
	PpValidator func(int) error
	// DefaultIsContact holds the default value on creation for the "is_contact" field.
	DefaultIsContact bool
	// DefaultIsCanGuard holds the default value on creation for the "is_can_guard" field.
	DefaultIsCanGuard bool
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type property.Types) error {
	switch _type {
	case "Normal", "Fighting", "Flying", "Poison", "Ground", "Rock", "Bug", "Ghost", "Steel", "Fire", "Water", "Grass", "Electric", "Psychic", "Ice", "Dragon", "Dark", "None":
		return nil
	default:
		return fmt.Errorf("moves: invalid enum value for type field: %q", _type)
	}
}
