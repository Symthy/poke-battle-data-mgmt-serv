// Code generated by entc, DO NOT EDIT.

package moves

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Species applies equality check predicate on the "species" field. It's identical to SpeciesEQ.
func Species(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecies), vc))
	})
}

// Power applies equality check predicate on the "power" field. It's identical to PowerEQ.
func Power(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPower), v))
	})
}

// Accuracy applies equality check predicate on the "accuracy" field. It's identical to AccuracyEQ.
func Accuracy(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccuracy), v))
	})
}

// Pp applies equality check predicate on the "pp" field. It's identical to PpEQ.
func Pp(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPp), v))
	})
}

// IsContact applies equality check predicate on the "is_contact" field. It's identical to IsContactEQ.
func IsContact(v bool) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsContact), v))
	})
}

// IsCanGuard applies equality check predicate on the "is_can_guard" field. It's identical to IsCanGuardEQ.
func IsCanGuard(v bool) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCanGuard), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v property.Types) predicate.Moves {
	vc := v
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), vc))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v property.Types) predicate.Moves {
	vc := v
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), vc))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...property.Types) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...property.Types) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// SpeciesEQ applies the EQ predicate on the "species" field.
func SpeciesEQ(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecies), vc))
	})
}

// SpeciesNEQ applies the NEQ predicate on the "species" field.
func SpeciesNEQ(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecies), vc))
	})
}

// SpeciesIn applies the In predicate on the "species" field.
func SpeciesIn(vs ...property.MoveSpecies) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpecies), v...))
	})
}

// SpeciesNotIn applies the NotIn predicate on the "species" field.
func SpeciesNotIn(vs ...property.MoveSpecies) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpecies), v...))
	})
}

// SpeciesGT applies the GT predicate on the "species" field.
func SpeciesGT(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecies), vc))
	})
}

// SpeciesGTE applies the GTE predicate on the "species" field.
func SpeciesGTE(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecies), vc))
	})
}

// SpeciesLT applies the LT predicate on the "species" field.
func SpeciesLT(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecies), vc))
	})
}

// SpeciesLTE applies the LTE predicate on the "species" field.
func SpeciesLTE(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecies), vc))
	})
}

// SpeciesContains applies the Contains predicate on the "species" field.
func SpeciesContains(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpecies), vc))
	})
}

// SpeciesHasPrefix applies the HasPrefix predicate on the "species" field.
func SpeciesHasPrefix(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpecies), vc))
	})
}

// SpeciesHasSuffix applies the HasSuffix predicate on the "species" field.
func SpeciesHasSuffix(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpecies), vc))
	})
}

// SpeciesEqualFold applies the EqualFold predicate on the "species" field.
func SpeciesEqualFold(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpecies), vc))
	})
}

// SpeciesContainsFold applies the ContainsFold predicate on the "species" field.
func SpeciesContainsFold(v property.MoveSpecies) predicate.Moves {
	vc := string(v)
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpecies), vc))
	})
}

// PowerEQ applies the EQ predicate on the "power" field.
func PowerEQ(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPower), v))
	})
}

// PowerNEQ applies the NEQ predicate on the "power" field.
func PowerNEQ(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPower), v))
	})
}

// PowerIn applies the In predicate on the "power" field.
func PowerIn(vs ...int) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPower), v...))
	})
}

// PowerNotIn applies the NotIn predicate on the "power" field.
func PowerNotIn(vs ...int) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPower), v...))
	})
}

// PowerGT applies the GT predicate on the "power" field.
func PowerGT(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPower), v))
	})
}

// PowerGTE applies the GTE predicate on the "power" field.
func PowerGTE(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPower), v))
	})
}

// PowerLT applies the LT predicate on the "power" field.
func PowerLT(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPower), v))
	})
}

// PowerLTE applies the LTE predicate on the "power" field.
func PowerLTE(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPower), v))
	})
}

// AccuracyEQ applies the EQ predicate on the "accuracy" field.
func AccuracyEQ(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccuracy), v))
	})
}

// AccuracyNEQ applies the NEQ predicate on the "accuracy" field.
func AccuracyNEQ(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccuracy), v))
	})
}

// AccuracyIn applies the In predicate on the "accuracy" field.
func AccuracyIn(vs ...int) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccuracy), v...))
	})
}

// AccuracyNotIn applies the NotIn predicate on the "accuracy" field.
func AccuracyNotIn(vs ...int) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccuracy), v...))
	})
}

// AccuracyGT applies the GT predicate on the "accuracy" field.
func AccuracyGT(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccuracy), v))
	})
}

// AccuracyGTE applies the GTE predicate on the "accuracy" field.
func AccuracyGTE(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccuracy), v))
	})
}

// AccuracyLT applies the LT predicate on the "accuracy" field.
func AccuracyLT(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccuracy), v))
	})
}

// AccuracyLTE applies the LTE predicate on the "accuracy" field.
func AccuracyLTE(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccuracy), v))
	})
}

// PpEQ applies the EQ predicate on the "pp" field.
func PpEQ(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPp), v))
	})
}

// PpNEQ applies the NEQ predicate on the "pp" field.
func PpNEQ(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPp), v))
	})
}

// PpIn applies the In predicate on the "pp" field.
func PpIn(vs ...int) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPp), v...))
	})
}

// PpNotIn applies the NotIn predicate on the "pp" field.
func PpNotIn(vs ...int) predicate.Moves {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Moves(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPp), v...))
	})
}

// PpGT applies the GT predicate on the "pp" field.
func PpGT(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPp), v))
	})
}

// PpGTE applies the GTE predicate on the "pp" field.
func PpGTE(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPp), v))
	})
}

// PpLT applies the LT predicate on the "pp" field.
func PpLT(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPp), v))
	})
}

// PpLTE applies the LTE predicate on the "pp" field.
func PpLTE(v int) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPp), v))
	})
}

// IsContactEQ applies the EQ predicate on the "is_contact" field.
func IsContactEQ(v bool) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsContact), v))
	})
}

// IsContactNEQ applies the NEQ predicate on the "is_contact" field.
func IsContactNEQ(v bool) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsContact), v))
	})
}

// IsCanGuardEQ applies the EQ predicate on the "is_can_guard" field.
func IsCanGuardEQ(v bool) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCanGuard), v))
	})
}

// IsCanGuardNEQ applies the NEQ predicate on the "is_can_guard" field.
func IsCanGuardNEQ(v bool) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsCanGuard), v))
	})
}

// HasToTrainedPokemonMove1 applies the HasEdge predicate on the "to_trained_pokemon_move1" edge.
func HasToTrainedPokemonMove1() predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonMove1Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonMove1Table, ToTrainedPokemonMove1Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToTrainedPokemonMove1With applies the HasEdge predicate on the "to_trained_pokemon_move1" edge with a given conditions (other predicates).
func HasToTrainedPokemonMove1With(preds ...predicate.TrainedPokemonDetails) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonMove1InverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonMove1Table, ToTrainedPokemonMove1Column),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToTrainedPokemonMove2 applies the HasEdge predicate on the "to_trained_pokemon_move2" edge.
func HasToTrainedPokemonMove2() predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonMove2Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonMove2Table, ToTrainedPokemonMove2Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToTrainedPokemonMove2With applies the HasEdge predicate on the "to_trained_pokemon_move2" edge with a given conditions (other predicates).
func HasToTrainedPokemonMove2With(preds ...predicate.TrainedPokemonDetails) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonMove2InverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonMove2Table, ToTrainedPokemonMove2Column),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToTrainedPokemonMove3 applies the HasEdge predicate on the "to_trained_pokemon_move3" edge.
func HasToTrainedPokemonMove3() predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonMove3Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonMove3Table, ToTrainedPokemonMove3Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToTrainedPokemonMove3With applies the HasEdge predicate on the "to_trained_pokemon_move3" edge with a given conditions (other predicates).
func HasToTrainedPokemonMove3With(preds ...predicate.TrainedPokemonDetails) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonMove3InverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonMove3Table, ToTrainedPokemonMove3Column),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToTrainedPokemonMove4 applies the HasEdge predicate on the "to_trained_pokemon_move4" edge.
func HasToTrainedPokemonMove4() predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonMove4Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonMove4Table, ToTrainedPokemonMove4Column),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToTrainedPokemonMove4With applies the HasEdge predicate on the "to_trained_pokemon_move4" edge with a given conditions (other predicates).
func HasToTrainedPokemonMove4With(preds ...predicate.TrainedPokemonDetails) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonMove4InverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonMove4Table, ToTrainedPokemonMove4Column),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMoveToPokemon applies the HasEdge predicate on the "move_to_pokemon" edge.
func HasMoveToPokemon() predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MoveToPokemonTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MoveToPokemonTable, MoveToPokemonPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMoveToPokemonWith applies the HasEdge predicate on the "move_to_pokemon" edge with a given conditions (other predicates).
func HasMoveToPokemonWith(preds ...predicate.Pokemons) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MoveToPokemonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MoveToPokemonTable, MoveToPokemonPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Moves) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Moves) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Moves) predicate.Moves {
	return predicate.Moves(func(s *sql.Selector) {
		p(s.Not())
	})
}
