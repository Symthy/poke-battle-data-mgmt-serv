// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/helditems"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// HeldItems is the model entity for the HeldItems schema.
type HeldItems struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PhysicalMovePowerCorrectionValue holds the value of the "physical_move_power_correction_value" field.
	PhysicalMovePowerCorrectionValue int `json:"physical_move_power_correction_value,omitempty"`
	// SpecialMovePowerCorrectionValue holds the value of the "special_move_power_correction_value" field.
	SpecialMovePowerCorrectionValue int `json:"special_move_power_correction_value,omitempty"`
	// AttackPowerCorrectionValue holds the value of the "attack_power_correction_value" field.
	AttackPowerCorrectionValue int `json:"attack_power_correction_value,omitempty"`
	// SpecialAttackPowerCorrectionValue holds the value of the "special_attack_power_correction_value" field.
	SpecialAttackPowerCorrectionValue int `json:"special_attack_power_correction_value,omitempty"`
	// AttackCorrectionValue holds the value of the "attack_correction_value" field.
	AttackCorrectionValue int `json:"attack_correction_value,omitempty"`
	// SpecialAttackCorrectionValue holds the value of the "special_attack_correction_value" field.
	SpecialAttackCorrectionValue int `json:"special_attack_correction_value,omitempty"`
	// DeffenseCorrectionValue holds the value of the "deffense_correction_value" field.
	DeffenseCorrectionValue int `json:"deffense_correction_value,omitempty"`
	// SpecialDeffenseCorrectionValue holds the value of the "special_deffense_correction_value" field.
	SpecialDeffenseCorrectionValue int `json:"special_deffense_correction_value,omitempty"`
	// DamageCorrectionType1 holds the value of the "damage_correction_type1" field.
	DamageCorrectionType1 property.Types `json:"damage_correction_type1,omitempty"`
	// DamageCorrectionValue1 holds the value of the "damage_correction_value1" field.
	DamageCorrectionValue1 int `json:"damage_correction_value1,omitempty"`
	// DamageCorrectionType2 holds the value of the "damage_correction_type2" field.
	DamageCorrectionType2 property.Types `json:"damage_correction_type2,omitempty"`
	// DamageCorrectionValue2 holds the value of the "damage_correction_value2" field.
	DamageCorrectionValue2 int `json:"damage_correction_value2,omitempty"`
	// WeightCorrectionValue holds the value of the "weight_correction_value" field.
	WeightCorrectionValue int `json:"weight_correction_value,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HeldItemsQuery when eager-loading is set.
	Edges HeldItemsEdges `json:"edges"`
}

// HeldItemsEdges holds the relations/edges for other nodes in the graph.
type HeldItemsEdges struct {
	// ToTrainedPokemonItem holds the value of the to_trained_pokemon_item edge.
	ToTrainedPokemonItem []*TrainedPokemonDetails `json:"to_trained_pokemon_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ToTrainedPokemonItemOrErr returns the ToTrainedPokemonItem value or an error if the edge
// was not loaded in eager-loading.
func (e HeldItemsEdges) ToTrainedPokemonItemOrErr() ([]*TrainedPokemonDetails, error) {
	if e.loadedTypes[0] {
		return e.ToTrainedPokemonItem, nil
	}
	return nil, &NotLoadedError{edge: "to_trained_pokemon_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HeldItems) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case helditems.FieldID, helditems.FieldPhysicalMovePowerCorrectionValue, helditems.FieldSpecialMovePowerCorrectionValue, helditems.FieldAttackPowerCorrectionValue, helditems.FieldSpecialAttackPowerCorrectionValue, helditems.FieldAttackCorrectionValue, helditems.FieldSpecialAttackCorrectionValue, helditems.FieldDeffenseCorrectionValue, helditems.FieldSpecialDeffenseCorrectionValue, helditems.FieldDamageCorrectionValue1, helditems.FieldDamageCorrectionValue2, helditems.FieldWeightCorrectionValue:
			values[i] = new(sql.NullInt64)
		case helditems.FieldDamageCorrectionType1, helditems.FieldDamageCorrectionType2, helditems.FieldName, helditems.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HeldItems", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HeldItems fields.
func (hi *HeldItems) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case helditems.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hi.ID = int(value.Int64)
		case helditems.FieldPhysicalMovePowerCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field physical_move_power_correction_value", values[i])
			} else if value.Valid {
				hi.PhysicalMovePowerCorrectionValue = int(value.Int64)
			}
		case helditems.FieldSpecialMovePowerCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_move_power_correction_value", values[i])
			} else if value.Valid {
				hi.SpecialMovePowerCorrectionValue = int(value.Int64)
			}
		case helditems.FieldAttackPowerCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attack_power_correction_value", values[i])
			} else if value.Valid {
				hi.AttackPowerCorrectionValue = int(value.Int64)
			}
		case helditems.FieldSpecialAttackPowerCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_attack_power_correction_value", values[i])
			} else if value.Valid {
				hi.SpecialAttackPowerCorrectionValue = int(value.Int64)
			}
		case helditems.FieldAttackCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attack_correction_value", values[i])
			} else if value.Valid {
				hi.AttackCorrectionValue = int(value.Int64)
			}
		case helditems.FieldSpecialAttackCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_attack_correction_value", values[i])
			} else if value.Valid {
				hi.SpecialAttackCorrectionValue = int(value.Int64)
			}
		case helditems.FieldDeffenseCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deffense_correction_value", values[i])
			} else if value.Valid {
				hi.DeffenseCorrectionValue = int(value.Int64)
			}
		case helditems.FieldSpecialDeffenseCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_deffense_correction_value", values[i])
			} else if value.Valid {
				hi.SpecialDeffenseCorrectionValue = int(value.Int64)
			}
		case helditems.FieldDamageCorrectionType1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field damage_correction_type1", values[i])
			} else if value.Valid {
				hi.DamageCorrectionType1 = property.Types(value.String)
			}
		case helditems.FieldDamageCorrectionValue1:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field damage_correction_value1", values[i])
			} else if value.Valid {
				hi.DamageCorrectionValue1 = int(value.Int64)
			}
		case helditems.FieldDamageCorrectionType2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field damage_correction_type2", values[i])
			} else if value.Valid {
				hi.DamageCorrectionType2 = property.Types(value.String)
			}
		case helditems.FieldDamageCorrectionValue2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field damage_correction_value2", values[i])
			} else if value.Valid {
				hi.DamageCorrectionValue2 = int(value.Int64)
			}
		case helditems.FieldWeightCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_correction_value", values[i])
			} else if value.Valid {
				hi.WeightCorrectionValue = int(value.Int64)
			}
		case helditems.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hi.Name = value.String
			}
		case helditems.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hi.Description = value.String
			}
		}
	}
	return nil
}

// QueryToTrainedPokemonItem queries the "to_trained_pokemon_item" edge of the HeldItems entity.
func (hi *HeldItems) QueryToTrainedPokemonItem() *TrainedPokemonDetailsQuery {
	return (&HeldItemsClient{config: hi.config}).QueryToTrainedPokemonItem(hi)
}

// Update returns a builder for updating this HeldItems.
// Note that you need to call HeldItems.Unwrap() before calling this method if this HeldItems
// was returned from a transaction, and the transaction was committed or rolled back.
func (hi *HeldItems) Update() *HeldItemsUpdateOne {
	return (&HeldItemsClient{config: hi.config}).UpdateOne(hi)
}

// Unwrap unwraps the HeldItems entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hi *HeldItems) Unwrap() *HeldItems {
	tx, ok := hi.config.driver.(*txDriver)
	if !ok {
		panic("ent: HeldItems is not a transactional entity")
	}
	hi.config.driver = tx.drv
	return hi
}

// String implements the fmt.Stringer.
func (hi *HeldItems) String() string {
	var builder strings.Builder
	builder.WriteString("HeldItems(")
	builder.WriteString(fmt.Sprintf("id=%v", hi.ID))
	builder.WriteString(", physical_move_power_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.PhysicalMovePowerCorrectionValue))
	builder.WriteString(", special_move_power_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.SpecialMovePowerCorrectionValue))
	builder.WriteString(", attack_power_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.AttackPowerCorrectionValue))
	builder.WriteString(", special_attack_power_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.SpecialAttackPowerCorrectionValue))
	builder.WriteString(", attack_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.AttackCorrectionValue))
	builder.WriteString(", special_attack_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.SpecialAttackCorrectionValue))
	builder.WriteString(", deffense_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.DeffenseCorrectionValue))
	builder.WriteString(", special_deffense_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.SpecialDeffenseCorrectionValue))
	builder.WriteString(", damage_correction_type1=")
	builder.WriteString(fmt.Sprintf("%v", hi.DamageCorrectionType1))
	builder.WriteString(", damage_correction_value1=")
	builder.WriteString(fmt.Sprintf("%v", hi.DamageCorrectionValue1))
	builder.WriteString(", damage_correction_type2=")
	builder.WriteString(fmt.Sprintf("%v", hi.DamageCorrectionType2))
	builder.WriteString(", damage_correction_value2=")
	builder.WriteString(fmt.Sprintf("%v", hi.DamageCorrectionValue2))
	builder.WriteString(", weight_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", hi.WeightCorrectionValue))
	builder.WriteString(", name=")
	builder.WriteString(hi.Name)
	builder.WriteString(", description=")
	builder.WriteString(hi.Description)
	builder.WriteByte(')')
	return builder.String()
}

// HeldItemsSlice is a parsable slice of HeldItems.
type HeldItemsSlice []*HeldItems

func (hi HeldItemsSlice) config(cfg config) {
	for _i := range hi {
		hi[_i].config = cfg
	}
}
