// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battleopponentparty"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battlerecords"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/forms"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/helditems"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/partyresultrecord"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/tags"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/typecompatibility"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	abilitiesMixin := schema.Abilities{}.Mixin()
	abilitiesMixinFields0 := abilitiesMixin[0].Fields()
	_ = abilitiesMixinFields0
	abilitiesFields := schema.Abilities{}.Fields()
	_ = abilitiesFields
	// abilitiesDescPhysicalMovePowerCorrectionValue is the schema descriptor for physical_move_power_correction_value field.
	abilitiesDescPhysicalMovePowerCorrectionValue := abilitiesMixinFields0[0].Descriptor()
	// abilities.DefaultPhysicalMovePowerCorrectionValue holds the default value on creation for the physical_move_power_correction_value field.
	abilities.DefaultPhysicalMovePowerCorrectionValue = abilitiesDescPhysicalMovePowerCorrectionValue.Default.(int)
	// abilitiesDescSpecialMovePowerCorrectionValue is the schema descriptor for special_move_power_correction_value field.
	abilitiesDescSpecialMovePowerCorrectionValue := abilitiesMixinFields0[1].Descriptor()
	// abilities.DefaultSpecialMovePowerCorrectionValue holds the default value on creation for the special_move_power_correction_value field.
	abilities.DefaultSpecialMovePowerCorrectionValue = abilitiesDescSpecialMovePowerCorrectionValue.Default.(int)
	// abilitiesDescAttackPowerCorrectionValue is the schema descriptor for attack_power_correction_value field.
	abilitiesDescAttackPowerCorrectionValue := abilitiesMixinFields0[2].Descriptor()
	// abilities.DefaultAttackPowerCorrectionValue holds the default value on creation for the attack_power_correction_value field.
	abilities.DefaultAttackPowerCorrectionValue = abilitiesDescAttackPowerCorrectionValue.Default.(int)
	// abilitiesDescSpecialAttackPowerCorrectionValue is the schema descriptor for special_attack_power_correction_value field.
	abilitiesDescSpecialAttackPowerCorrectionValue := abilitiesMixinFields0[3].Descriptor()
	// abilities.DefaultSpecialAttackPowerCorrectionValue holds the default value on creation for the special_attack_power_correction_value field.
	abilities.DefaultSpecialAttackPowerCorrectionValue = abilitiesDescSpecialAttackPowerCorrectionValue.Default.(int)
	// abilitiesDescAttackCorrectionValue is the schema descriptor for attack_correction_value field.
	abilitiesDescAttackCorrectionValue := abilitiesMixinFields0[4].Descriptor()
	// abilities.DefaultAttackCorrectionValue holds the default value on creation for the attack_correction_value field.
	abilities.DefaultAttackCorrectionValue = abilitiesDescAttackCorrectionValue.Default.(int)
	// abilitiesDescSpecialAttackCorrectionValue is the schema descriptor for special_attack_correction_value field.
	abilitiesDescSpecialAttackCorrectionValue := abilitiesMixinFields0[5].Descriptor()
	// abilities.DefaultSpecialAttackCorrectionValue holds the default value on creation for the special_attack_correction_value field.
	abilities.DefaultSpecialAttackCorrectionValue = abilitiesDescSpecialAttackCorrectionValue.Default.(int)
	// abilitiesDescDeffenseCorrectionValue is the schema descriptor for deffense_correction_value field.
	abilitiesDescDeffenseCorrectionValue := abilitiesMixinFields0[6].Descriptor()
	// abilities.DefaultDeffenseCorrectionValue holds the default value on creation for the deffense_correction_value field.
	abilities.DefaultDeffenseCorrectionValue = abilitiesDescDeffenseCorrectionValue.Default.(int)
	// abilitiesDescSpecialDeffenseCorrectionValue is the schema descriptor for special_deffense_correction_value field.
	abilitiesDescSpecialDeffenseCorrectionValue := abilitiesMixinFields0[7].Descriptor()
	// abilities.DefaultSpecialDeffenseCorrectionValue holds the default value on creation for the special_deffense_correction_value field.
	abilities.DefaultSpecialDeffenseCorrectionValue = abilitiesDescSpecialDeffenseCorrectionValue.Default.(int)
	// abilitiesDescDamageCorrectionType1 is the schema descriptor for damage_correction_type1 field.
	abilitiesDescDamageCorrectionType1 := abilitiesMixinFields0[8].Descriptor()
	// abilities.DamageCorrectionType1Validator is a validator for the "damage_correction_type1" field. It is called by the builders before save.
	abilities.DamageCorrectionType1Validator = abilitiesDescDamageCorrectionType1.Validators[0].(func(string) error)
	// abilitiesDescDamageCorrectionValue1 is the schema descriptor for damage_correction_value1 field.
	abilitiesDescDamageCorrectionValue1 := abilitiesMixinFields0[9].Descriptor()
	// abilities.DefaultDamageCorrectionValue1 holds the default value on creation for the damage_correction_value1 field.
	abilities.DefaultDamageCorrectionValue1 = abilitiesDescDamageCorrectionValue1.Default.(int)
	// abilitiesDescWeightCorrectionValue is the schema descriptor for weight_correction_value field.
	abilitiesDescWeightCorrectionValue := abilitiesMixinFields0[12].Descriptor()
	// abilities.DefaultWeightCorrectionValue holds the default value on creation for the weight_correction_value field.
	abilities.DefaultWeightCorrectionValue = abilitiesDescWeightCorrectionValue.Default.(int)
	// abilitiesDescName is the schema descriptor for name field.
	abilitiesDescName := abilitiesFields[0].Descriptor()
	// abilities.NameValidator is a validator for the "name" field. It is called by the builders before save.
	abilities.NameValidator = abilitiesDescName.Validators[0].(func(string) error)
	battleopponentpartyFields := schema.BattleOpponentParty{}.Fields()
	_ = battleopponentpartyFields
	// battleopponentpartyDescOpponentPokemonId1 is the schema descriptor for opponent_pokemon_id1 field.
	battleopponentpartyDescOpponentPokemonId1 := battleopponentpartyFields[0].Descriptor()
	// battleopponentparty.OpponentPokemonId1Validator is a validator for the "opponent_pokemon_id1" field. It is called by the builders before save.
	battleopponentparty.OpponentPokemonId1Validator = func() func(int) error {
		validators := battleopponentpartyDescOpponentPokemonId1.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_pokemon_id1 int) error {
			for _, fn := range fns {
				if err := fn(opponent_pokemon_id1); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battleopponentpartyDescOpponentPokemonId2 is the schema descriptor for opponent_pokemon_id2 field.
	battleopponentpartyDescOpponentPokemonId2 := battleopponentpartyFields[1].Descriptor()
	// battleopponentparty.OpponentPokemonId2Validator is a validator for the "opponent_pokemon_id2" field. It is called by the builders before save.
	battleopponentparty.OpponentPokemonId2Validator = func() func(int) error {
		validators := battleopponentpartyDescOpponentPokemonId2.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_pokemon_id2 int) error {
			for _, fn := range fns {
				if err := fn(opponent_pokemon_id2); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battleopponentpartyDescOpponentPokemonId3 is the schema descriptor for opponent_pokemon_id3 field.
	battleopponentpartyDescOpponentPokemonId3 := battleopponentpartyFields[2].Descriptor()
	// battleopponentparty.OpponentPokemonId3Validator is a validator for the "opponent_pokemon_id3" field. It is called by the builders before save.
	battleopponentparty.OpponentPokemonId3Validator = func() func(int) error {
		validators := battleopponentpartyDescOpponentPokemonId3.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_pokemon_id3 int) error {
			for _, fn := range fns {
				if err := fn(opponent_pokemon_id3); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battleopponentpartyDescOpponentPokemonId4 is the schema descriptor for opponent_pokemon_id4 field.
	battleopponentpartyDescOpponentPokemonId4 := battleopponentpartyFields[3].Descriptor()
	// battleopponentparty.OpponentPokemonId4Validator is a validator for the "opponent_pokemon_id4" field. It is called by the builders before save.
	battleopponentparty.OpponentPokemonId4Validator = func() func(int) error {
		validators := battleopponentpartyDescOpponentPokemonId4.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_pokemon_id4 int) error {
			for _, fn := range fns {
				if err := fn(opponent_pokemon_id4); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battleopponentpartyDescOpponentPokemonId5 is the schema descriptor for opponent_pokemon_id5 field.
	battleopponentpartyDescOpponentPokemonId5 := battleopponentpartyFields[4].Descriptor()
	// battleopponentparty.OpponentPokemonId5Validator is a validator for the "opponent_pokemon_id5" field. It is called by the builders before save.
	battleopponentparty.OpponentPokemonId5Validator = func() func(int) error {
		validators := battleopponentpartyDescOpponentPokemonId5.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_pokemon_id5 int) error {
			for _, fn := range fns {
				if err := fn(opponent_pokemon_id5); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battleopponentpartyDescOpponentPokemonId6 is the schema descriptor for opponent_pokemon_id6 field.
	battleopponentpartyDescOpponentPokemonId6 := battleopponentpartyFields[5].Descriptor()
	// battleopponentparty.OpponentPokemonId6Validator is a validator for the "opponent_pokemon_id6" field. It is called by the builders before save.
	battleopponentparty.OpponentPokemonId6Validator = func() func(int) error {
		validators := battleopponentpartyDescOpponentPokemonId6.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_pokemon_id6 int) error {
			for _, fn := range fns {
				if err := fn(opponent_pokemon_id6); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	battlerecordsFields := schema.BattleRecords{}.Fields()
	_ = battlerecordsFields
	// battlerecordsDescPartyID is the schema descriptor for party_id field.
	battlerecordsDescPartyID := battlerecordsFields[0].Descriptor()
	// battlerecords.PartyIDValidator is a validator for the "party_id" field. It is called by the builders before save.
	battlerecords.PartyIDValidator = func() func(int) error {
		validators := battlerecordsDescPartyID.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(use_party int) error {
			for _, fn := range fns {
				if err := fn(use_party); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescBattleOpponentPartyID is the schema descriptor for battle_opponent_party_id field.
	battlerecordsDescBattleOpponentPartyID := battlerecordsFields[2].Descriptor()
	// battlerecords.BattleOpponentPartyIDValidator is a validator for the "battle_opponent_party_id" field. It is called by the builders before save.
	battlerecords.BattleOpponentPartyIDValidator = func() func(int) error {
		validators := battlerecordsDescBattleOpponentPartyID.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_party int) error {
			for _, fn := range fns {
				if err := fn(opponent_party); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescSelfElectionPokemonId1 is the schema descriptor for self_election_pokemon_id1 field.
	battlerecordsDescSelfElectionPokemonId1 := battlerecordsFields[3].Descriptor()
	// battlerecords.SelfElectionPokemonId1Validator is a validator for the "self_election_pokemon_id1" field. It is called by the builders before save.
	battlerecords.SelfElectionPokemonId1Validator = func() func(int) error {
		validators := battlerecordsDescSelfElectionPokemonId1.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(self_election_pokemon_id1 int) error {
			for _, fn := range fns {
				if err := fn(self_election_pokemon_id1); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescSelfElectionPokemonId2 is the schema descriptor for self_election_pokemon_id2 field.
	battlerecordsDescSelfElectionPokemonId2 := battlerecordsFields[4].Descriptor()
	// battlerecords.SelfElectionPokemonId2Validator is a validator for the "self_election_pokemon_id2" field. It is called by the builders before save.
	battlerecords.SelfElectionPokemonId2Validator = func() func(int) error {
		validators := battlerecordsDescSelfElectionPokemonId2.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(self_election_pokemon_id2 int) error {
			for _, fn := range fns {
				if err := fn(self_election_pokemon_id2); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescSelfElectionPokemonId3 is the schema descriptor for self_election_pokemon_id3 field.
	battlerecordsDescSelfElectionPokemonId3 := battlerecordsFields[5].Descriptor()
	// battlerecords.SelfElectionPokemonId3Validator is a validator for the "self_election_pokemon_id3" field. It is called by the builders before save.
	battlerecords.SelfElectionPokemonId3Validator = func() func(int) error {
		validators := battlerecordsDescSelfElectionPokemonId3.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(self_election_pokemon_id3 int) error {
			for _, fn := range fns {
				if err := fn(self_election_pokemon_id3); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescSelfElectionPokemonId4 is the schema descriptor for self_election_pokemon_id4 field.
	battlerecordsDescSelfElectionPokemonId4 := battlerecordsFields[6].Descriptor()
	// battlerecords.SelfElectionPokemonId4Validator is a validator for the "self_election_pokemon_id4" field. It is called by the builders before save.
	battlerecords.SelfElectionPokemonId4Validator = func() func(int) error {
		validators := battlerecordsDescSelfElectionPokemonId4.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(self_election_pokemon_id4 int) error {
			for _, fn := range fns {
				if err := fn(self_election_pokemon_id4); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescOpponentElectionPokemonId1 is the schema descriptor for opponent_election_pokemon_id1 field.
	battlerecordsDescOpponentElectionPokemonId1 := battlerecordsFields[7].Descriptor()
	// battlerecords.OpponentElectionPokemonId1Validator is a validator for the "opponent_election_pokemon_id1" field. It is called by the builders before save.
	battlerecords.OpponentElectionPokemonId1Validator = func() func(int) error {
		validators := battlerecordsDescOpponentElectionPokemonId1.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_election_pokemon_id1 int) error {
			for _, fn := range fns {
				if err := fn(opponent_election_pokemon_id1); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescOpponentElectionPokemonId2 is the schema descriptor for opponent_election_pokemon_id2 field.
	battlerecordsDescOpponentElectionPokemonId2 := battlerecordsFields[8].Descriptor()
	// battlerecords.OpponentElectionPokemonId2Validator is a validator for the "opponent_election_pokemon_id2" field. It is called by the builders before save.
	battlerecords.OpponentElectionPokemonId2Validator = func() func(int) error {
		validators := battlerecordsDescOpponentElectionPokemonId2.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_election_pokemon_id2 int) error {
			for _, fn := range fns {
				if err := fn(opponent_election_pokemon_id2); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescOpponentElectionPokemonId3 is the schema descriptor for opponent_election_pokemon_id3 field.
	battlerecordsDescOpponentElectionPokemonId3 := battlerecordsFields[9].Descriptor()
	// battlerecords.OpponentElectionPokemonId3Validator is a validator for the "opponent_election_pokemon_id3" field. It is called by the builders before save.
	battlerecords.OpponentElectionPokemonId3Validator = func() func(int) error {
		validators := battlerecordsDescOpponentElectionPokemonId3.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_election_pokemon_id3 int) error {
			for _, fn := range fns {
				if err := fn(opponent_election_pokemon_id3); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// battlerecordsDescOpponentElectionPokemonId4 is the schema descriptor for opponent_election_pokemon_id4 field.
	battlerecordsDescOpponentElectionPokemonId4 := battlerecordsFields[10].Descriptor()
	// battlerecords.OpponentElectionPokemonId4Validator is a validator for the "opponent_election_pokemon_id4" field. It is called by the builders before save.
	battlerecords.OpponentElectionPokemonId4Validator = func() func(int) error {
		validators := battlerecordsDescOpponentElectionPokemonId4.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(opponent_election_pokemon_id4 int) error {
			for _, fn := range fns {
				if err := fn(opponent_election_pokemon_id4); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	formsFields := schema.Forms{}.Fields()
	_ = formsFields
	// formsDescFormName is the schema descriptor for form_name field.
	formsDescFormName := formsFields[0].Descriptor()
	// forms.FormNameValidator is a validator for the "form_name" field. It is called by the builders before save.
	forms.FormNameValidator = formsDescFormName.Validators[0].(func(string) error)
	// formsDescIsRegionalVariant is the schema descriptor for is_regional_variant field.
	formsDescIsRegionalVariant := formsFields[1].Descriptor()
	// forms.DefaultIsRegionalVariant holds the default value on creation for the is_regional_variant field.
	forms.DefaultIsRegionalVariant = formsDescIsRegionalVariant.Default.(bool)
	// formsDescRegionName is the schema descriptor for regionName field.
	formsDescRegionName := formsFields[2].Descriptor()
	// forms.RegionNameValidator is a validator for the "regionName" field. It is called by the builders before save.
	forms.RegionNameValidator = formsDescRegionName.Validators[0].(func(string) error)
	helditemsMixin := schema.HeldItems{}.Mixin()
	helditemsMixinFields0 := helditemsMixin[0].Fields()
	_ = helditemsMixinFields0
	helditemsFields := schema.HeldItems{}.Fields()
	_ = helditemsFields
	// helditemsDescPhysicalMovePowerCorrectionValue is the schema descriptor for physical_move_power_correction_value field.
	helditemsDescPhysicalMovePowerCorrectionValue := helditemsMixinFields0[0].Descriptor()
	// helditems.DefaultPhysicalMovePowerCorrectionValue holds the default value on creation for the physical_move_power_correction_value field.
	helditems.DefaultPhysicalMovePowerCorrectionValue = helditemsDescPhysicalMovePowerCorrectionValue.Default.(int)
	// helditemsDescSpecialMovePowerCorrectionValue is the schema descriptor for special_move_power_correction_value field.
	helditemsDescSpecialMovePowerCorrectionValue := helditemsMixinFields0[1].Descriptor()
	// helditems.DefaultSpecialMovePowerCorrectionValue holds the default value on creation for the special_move_power_correction_value field.
	helditems.DefaultSpecialMovePowerCorrectionValue = helditemsDescSpecialMovePowerCorrectionValue.Default.(int)
	// helditemsDescAttackPowerCorrectionValue is the schema descriptor for attack_power_correction_value field.
	helditemsDescAttackPowerCorrectionValue := helditemsMixinFields0[2].Descriptor()
	// helditems.DefaultAttackPowerCorrectionValue holds the default value on creation for the attack_power_correction_value field.
	helditems.DefaultAttackPowerCorrectionValue = helditemsDescAttackPowerCorrectionValue.Default.(int)
	// helditemsDescSpecialAttackPowerCorrectionValue is the schema descriptor for special_attack_power_correction_value field.
	helditemsDescSpecialAttackPowerCorrectionValue := helditemsMixinFields0[3].Descriptor()
	// helditems.DefaultSpecialAttackPowerCorrectionValue holds the default value on creation for the special_attack_power_correction_value field.
	helditems.DefaultSpecialAttackPowerCorrectionValue = helditemsDescSpecialAttackPowerCorrectionValue.Default.(int)
	// helditemsDescAttackCorrectionValue is the schema descriptor for attack_correction_value field.
	helditemsDescAttackCorrectionValue := helditemsMixinFields0[4].Descriptor()
	// helditems.DefaultAttackCorrectionValue holds the default value on creation for the attack_correction_value field.
	helditems.DefaultAttackCorrectionValue = helditemsDescAttackCorrectionValue.Default.(int)
	// helditemsDescSpecialAttackCorrectionValue is the schema descriptor for special_attack_correction_value field.
	helditemsDescSpecialAttackCorrectionValue := helditemsMixinFields0[5].Descriptor()
	// helditems.DefaultSpecialAttackCorrectionValue holds the default value on creation for the special_attack_correction_value field.
	helditems.DefaultSpecialAttackCorrectionValue = helditemsDescSpecialAttackCorrectionValue.Default.(int)
	// helditemsDescDeffenseCorrectionValue is the schema descriptor for deffense_correction_value field.
	helditemsDescDeffenseCorrectionValue := helditemsMixinFields0[6].Descriptor()
	// helditems.DefaultDeffenseCorrectionValue holds the default value on creation for the deffense_correction_value field.
	helditems.DefaultDeffenseCorrectionValue = helditemsDescDeffenseCorrectionValue.Default.(int)
	// helditemsDescSpecialDeffenseCorrectionValue is the schema descriptor for special_deffense_correction_value field.
	helditemsDescSpecialDeffenseCorrectionValue := helditemsMixinFields0[7].Descriptor()
	// helditems.DefaultSpecialDeffenseCorrectionValue holds the default value on creation for the special_deffense_correction_value field.
	helditems.DefaultSpecialDeffenseCorrectionValue = helditemsDescSpecialDeffenseCorrectionValue.Default.(int)
	// helditemsDescDamageCorrectionType1 is the schema descriptor for damage_correction_type1 field.
	helditemsDescDamageCorrectionType1 := helditemsMixinFields0[8].Descriptor()
	// helditems.DamageCorrectionType1Validator is a validator for the "damage_correction_type1" field. It is called by the builders before save.
	helditems.DamageCorrectionType1Validator = helditemsDescDamageCorrectionType1.Validators[0].(func(string) error)
	// helditemsDescDamageCorrectionValue1 is the schema descriptor for damage_correction_value1 field.
	helditemsDescDamageCorrectionValue1 := helditemsMixinFields0[9].Descriptor()
	// helditems.DefaultDamageCorrectionValue1 holds the default value on creation for the damage_correction_value1 field.
	helditems.DefaultDamageCorrectionValue1 = helditemsDescDamageCorrectionValue1.Default.(int)
	// helditemsDescWeightCorrectionValue is the schema descriptor for weight_correction_value field.
	helditemsDescWeightCorrectionValue := helditemsMixinFields0[12].Descriptor()
	// helditems.DefaultWeightCorrectionValue holds the default value on creation for the weight_correction_value field.
	helditems.DefaultWeightCorrectionValue = helditemsDescWeightCorrectionValue.Default.(int)
	// helditemsDescName is the schema descriptor for name field.
	helditemsDescName := helditemsFields[0].Descriptor()
	// helditems.NameValidator is a validator for the "name" field. It is called by the builders before save.
	helditems.NameValidator = helditemsDescName.Validators[0].(func(string) error)
	movesFields := schema.Moves{}.Fields()
	_ = movesFields
	// movesDescName is the schema descriptor for name field.
	movesDescName := movesFields[0].Descriptor()
	// moves.NameValidator is a validator for the "name" field. It is called by the builders before save.
	moves.NameValidator = movesDescName.Validators[0].(func(string) error)
	// movesDescPower is the schema descriptor for power field.
	movesDescPower := movesFields[3].Descriptor()
	// moves.PowerValidator is a validator for the "power" field. It is called by the builders before save.
	moves.PowerValidator = func() func(int) error {
		validators := movesDescPower.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(power int) error {
			for _, fn := range fns {
				if err := fn(power); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// movesDescAccuracy is the schema descriptor for accuracy field.
	movesDescAccuracy := movesFields[4].Descriptor()
	// moves.AccuracyValidator is a validator for the "accuracy" field. It is called by the builders before save.
	moves.AccuracyValidator = func() func(int) error {
		validators := movesDescAccuracy.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(accuracy int) error {
			for _, fn := range fns {
				if err := fn(accuracy); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// movesDescPp is the schema descriptor for pp field.
	movesDescPp := movesFields[5].Descriptor()
	// moves.PpValidator is a validator for the "pp" field. It is called by the builders before save.
	moves.PpValidator = func() func(int) error {
		validators := movesDescPp.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(pp int) error {
			for _, fn := range fns {
				if err := fn(pp); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// movesDescIsContact is the schema descriptor for is_contact field.
	movesDescIsContact := movesFields[6].Descriptor()
	// moves.DefaultIsContact holds the default value on creation for the is_contact field.
	moves.DefaultIsContact = movesDescIsContact.Default.(bool)
	// movesDescIsCanGuard is the schema descriptor for is_can_guard field.
	movesDescIsCanGuard := movesFields[7].Descriptor()
	// moves.DefaultIsCanGuard holds the default value on creation for the is_can_guard field.
	moves.DefaultIsCanGuard = movesDescIsCanGuard.Default.(bool)
	partyFields := schema.Party{}.Fields()
	_ = partyFields
	// partyDescUserID is the schema descriptor for user_id field.
	partyDescUserID := partyFields[0].Descriptor()
	// party.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	party.UserIDValidator = func() func(int) error {
		validators := partyDescUserID.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(user_id int) error {
			for _, fn := range fns {
				if err := fn(user_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	partyresultrecordFields := schema.PartyResultRecord{}.Fields()
	_ = partyresultrecordFields
	// partyresultrecordDescPartyID is the schema descriptor for party_id field.
	partyresultrecordDescPartyID := partyresultrecordFields[0].Descriptor()
	// partyresultrecord.PartyIDValidator is a validator for the "party_id" field. It is called by the builders before save.
	partyresultrecord.PartyIDValidator = partyresultrecordDescPartyID.Validators[0].(func(int) error)
	// partyresultrecordDescGeneration is the schema descriptor for generation field.
	partyresultrecordDescGeneration := partyresultrecordFields[1].Descriptor()
	// partyresultrecord.GenerationValidator is a validator for the "generation" field. It is called by the builders before save.
	partyresultrecord.GenerationValidator = partyresultrecordDescGeneration.Validators[0].(func(int) error)
	// partyresultrecordDescSeasen is the schema descriptor for seasen field.
	partyresultrecordDescSeasen := partyresultrecordFields[2].Descriptor()
	// partyresultrecord.SeasenValidator is a validator for the "seasen" field. It is called by the builders before save.
	partyresultrecord.SeasenValidator = partyresultrecordDescSeasen.Validators[0].(func(int) error)
	// partyresultrecordDescMaxRate is the schema descriptor for max_rate field.
	partyresultrecordDescMaxRate := partyresultrecordFields[3].Descriptor()
	// partyresultrecord.MaxRateValidator is a validator for the "max_rate" field. It is called by the builders before save.
	partyresultrecord.MaxRateValidator = partyresultrecordDescMaxRate.Validators[0].(func(int) error)
	// partyresultrecordDescMaxRanking is the schema descriptor for max_ranking field.
	partyresultrecordDescMaxRanking := partyresultrecordFields[4].Descriptor()
	// partyresultrecord.MaxRankingValidator is a validator for the "max_ranking" field. It is called by the builders before save.
	partyresultrecord.MaxRankingValidator = partyresultrecordDescMaxRanking.Validators[0].(func(int) error)
	pokemonsFields := schema.Pokemons{}.Fields()
	_ = pokemonsFields
	// pokemonsDescPokedexNo is the schema descriptor for pokedex_no field.
	pokemonsDescPokedexNo := pokemonsFields[0].Descriptor()
	// pokemons.PokedexNoValidator is a validator for the "pokedex_no" field. It is called by the builders before save.
	pokemons.PokedexNoValidator = func() func(int) error {
		validators := pokemonsDescPokedexNo.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(pokedex_no int) error {
			for _, fn := range fns {
				if err := fn(pokedex_no); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// pokemonsDescFormNo is the schema descriptor for form_no field.
	pokemonsDescFormNo := pokemonsFields[1].Descriptor()
	// pokemons.FormNoValidator is a validator for the "form_no" field. It is called by the builders before save.
	pokemons.FormNoValidator = func() func(int) error {
		validators := pokemonsDescFormNo.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(form int) error {
			for _, fn := range fns {
				if err := fn(form); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// pokemonsDescFormName is the schema descriptor for form_name field.
	pokemonsDescFormName := pokemonsFields[2].Descriptor()
	// pokemons.FormNameValidator is a validator for the "form_name" field. It is called by the builders before save.
	pokemons.FormNameValidator = pokemonsDescFormName.Validators[0].(func(string) error)
	// pokemonsDescName is the schema descriptor for name field.
	pokemonsDescName := pokemonsFields[3].Descriptor()
	// pokemons.NameValidator is a validator for the "name" field. It is called by the builders before save.
	pokemons.NameValidator = pokemonsDescName.Validators[0].(func(string) error)
	// pokemonsDescEnglishName is the schema descriptor for english_name field.
	pokemonsDescEnglishName := pokemonsFields[4].Descriptor()
	// pokemons.EnglishNameValidator is a validator for the "english_name" field. It is called by the builders before save.
	pokemons.EnglishNameValidator = pokemonsDescEnglishName.Validators[0].(func(string) error)
	// pokemonsDescAbilityId1 is the schema descriptor for ability_id1 field.
	pokemonsDescAbilityId1 := pokemonsFields[7].Descriptor()
	// pokemons.AbilityId1Validator is a validator for the "ability_id1" field. It is called by the builders before save.
	pokemons.AbilityId1Validator = pokemonsDescAbilityId1.Validators[0].(func(int) error)
	// pokemonsDescAbilityId2 is the schema descriptor for ability_id2 field.
	pokemonsDescAbilityId2 := pokemonsFields[8].Descriptor()
	// pokemons.AbilityId2Validator is a validator for the "ability_id2" field. It is called by the builders before save.
	pokemons.AbilityId2Validator = pokemonsDescAbilityId2.Validators[0].(func(int) error)
	// pokemonsDescHiddenAbilityID is the schema descriptor for hidden_ability_id field.
	pokemonsDescHiddenAbilityID := pokemonsFields[9].Descriptor()
	// pokemons.HiddenAbilityIDValidator is a validator for the "hidden_ability_id" field. It is called by the builders before save.
	pokemons.HiddenAbilityIDValidator = pokemonsDescHiddenAbilityID.Validators[0].(func(int) error)
	// pokemonsDescIsFinalEvolution is the schema descriptor for is_final_evolution field.
	pokemonsDescIsFinalEvolution := pokemonsFields[10].Descriptor()
	// pokemons.DefaultIsFinalEvolution holds the default value on creation for the is_final_evolution field.
	pokemons.DefaultIsFinalEvolution = pokemonsDescIsFinalEvolution.Default.(bool)
	// pokemonsDescBaseStatsH is the schema descriptor for base_stats_h field.
	pokemonsDescBaseStatsH := pokemonsFields[11].Descriptor()
	// pokemons.DefaultBaseStatsH holds the default value on creation for the base_stats_h field.
	pokemons.DefaultBaseStatsH = pokemonsDescBaseStatsH.Default.(int)
	// pokemons.BaseStatsHValidator is a validator for the "base_stats_h" field. It is called by the builders before save.
	pokemons.BaseStatsHValidator = pokemonsDescBaseStatsH.Validators[0].(func(int) error)
	// pokemonsDescBaseStatsA is the schema descriptor for base_stats_a field.
	pokemonsDescBaseStatsA := pokemonsFields[12].Descriptor()
	// pokemons.DefaultBaseStatsA holds the default value on creation for the base_stats_a field.
	pokemons.DefaultBaseStatsA = pokemonsDescBaseStatsA.Default.(int)
	// pokemons.BaseStatsAValidator is a validator for the "base_stats_a" field. It is called by the builders before save.
	pokemons.BaseStatsAValidator = pokemonsDescBaseStatsA.Validators[0].(func(int) error)
	// pokemonsDescBaseStatsB is the schema descriptor for base_stats_b field.
	pokemonsDescBaseStatsB := pokemonsFields[13].Descriptor()
	// pokemons.DefaultBaseStatsB holds the default value on creation for the base_stats_b field.
	pokemons.DefaultBaseStatsB = pokemonsDescBaseStatsB.Default.(int)
	// pokemons.BaseStatsBValidator is a validator for the "base_stats_b" field. It is called by the builders before save.
	pokemons.BaseStatsBValidator = pokemonsDescBaseStatsB.Validators[0].(func(int) error)
	// pokemonsDescBaseStatsC is the schema descriptor for base_stats_c field.
	pokemonsDescBaseStatsC := pokemonsFields[14].Descriptor()
	// pokemons.DefaultBaseStatsC holds the default value on creation for the base_stats_c field.
	pokemons.DefaultBaseStatsC = pokemonsDescBaseStatsC.Default.(int)
	// pokemons.BaseStatsCValidator is a validator for the "base_stats_c" field. It is called by the builders before save.
	pokemons.BaseStatsCValidator = pokemonsDescBaseStatsC.Validators[0].(func(int) error)
	// pokemonsDescBaseStatsD is the schema descriptor for base_stats_d field.
	pokemonsDescBaseStatsD := pokemonsFields[15].Descriptor()
	// pokemons.DefaultBaseStatsD holds the default value on creation for the base_stats_d field.
	pokemons.DefaultBaseStatsD = pokemonsDescBaseStatsD.Default.(int)
	// pokemons.BaseStatsDValidator is a validator for the "base_stats_d" field. It is called by the builders before save.
	pokemons.BaseStatsDValidator = pokemonsDescBaseStatsD.Validators[0].(func(int) error)
	// pokemonsDescBaseStatsS is the schema descriptor for base_stats_s field.
	pokemonsDescBaseStatsS := pokemonsFields[16].Descriptor()
	// pokemons.DefaultBaseStatsS holds the default value on creation for the base_stats_s field.
	pokemons.DefaultBaseStatsS = pokemonsDescBaseStatsS.Default.(int)
	// pokemons.BaseStatsSValidator is a validator for the "base_stats_s" field. It is called by the builders before save.
	pokemons.BaseStatsSValidator = pokemonsDescBaseStatsS.Validators[0].(func(int) error)
	tagsFields := schema.Tags{}.Fields()
	_ = tagsFields
	// tagsDescName is the schema descriptor for name field.
	tagsDescName := tagsFields[0].Descriptor()
	// tags.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tags.NameValidator = tagsDescName.Validators[0].(func(string) error)
	// tagsDescIsGenerationTag is the schema descriptor for is_generation_tag field.
	tagsDescIsGenerationTag := tagsFields[1].Descriptor()
	// tags.DefaultIsGenerationTag holds the default value on creation for the is_generation_tag field.
	tags.DefaultIsGenerationTag = tagsDescIsGenerationTag.Default.(bool)
	// tagsDescIsSeasonTag is the schema descriptor for is_season_tag field.
	tagsDescIsSeasonTag := tagsFields[2].Descriptor()
	// tags.DefaultIsSeasonTag holds the default value on creation for the is_season_tag field.
	tags.DefaultIsSeasonTag = tagsDescIsSeasonTag.Default.(bool)
	trainedpokemondetailsMixin := schema.TrainedPokemonDetails{}.Mixin()
	trainedpokemondetailsMixinFields0 := trainedpokemondetailsMixin[0].Fields()
	_ = trainedpokemondetailsMixinFields0
	trainedpokemondetailsFields := schema.TrainedPokemonDetails{}.Fields()
	_ = trainedpokemondetailsFields
	// trainedpokemondetailsDescCreateTime is the schema descriptor for create_time field.
	trainedpokemondetailsDescCreateTime := trainedpokemondetailsMixinFields0[0].Descriptor()
	// trainedpokemondetails.DefaultCreateTime holds the default value on creation for the create_time field.
	trainedpokemondetails.DefaultCreateTime = trainedpokemondetailsDescCreateTime.Default.(func() time.Time)
	// trainedpokemondetailsDescUpdateTime is the schema descriptor for update_time field.
	trainedpokemondetailsDescUpdateTime := trainedpokemondetailsMixinFields0[1].Descriptor()
	// trainedpokemondetails.DefaultUpdateTime holds the default value on creation for the update_time field.
	trainedpokemondetails.DefaultUpdateTime = trainedpokemondetailsDescUpdateTime.Default.(func() time.Time)
	// trainedpokemondetails.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	trainedpokemondetails.UpdateDefaultUpdateTime = trainedpokemondetailsDescUpdateTime.UpdateDefault.(func() time.Time)
	// trainedpokemondetailsDescAbilityID is the schema descriptor for ability_id field.
	trainedpokemondetailsDescAbilityID := trainedpokemondetailsFields[2].Descriptor()
	// trainedpokemondetails.AbilityIDValidator is a validator for the "ability_id" field. It is called by the builders before save.
	trainedpokemondetails.AbilityIDValidator = func() func(int) error {
		validators := trainedpokemondetailsDescAbilityID.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(use_ability int) error {
			for _, fn := range fns {
				if err := fn(use_ability); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// trainedpokemondetailsDescHeldItemID is the schema descriptor for held_item_id field.
	trainedpokemondetailsDescHeldItemID := trainedpokemondetailsFields[3].Descriptor()
	// trainedpokemondetails.HeldItemIDValidator is a validator for the "held_item_id" field. It is called by the builders before save.
	trainedpokemondetails.HeldItemIDValidator = func() func(int) error {
		validators := trainedpokemondetailsDescHeldItemID.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(use_held_item int) error {
			for _, fn := range fns {
				if err := fn(use_held_item); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// trainedpokemondetailsDescMoveId1 is the schema descriptor for move_id1 field.
	trainedpokemondetailsDescMoveId1 := trainedpokemondetailsFields[4].Descriptor()
	// trainedpokemondetails.MoveId1Validator is a validator for the "move_id1" field. It is called by the builders before save.
	trainedpokemondetails.MoveId1Validator = trainedpokemondetailsDescMoveId1.Validators[0].(func(int) error)
	// trainedpokemondetailsDescMoveId2 is the schema descriptor for move_id2 field.
	trainedpokemondetailsDescMoveId2 := trainedpokemondetailsFields[5].Descriptor()
	// trainedpokemondetails.MoveId2Validator is a validator for the "move_id2" field. It is called by the builders before save.
	trainedpokemondetails.MoveId2Validator = trainedpokemondetailsDescMoveId2.Validators[0].(func(int) error)
	// trainedpokemondetailsDescMoveId3 is the schema descriptor for move_id3 field.
	trainedpokemondetailsDescMoveId3 := trainedpokemondetailsFields[6].Descriptor()
	// trainedpokemondetails.MoveId3Validator is a validator for the "move_id3" field. It is called by the builders before save.
	trainedpokemondetails.MoveId3Validator = trainedpokemondetailsDescMoveId3.Validators[0].(func(int) error)
	// trainedpokemondetailsDescMoveId4 is the schema descriptor for move_id4 field.
	trainedpokemondetailsDescMoveId4 := trainedpokemondetailsFields[7].Descriptor()
	// trainedpokemondetails.MoveId4Validator is a validator for the "move_id4" field. It is called by the builders before save.
	trainedpokemondetails.MoveId4Validator = trainedpokemondetailsDescMoveId4.Validators[0].(func(int) error)
	// trainedpokemondetailsDescUserID is the schema descriptor for user_id field.
	trainedpokemondetailsDescUserID := trainedpokemondetailsFields[8].Descriptor()
	// trainedpokemondetails.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	trainedpokemondetails.UserIDValidator = func() func(int) error {
		validators := trainedpokemondetailsDescUserID.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(training_detail_user int) error {
			for _, fn := range fns {
				if err := fn(training_detail_user); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	trainedpokemonsMixin := schema.TrainedPokemons{}.Mixin()
	trainedpokemonsMixinFields0 := trainedpokemonsMixin[0].Fields()
	_ = trainedpokemonsMixinFields0
	trainedpokemonsFields := schema.TrainedPokemons{}.Fields()
	_ = trainedpokemonsFields
	// trainedpokemonsDescCreateTime is the schema descriptor for create_time field.
	trainedpokemonsDescCreateTime := trainedpokemonsMixinFields0[0].Descriptor()
	// trainedpokemons.DefaultCreateTime holds the default value on creation for the create_time field.
	trainedpokemons.DefaultCreateTime = trainedpokemonsDescCreateTime.Default.(func() time.Time)
	// trainedpokemonsDescUpdateTime is the schema descriptor for update_time field.
	trainedpokemonsDescUpdateTime := trainedpokemonsMixinFields0[1].Descriptor()
	// trainedpokemons.DefaultUpdateTime holds the default value on creation for the update_time field.
	trainedpokemons.DefaultUpdateTime = trainedpokemonsDescUpdateTime.Default.(func() time.Time)
	// trainedpokemons.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	trainedpokemons.UpdateDefaultUpdateTime = trainedpokemonsDescUpdateTime.UpdateDefault.(func() time.Time)
	// trainedpokemonsDescPokemonID is the schema descriptor for pokemon_id field.
	trainedpokemonsDescPokemonID := trainedpokemonsFields[0].Descriptor()
	// trainedpokemons.PokemonIDValidator is a validator for the "pokemon_id" field. It is called by the builders before save.
	trainedpokemons.PokemonIDValidator = func() func(int) error {
		validators := trainedpokemonsDescPokemonID.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(use_pokemon int) error {
			for _, fn := range fns {
				if err := fn(use_pokemon); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// trainedpokemonsDescCreateUserID is the schema descriptor for create_user_id field.
	trainedpokemonsDescCreateUserID := trainedpokemonsFields[1].Descriptor()
	// trainedpokemons.CreateUserIDValidator is a validator for the "create_user_id" field. It is called by the builders before save.
	trainedpokemons.CreateUserIDValidator = func() func(int) error {
		validators := trainedpokemonsDescCreateUserID.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(training_user int) error {
			for _, fn := range fns {
				if err := fn(training_user); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// trainedpokemonsDescNature is the schema descriptor for nature field.
	trainedpokemonsDescNature := trainedpokemonsFields[2].Descriptor()
	// trainedpokemons.NatureValidator is a validator for the "nature" field. It is called by the builders before save.
	trainedpokemons.NatureValidator = trainedpokemonsDescNature.Validators[0].(func(string) error)
	// trainedpokemonsDescEffortValueH is the schema descriptor for effort_value_h field.
	trainedpokemonsDescEffortValueH := trainedpokemonsFields[3].Descriptor()
	// trainedpokemons.DefaultEffortValueH holds the default value on creation for the effort_value_h field.
	trainedpokemons.DefaultEffortValueH = trainedpokemonsDescEffortValueH.Default.(int)
	// trainedpokemonsDescEffortValueA is the schema descriptor for effort_value_a field.
	trainedpokemonsDescEffortValueA := trainedpokemonsFields[4].Descriptor()
	// trainedpokemons.DefaultEffortValueA holds the default value on creation for the effort_value_a field.
	trainedpokemons.DefaultEffortValueA = trainedpokemonsDescEffortValueA.Default.(int)
	// trainedpokemonsDescEffortValueB is the schema descriptor for effort_value_b field.
	trainedpokemonsDescEffortValueB := trainedpokemonsFields[5].Descriptor()
	// trainedpokemons.DefaultEffortValueB holds the default value on creation for the effort_value_b field.
	trainedpokemons.DefaultEffortValueB = trainedpokemonsDescEffortValueB.Default.(int)
	// trainedpokemonsDescEffortValueC is the schema descriptor for effort_value_c field.
	trainedpokemonsDescEffortValueC := trainedpokemonsFields[6].Descriptor()
	// trainedpokemons.DefaultEffortValueC holds the default value on creation for the effort_value_c field.
	trainedpokemons.DefaultEffortValueC = trainedpokemonsDescEffortValueC.Default.(int)
	// trainedpokemonsDescEffortValueD is the schema descriptor for effort_value_d field.
	trainedpokemonsDescEffortValueD := trainedpokemonsFields[7].Descriptor()
	// trainedpokemons.DefaultEffortValueD holds the default value on creation for the effort_value_d field.
	trainedpokemons.DefaultEffortValueD = trainedpokemonsDescEffortValueD.Default.(int)
	// trainedpokemonsDescEffortValueS is the schema descriptor for effort_value_s field.
	trainedpokemonsDescEffortValueS := trainedpokemonsFields[8].Descriptor()
	// trainedpokemons.DefaultEffortValueS holds the default value on creation for the effort_value_s field.
	trainedpokemons.DefaultEffortValueS = trainedpokemonsDescEffortValueS.Default.(int)
	typecompatibilityFields := schema.TypeCompatibility{}.Fields()
	_ = typecompatibilityFields
	// typecompatibilityDescCompatibility is the schema descriptor for compatibility field.
	typecompatibilityDescCompatibility := typecompatibilityFields[2].Descriptor()
	// typecompatibility.DefaultCompatibility holds the default value on creation for the compatibility field.
	typecompatibility.DefaultCompatibility = typecompatibilityDescCompatibility.Default.(int)
	usersFields := schema.Users{}.Fields()
	_ = usersFields
	// usersDescName is the schema descriptor for name field.
	usersDescName := usersFields[0].Descriptor()
	// users.NameValidator is a validator for the "name" field. It is called by the builders before save.
	users.NameValidator = usersDescName.Validators[0].(func(string) error)
	// usersDescEmail is the schema descriptor for email field.
	usersDescEmail := usersFields[2].Descriptor()
	// users.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	users.EmailValidator = usersDescEmail.Validators[0].(func(string) error)
}
