// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/typecompatibility"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// TypeCompatibility is the model entity for the TypeCompatibility schema.
type TypeCompatibility struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AttackType holds the value of the "attack_type" field.
	AttackType property.Types `json:"attack_type,omitempty"`
	// DefenceType holds the value of the "defence_type" field.
	DefenceType property.Types `json:"defence_type,omitempty"`
	// Compatibility holds the value of the "compatibility" field.
	Compatibility int `json:"compatibility,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TypeCompatibility) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case typecompatibility.FieldID, typecompatibility.FieldCompatibility:
			values[i] = new(sql.NullInt64)
		case typecompatibility.FieldAttackType, typecompatibility.FieldDefenceType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TypeCompatibility", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TypeCompatibility fields.
func (tc *TypeCompatibility) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case typecompatibility.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case typecompatibility.FieldAttackType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attack_type", values[i])
			} else if value.Valid {
				tc.AttackType = property.Types(value.String)
			}
		case typecompatibility.FieldDefenceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field defence_type", values[i])
			} else if value.Valid {
				tc.DefenceType = property.Types(value.String)
			}
		case typecompatibility.FieldCompatibility:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field compatibility", values[i])
			} else if value.Valid {
				tc.Compatibility = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TypeCompatibility.
// Note that you need to call TypeCompatibility.Unwrap() before calling this method if this TypeCompatibility
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TypeCompatibility) Update() *TypeCompatibilityUpdateOne {
	return (&TypeCompatibilityClient{config: tc.config}).UpdateOne(tc)
}

// Unwrap unwraps the TypeCompatibility entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TypeCompatibility) Unwrap() *TypeCompatibility {
	tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TypeCompatibility is not a transactional entity")
	}
	tc.config.driver = tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TypeCompatibility) String() string {
	var builder strings.Builder
	builder.WriteString("TypeCompatibility(")
	builder.WriteString(fmt.Sprintf("id=%v", tc.ID))
	builder.WriteString(", attack_type=")
	builder.WriteString(fmt.Sprintf("%v", tc.AttackType))
	builder.WriteString(", defence_type=")
	builder.WriteString(fmt.Sprintf("%v", tc.DefenceType))
	builder.WriteString(", compatibility=")
	builder.WriteString(fmt.Sprintf("%v", tc.Compatibility))
	builder.WriteByte(')')
	return builder.String()
}

// TypeCompatibilities is a parsable slice of TypeCompatibility.
type TypeCompatibilities []*TypeCompatibility

func (tc TypeCompatibilities) config(cfg config) {
	for _i := range tc {
		tc[_i].config = cfg
	}
}
