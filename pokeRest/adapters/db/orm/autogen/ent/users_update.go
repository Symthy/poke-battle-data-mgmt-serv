// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// UsersUpdate is the builder for updating Users entities.
type UsersUpdate struct {
	config
	hooks    []Hook
	mutation *UsersMutation
}

// Where appends a list predicates to the UsersUpdate builder.
func (uu *UsersUpdate) Where(ps ...predicate.Users) *UsersUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UsersUpdate) SetName(s string) *UsersUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UsersUpdate) SetDisplayName(s string) *UsersUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableDisplayName(s *string) *UsersUpdate {
	if s != nil {
		uu.SetDisplayName(*s)
	}
	return uu
}

// ClearDisplayName clears the value of the "display_name" field.
func (uu *UsersUpdate) ClearDisplayName() *UsersUpdate {
	uu.mutation.ClearDisplayName()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UsersUpdate) SetEmail(s string) *UsersUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetRole sets the "role" field.
func (uu *UsersUpdate) SetRole(pr property.Role) *UsersUpdate {
	uu.mutation.SetRole(pr)
	return uu
}

// SetProfile sets the "profile" field.
func (uu *UsersUpdate) SetProfile(s string) *UsersUpdate {
	uu.mutation.SetProfile(s)
	return uu
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableProfile(s *string) *UsersUpdate {
	if s != nil {
		uu.SetProfile(*s)
	}
	return uu
}

// ClearProfile clears the value of the "profile" field.
func (uu *UsersUpdate) ClearProfile() *UsersUpdate {
	uu.mutation.ClearProfile()
	return uu
}

// AddUserTrainedPokemonIDs adds the "user_trained_pokemon" edge to the TrainedPokemons entity by IDs.
func (uu *UsersUpdate) AddUserTrainedPokemonIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddUserTrainedPokemonIDs(ids...)
	return uu
}

// AddUserTrainedPokemon adds the "user_trained_pokemon" edges to the TrainedPokemons entity.
func (uu *UsersUpdate) AddUserTrainedPokemon(t ...*TrainedPokemons) *UsersUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddUserTrainedPokemonIDs(ids...)
}

// AddUserTrainedPokemonDetailIDs adds the "user_trained_pokemon_detail" edge to the TrainedPokemonDetails entity by IDs.
func (uu *UsersUpdate) AddUserTrainedPokemonDetailIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddUserTrainedPokemonDetailIDs(ids...)
	return uu
}

// AddUserTrainedPokemonDetail adds the "user_trained_pokemon_detail" edges to the TrainedPokemonDetails entity.
func (uu *UsersUpdate) AddUserTrainedPokemonDetail(t ...*TrainedPokemonDetails) *UsersUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddUserTrainedPokemonDetailIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uu *UsersUpdate) Mutation() *UsersMutation {
	return uu.mutation
}

// ClearUserTrainedPokemon clears all "user_trained_pokemon" edges to the TrainedPokemons entity.
func (uu *UsersUpdate) ClearUserTrainedPokemon() *UsersUpdate {
	uu.mutation.ClearUserTrainedPokemon()
	return uu
}

// RemoveUserTrainedPokemonIDs removes the "user_trained_pokemon" edge to TrainedPokemons entities by IDs.
func (uu *UsersUpdate) RemoveUserTrainedPokemonIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveUserTrainedPokemonIDs(ids...)
	return uu
}

// RemoveUserTrainedPokemon removes "user_trained_pokemon" edges to TrainedPokemons entities.
func (uu *UsersUpdate) RemoveUserTrainedPokemon(t ...*TrainedPokemons) *UsersUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveUserTrainedPokemonIDs(ids...)
}

// ClearUserTrainedPokemonDetail clears all "user_trained_pokemon_detail" edges to the TrainedPokemonDetails entity.
func (uu *UsersUpdate) ClearUserTrainedPokemonDetail() *UsersUpdate {
	uu.mutation.ClearUserTrainedPokemonDetail()
	return uu
}

// RemoveUserTrainedPokemonDetailIDs removes the "user_trained_pokemon_detail" edge to TrainedPokemonDetails entities by IDs.
func (uu *UsersUpdate) RemoveUserTrainedPokemonDetailIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveUserTrainedPokemonDetailIDs(ids...)
	return uu
}

// RemoveUserTrainedPokemonDetail removes "user_trained_pokemon_detail" edges to TrainedPokemonDetails entities.
func (uu *UsersUpdate) RemoveUserTrainedPokemonDetail(t ...*TrainedPokemonDetails) *UsersUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveUserTrainedPokemonDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsersUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsersUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsersUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsersUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UsersUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := users.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := users.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	return nil
}

func (uu *UsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   users.Table,
			Columns: users.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: users.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldName,
		})
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldDisplayName,
		})
	}
	if uu.mutation.DisplayNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: users.FieldDisplayName,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldRole,
		})
	}
	if value, ok := uu.mutation.Profile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldProfile,
		})
	}
	if uu.mutation.ProfileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: users.FieldProfile,
		})
	}
	if uu.mutation.UserTrainedPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonTable,
			Columns: []string{users.UserTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserTrainedPokemonIDs(); len(nodes) > 0 && !uu.mutation.UserTrainedPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonTable,
			Columns: []string{users.UserTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserTrainedPokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonTable,
			Columns: []string{users.UserTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserTrainedPokemonDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonDetailTable,
			Columns: []string{users.UserTrainedPokemonDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserTrainedPokemonDetailIDs(); len(nodes) > 0 && !uu.mutation.UserTrainedPokemonDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonDetailTable,
			Columns: []string{users.UserTrainedPokemonDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserTrainedPokemonDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonDetailTable,
			Columns: []string{users.UserTrainedPokemonDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UsersUpdateOne is the builder for updating a single Users entity.
type UsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersMutation
}

// SetName sets the "name" field.
func (uuo *UsersUpdateOne) SetName(s string) *UsersUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetDisplayName sets the "display_name" field.
func (uuo *UsersUpdateOne) SetDisplayName(s string) *UsersUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableDisplayName(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetDisplayName(*s)
	}
	return uuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (uuo *UsersUpdateOne) ClearDisplayName() *UsersUpdateOne {
	uuo.mutation.ClearDisplayName()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UsersUpdateOne) SetEmail(s string) *UsersUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UsersUpdateOne) SetRole(pr property.Role) *UsersUpdateOne {
	uuo.mutation.SetRole(pr)
	return uuo
}

// SetProfile sets the "profile" field.
func (uuo *UsersUpdateOne) SetProfile(s string) *UsersUpdateOne {
	uuo.mutation.SetProfile(s)
	return uuo
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableProfile(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetProfile(*s)
	}
	return uuo
}

// ClearProfile clears the value of the "profile" field.
func (uuo *UsersUpdateOne) ClearProfile() *UsersUpdateOne {
	uuo.mutation.ClearProfile()
	return uuo
}

// AddUserTrainedPokemonIDs adds the "user_trained_pokemon" edge to the TrainedPokemons entity by IDs.
func (uuo *UsersUpdateOne) AddUserTrainedPokemonIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddUserTrainedPokemonIDs(ids...)
	return uuo
}

// AddUserTrainedPokemon adds the "user_trained_pokemon" edges to the TrainedPokemons entity.
func (uuo *UsersUpdateOne) AddUserTrainedPokemon(t ...*TrainedPokemons) *UsersUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddUserTrainedPokemonIDs(ids...)
}

// AddUserTrainedPokemonDetailIDs adds the "user_trained_pokemon_detail" edge to the TrainedPokemonDetails entity by IDs.
func (uuo *UsersUpdateOne) AddUserTrainedPokemonDetailIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddUserTrainedPokemonDetailIDs(ids...)
	return uuo
}

// AddUserTrainedPokemonDetail adds the "user_trained_pokemon_detail" edges to the TrainedPokemonDetails entity.
func (uuo *UsersUpdateOne) AddUserTrainedPokemonDetail(t ...*TrainedPokemonDetails) *UsersUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddUserTrainedPokemonDetailIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uuo *UsersUpdateOne) Mutation() *UsersMutation {
	return uuo.mutation
}

// ClearUserTrainedPokemon clears all "user_trained_pokemon" edges to the TrainedPokemons entity.
func (uuo *UsersUpdateOne) ClearUserTrainedPokemon() *UsersUpdateOne {
	uuo.mutation.ClearUserTrainedPokemon()
	return uuo
}

// RemoveUserTrainedPokemonIDs removes the "user_trained_pokemon" edge to TrainedPokemons entities by IDs.
func (uuo *UsersUpdateOne) RemoveUserTrainedPokemonIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveUserTrainedPokemonIDs(ids...)
	return uuo
}

// RemoveUserTrainedPokemon removes "user_trained_pokemon" edges to TrainedPokemons entities.
func (uuo *UsersUpdateOne) RemoveUserTrainedPokemon(t ...*TrainedPokemons) *UsersUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveUserTrainedPokemonIDs(ids...)
}

// ClearUserTrainedPokemonDetail clears all "user_trained_pokemon_detail" edges to the TrainedPokemonDetails entity.
func (uuo *UsersUpdateOne) ClearUserTrainedPokemonDetail() *UsersUpdateOne {
	uuo.mutation.ClearUserTrainedPokemonDetail()
	return uuo
}

// RemoveUserTrainedPokemonDetailIDs removes the "user_trained_pokemon_detail" edge to TrainedPokemonDetails entities by IDs.
func (uuo *UsersUpdateOne) RemoveUserTrainedPokemonDetailIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveUserTrainedPokemonDetailIDs(ids...)
	return uuo
}

// RemoveUserTrainedPokemonDetail removes "user_trained_pokemon_detail" edges to TrainedPokemonDetails entities.
func (uuo *UsersUpdateOne) RemoveUserTrainedPokemonDetail(t ...*TrainedPokemonDetails) *UsersUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveUserTrainedPokemonDetailIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsersUpdateOne) Select(field string, fields ...string) *UsersUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Users entity.
func (uuo *UsersUpdateOne) Save(ctx context.Context) (*Users, error) {
	var (
		err  error
		node *Users
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsersUpdateOne) SaveX(ctx context.Context) *Users {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsersUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsersUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UsersUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := users.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := users.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	return nil
}

func (uuo *UsersUpdateOne) sqlSave(ctx context.Context) (_node *Users, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   users.Table,
			Columns: users.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: users.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Users.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, users.FieldID)
		for _, f := range fields {
			if !users.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != users.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldName,
		})
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldDisplayName,
		})
	}
	if uuo.mutation.DisplayNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: users.FieldDisplayName,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldRole,
		})
	}
	if value, ok := uuo.mutation.Profile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldProfile,
		})
	}
	if uuo.mutation.ProfileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: users.FieldProfile,
		})
	}
	if uuo.mutation.UserTrainedPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonTable,
			Columns: []string{users.UserTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserTrainedPokemonIDs(); len(nodes) > 0 && !uuo.mutation.UserTrainedPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonTable,
			Columns: []string{users.UserTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserTrainedPokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonTable,
			Columns: []string{users.UserTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserTrainedPokemonDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonDetailTable,
			Columns: []string{users.UserTrainedPokemonDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserTrainedPokemonDetailIDs(); len(nodes) > 0 && !uuo.mutation.UserTrainedPokemonDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonDetailTable,
			Columns: []string{users.UserTrainedPokemonDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserTrainedPokemonDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.UserTrainedPokemonDetailTable,
			Columns: []string{users.UserTrainedPokemonDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Users{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
