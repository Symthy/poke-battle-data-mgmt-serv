// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/partyresultrecord"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
)

// PartyResultRecordUpdate is the builder for updating PartyResultRecord entities.
type PartyResultRecordUpdate struct {
	config
	hooks    []Hook
	mutation *PartyResultRecordMutation
}

// Where appends a list predicates to the PartyResultRecordUpdate builder.
func (prru *PartyResultRecordUpdate) Where(ps ...predicate.PartyResultRecord) *PartyResultRecordUpdate {
	prru.mutation.Where(ps...)
	return prru
}

// SetPartyID sets the "party_id" field.
func (prru *PartyResultRecordUpdate) SetPartyID(i int) *PartyResultRecordUpdate {
	prru.mutation.SetPartyID(i)
	return prru
}

// SetGeneration sets the "generation" field.
func (prru *PartyResultRecordUpdate) SetGeneration(i int) *PartyResultRecordUpdate {
	prru.mutation.ResetGeneration()
	prru.mutation.SetGeneration(i)
	return prru
}

// AddGeneration adds i to the "generation" field.
func (prru *PartyResultRecordUpdate) AddGeneration(i int) *PartyResultRecordUpdate {
	prru.mutation.AddGeneration(i)
	return prru
}

// SetSeasen sets the "seasen" field.
func (prru *PartyResultRecordUpdate) SetSeasen(i int) *PartyResultRecordUpdate {
	prru.mutation.ResetSeasen()
	prru.mutation.SetSeasen(i)
	return prru
}

// AddSeasen adds i to the "seasen" field.
func (prru *PartyResultRecordUpdate) AddSeasen(i int) *PartyResultRecordUpdate {
	prru.mutation.AddSeasen(i)
	return prru
}

// SetMaxRate sets the "max_rate" field.
func (prru *PartyResultRecordUpdate) SetMaxRate(i int) *PartyResultRecordUpdate {
	prru.mutation.ResetMaxRate()
	prru.mutation.SetMaxRate(i)
	return prru
}

// SetNillableMaxRate sets the "max_rate" field if the given value is not nil.
func (prru *PartyResultRecordUpdate) SetNillableMaxRate(i *int) *PartyResultRecordUpdate {
	if i != nil {
		prru.SetMaxRate(*i)
	}
	return prru
}

// AddMaxRate adds i to the "max_rate" field.
func (prru *PartyResultRecordUpdate) AddMaxRate(i int) *PartyResultRecordUpdate {
	prru.mutation.AddMaxRate(i)
	return prru
}

// ClearMaxRate clears the value of the "max_rate" field.
func (prru *PartyResultRecordUpdate) ClearMaxRate() *PartyResultRecordUpdate {
	prru.mutation.ClearMaxRate()
	return prru
}

// SetMaxRanking sets the "max_ranking" field.
func (prru *PartyResultRecordUpdate) SetMaxRanking(i int) *PartyResultRecordUpdate {
	prru.mutation.ResetMaxRanking()
	prru.mutation.SetMaxRanking(i)
	return prru
}

// SetNillableMaxRanking sets the "max_ranking" field if the given value is not nil.
func (prru *PartyResultRecordUpdate) SetNillableMaxRanking(i *int) *PartyResultRecordUpdate {
	if i != nil {
		prru.SetMaxRanking(*i)
	}
	return prru
}

// AddMaxRanking adds i to the "max_ranking" field.
func (prru *PartyResultRecordUpdate) AddMaxRanking(i int) *PartyResultRecordUpdate {
	prru.mutation.AddMaxRanking(i)
	return prru
}

// ClearMaxRanking clears the value of the "max_ranking" field.
func (prru *PartyResultRecordUpdate) ClearMaxRanking() *PartyResultRecordUpdate {
	prru.mutation.ClearMaxRanking()
	return prru
}

// SetResultToPartyID sets the "result_to_party" edge to the Party entity by ID.
func (prru *PartyResultRecordUpdate) SetResultToPartyID(id int) *PartyResultRecordUpdate {
	prru.mutation.SetResultToPartyID(id)
	return prru
}

// SetResultToParty sets the "result_to_party" edge to the Party entity.
func (prru *PartyResultRecordUpdate) SetResultToParty(p *Party) *PartyResultRecordUpdate {
	return prru.SetResultToPartyID(p.ID)
}

// Mutation returns the PartyResultRecordMutation object of the builder.
func (prru *PartyResultRecordUpdate) Mutation() *PartyResultRecordMutation {
	return prru.mutation
}

// ClearResultToParty clears the "result_to_party" edge to the Party entity.
func (prru *PartyResultRecordUpdate) ClearResultToParty() *PartyResultRecordUpdate {
	prru.mutation.ClearResultToParty()
	return prru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prru *PartyResultRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(prru.hooks) == 0 {
		if err = prru.check(); err != nil {
			return 0, err
		}
		affected, err = prru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyResultRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prru.check(); err != nil {
				return 0, err
			}
			prru.mutation = mutation
			affected, err = prru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(prru.hooks) - 1; i >= 0; i-- {
			if prru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (prru *PartyResultRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := prru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prru *PartyResultRecordUpdate) Exec(ctx context.Context) error {
	_, err := prru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prru *PartyResultRecordUpdate) ExecX(ctx context.Context) {
	if err := prru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prru *PartyResultRecordUpdate) check() error {
	if v, ok := prru.mutation.PartyID(); ok {
		if err := partyresultrecord.PartyIDValidator(v); err != nil {
			return &ValidationError{Name: "party_id", err: fmt.Errorf("ent: validator failed for field \"party_id\": %w", err)}
		}
	}
	if v, ok := prru.mutation.Generation(); ok {
		if err := partyresultrecord.GenerationValidator(v); err != nil {
			return &ValidationError{Name: "generation", err: fmt.Errorf("ent: validator failed for field \"generation\": %w", err)}
		}
	}
	if v, ok := prru.mutation.Seasen(); ok {
		if err := partyresultrecord.SeasenValidator(v); err != nil {
			return &ValidationError{Name: "seasen", err: fmt.Errorf("ent: validator failed for field \"seasen\": %w", err)}
		}
	}
	if v, ok := prru.mutation.MaxRate(); ok {
		if err := partyresultrecord.MaxRateValidator(v); err != nil {
			return &ValidationError{Name: "max_rate", err: fmt.Errorf("ent: validator failed for field \"max_rate\": %w", err)}
		}
	}
	if v, ok := prru.mutation.MaxRanking(); ok {
		if err := partyresultrecord.MaxRankingValidator(v); err != nil {
			return &ValidationError{Name: "max_ranking", err: fmt.Errorf("ent: validator failed for field \"max_ranking\": %w", err)}
		}
	}
	if _, ok := prru.mutation.ResultToPartyID(); prru.mutation.ResultToPartyCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"result_to_party\"")
	}
	return nil
}

func (prru *PartyResultRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partyresultrecord.Table,
			Columns: partyresultrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyresultrecord.FieldID,
			},
		},
	}
	if ps := prru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prru.mutation.Generation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldGeneration,
		})
	}
	if value, ok := prru.mutation.AddedGeneration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldGeneration,
		})
	}
	if value, ok := prru.mutation.Seasen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldSeasen,
		})
	}
	if value, ok := prru.mutation.AddedSeasen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldSeasen,
		})
	}
	if value, ok := prru.mutation.MaxRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRate,
		})
	}
	if value, ok := prru.mutation.AddedMaxRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRate,
		})
	}
	if prru.mutation.MaxRateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: partyresultrecord.FieldMaxRate,
		})
	}
	if value, ok := prru.mutation.MaxRanking(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRanking,
		})
	}
	if value, ok := prru.mutation.AddedMaxRanking(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRanking,
		})
	}
	if prru.mutation.MaxRankingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: partyresultrecord.FieldMaxRanking,
		})
	}
	if prru.mutation.ResultToPartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partyresultrecord.ResultToPartyTable,
			Columns: []string{partyresultrecord.ResultToPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prru.mutation.ResultToPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partyresultrecord.ResultToPartyTable,
			Columns: []string{partyresultrecord.ResultToPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, prru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partyresultrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PartyResultRecordUpdateOne is the builder for updating a single PartyResultRecord entity.
type PartyResultRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyResultRecordMutation
}

// SetPartyID sets the "party_id" field.
func (prruo *PartyResultRecordUpdateOne) SetPartyID(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.SetPartyID(i)
	return prruo
}

// SetGeneration sets the "generation" field.
func (prruo *PartyResultRecordUpdateOne) SetGeneration(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.ResetGeneration()
	prruo.mutation.SetGeneration(i)
	return prruo
}

// AddGeneration adds i to the "generation" field.
func (prruo *PartyResultRecordUpdateOne) AddGeneration(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.AddGeneration(i)
	return prruo
}

// SetSeasen sets the "seasen" field.
func (prruo *PartyResultRecordUpdateOne) SetSeasen(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.ResetSeasen()
	prruo.mutation.SetSeasen(i)
	return prruo
}

// AddSeasen adds i to the "seasen" field.
func (prruo *PartyResultRecordUpdateOne) AddSeasen(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.AddSeasen(i)
	return prruo
}

// SetMaxRate sets the "max_rate" field.
func (prruo *PartyResultRecordUpdateOne) SetMaxRate(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.ResetMaxRate()
	prruo.mutation.SetMaxRate(i)
	return prruo
}

// SetNillableMaxRate sets the "max_rate" field if the given value is not nil.
func (prruo *PartyResultRecordUpdateOne) SetNillableMaxRate(i *int) *PartyResultRecordUpdateOne {
	if i != nil {
		prruo.SetMaxRate(*i)
	}
	return prruo
}

// AddMaxRate adds i to the "max_rate" field.
func (prruo *PartyResultRecordUpdateOne) AddMaxRate(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.AddMaxRate(i)
	return prruo
}

// ClearMaxRate clears the value of the "max_rate" field.
func (prruo *PartyResultRecordUpdateOne) ClearMaxRate() *PartyResultRecordUpdateOne {
	prruo.mutation.ClearMaxRate()
	return prruo
}

// SetMaxRanking sets the "max_ranking" field.
func (prruo *PartyResultRecordUpdateOne) SetMaxRanking(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.ResetMaxRanking()
	prruo.mutation.SetMaxRanking(i)
	return prruo
}

// SetNillableMaxRanking sets the "max_ranking" field if the given value is not nil.
func (prruo *PartyResultRecordUpdateOne) SetNillableMaxRanking(i *int) *PartyResultRecordUpdateOne {
	if i != nil {
		prruo.SetMaxRanking(*i)
	}
	return prruo
}

// AddMaxRanking adds i to the "max_ranking" field.
func (prruo *PartyResultRecordUpdateOne) AddMaxRanking(i int) *PartyResultRecordUpdateOne {
	prruo.mutation.AddMaxRanking(i)
	return prruo
}

// ClearMaxRanking clears the value of the "max_ranking" field.
func (prruo *PartyResultRecordUpdateOne) ClearMaxRanking() *PartyResultRecordUpdateOne {
	prruo.mutation.ClearMaxRanking()
	return prruo
}

// SetResultToPartyID sets the "result_to_party" edge to the Party entity by ID.
func (prruo *PartyResultRecordUpdateOne) SetResultToPartyID(id int) *PartyResultRecordUpdateOne {
	prruo.mutation.SetResultToPartyID(id)
	return prruo
}

// SetResultToParty sets the "result_to_party" edge to the Party entity.
func (prruo *PartyResultRecordUpdateOne) SetResultToParty(p *Party) *PartyResultRecordUpdateOne {
	return prruo.SetResultToPartyID(p.ID)
}

// Mutation returns the PartyResultRecordMutation object of the builder.
func (prruo *PartyResultRecordUpdateOne) Mutation() *PartyResultRecordMutation {
	return prruo.mutation
}

// ClearResultToParty clears the "result_to_party" edge to the Party entity.
func (prruo *PartyResultRecordUpdateOne) ClearResultToParty() *PartyResultRecordUpdateOne {
	prruo.mutation.ClearResultToParty()
	return prruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prruo *PartyResultRecordUpdateOne) Select(field string, fields ...string) *PartyResultRecordUpdateOne {
	prruo.fields = append([]string{field}, fields...)
	return prruo
}

// Save executes the query and returns the updated PartyResultRecord entity.
func (prruo *PartyResultRecordUpdateOne) Save(ctx context.Context) (*PartyResultRecord, error) {
	var (
		err  error
		node *PartyResultRecord
	)
	if len(prruo.hooks) == 0 {
		if err = prruo.check(); err != nil {
			return nil, err
		}
		node, err = prruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyResultRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prruo.check(); err != nil {
				return nil, err
			}
			prruo.mutation = mutation
			node, err = prruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(prruo.hooks) - 1; i >= 0; i-- {
			if prruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (prruo *PartyResultRecordUpdateOne) SaveX(ctx context.Context) *PartyResultRecord {
	node, err := prruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prruo *PartyResultRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := prruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prruo *PartyResultRecordUpdateOne) ExecX(ctx context.Context) {
	if err := prruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prruo *PartyResultRecordUpdateOne) check() error {
	if v, ok := prruo.mutation.PartyID(); ok {
		if err := partyresultrecord.PartyIDValidator(v); err != nil {
			return &ValidationError{Name: "party_id", err: fmt.Errorf("ent: validator failed for field \"party_id\": %w", err)}
		}
	}
	if v, ok := prruo.mutation.Generation(); ok {
		if err := partyresultrecord.GenerationValidator(v); err != nil {
			return &ValidationError{Name: "generation", err: fmt.Errorf("ent: validator failed for field \"generation\": %w", err)}
		}
	}
	if v, ok := prruo.mutation.Seasen(); ok {
		if err := partyresultrecord.SeasenValidator(v); err != nil {
			return &ValidationError{Name: "seasen", err: fmt.Errorf("ent: validator failed for field \"seasen\": %w", err)}
		}
	}
	if v, ok := prruo.mutation.MaxRate(); ok {
		if err := partyresultrecord.MaxRateValidator(v); err != nil {
			return &ValidationError{Name: "max_rate", err: fmt.Errorf("ent: validator failed for field \"max_rate\": %w", err)}
		}
	}
	if v, ok := prruo.mutation.MaxRanking(); ok {
		if err := partyresultrecord.MaxRankingValidator(v); err != nil {
			return &ValidationError{Name: "max_ranking", err: fmt.Errorf("ent: validator failed for field \"max_ranking\": %w", err)}
		}
	}
	if _, ok := prruo.mutation.ResultToPartyID(); prruo.mutation.ResultToPartyCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"result_to_party\"")
	}
	return nil
}

func (prruo *PartyResultRecordUpdateOne) sqlSave(ctx context.Context) (_node *PartyResultRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partyresultrecord.Table,
			Columns: partyresultrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyresultrecord.FieldID,
			},
		},
	}
	id, ok := prruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PartyResultRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := prruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partyresultrecord.FieldID)
		for _, f := range fields {
			if !partyresultrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partyresultrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prruo.mutation.Generation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldGeneration,
		})
	}
	if value, ok := prruo.mutation.AddedGeneration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldGeneration,
		})
	}
	if value, ok := prruo.mutation.Seasen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldSeasen,
		})
	}
	if value, ok := prruo.mutation.AddedSeasen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldSeasen,
		})
	}
	if value, ok := prruo.mutation.MaxRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRate,
		})
	}
	if value, ok := prruo.mutation.AddedMaxRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRate,
		})
	}
	if prruo.mutation.MaxRateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: partyresultrecord.FieldMaxRate,
		})
	}
	if value, ok := prruo.mutation.MaxRanking(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRanking,
		})
	}
	if value, ok := prruo.mutation.AddedMaxRanking(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRanking,
		})
	}
	if prruo.mutation.MaxRankingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: partyresultrecord.FieldMaxRanking,
		})
	}
	if prruo.mutation.ResultToPartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partyresultrecord.ResultToPartyTable,
			Columns: []string{partyresultrecord.ResultToPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prruo.mutation.ResultToPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partyresultrecord.ResultToPartyTable,
			Columns: []string{partyresultrecord.ResultToPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartyResultRecord{config: prruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partyresultrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
