// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// AbilitiesUpdate is the builder for updating Abilities entities.
type AbilitiesUpdate struct {
	config
	hooks    []Hook
	mutation *AbilitiesMutation
}

// Where appends a list predicates to the AbilitiesUpdate builder.
func (au *AbilitiesUpdate) Where(ps ...predicate.Abilities) *AbilitiesUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetPhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field.
func (au *AbilitiesUpdate) SetPhysicalMovePowerCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetPhysicalMovePowerCorrectionValue()
	au.mutation.SetPhysicalMovePowerCorrectionValue(i)
	return au
}

// SetNillablePhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillablePhysicalMovePowerCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetPhysicalMovePowerCorrectionValue(*i)
	}
	return au
}

// AddPhysicalMovePowerCorrectionValue adds i to the "physical_move_power_correction_value" field.
func (au *AbilitiesUpdate) AddPhysicalMovePowerCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddPhysicalMovePowerCorrectionValue(i)
	return au
}

// SetSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field.
func (au *AbilitiesUpdate) SetSpecialMovePowerCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetSpecialMovePowerCorrectionValue()
	au.mutation.SetSpecialMovePowerCorrectionValue(i)
	return au
}

// SetNillableSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableSpecialMovePowerCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetSpecialMovePowerCorrectionValue(*i)
	}
	return au
}

// AddSpecialMovePowerCorrectionValue adds i to the "special_move_power_correction_value" field.
func (au *AbilitiesUpdate) AddSpecialMovePowerCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddSpecialMovePowerCorrectionValue(i)
	return au
}

// SetAttackPowerCorrectionValue sets the "attack_power_correction_value" field.
func (au *AbilitiesUpdate) SetAttackPowerCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetAttackPowerCorrectionValue()
	au.mutation.SetAttackPowerCorrectionValue(i)
	return au
}

// SetNillableAttackPowerCorrectionValue sets the "attack_power_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableAttackPowerCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetAttackPowerCorrectionValue(*i)
	}
	return au
}

// AddAttackPowerCorrectionValue adds i to the "attack_power_correction_value" field.
func (au *AbilitiesUpdate) AddAttackPowerCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddAttackPowerCorrectionValue(i)
	return au
}

// SetSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field.
func (au *AbilitiesUpdate) SetSpecialAttackPowerCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetSpecialAttackPowerCorrectionValue()
	au.mutation.SetSpecialAttackPowerCorrectionValue(i)
	return au
}

// SetNillableSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableSpecialAttackPowerCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetSpecialAttackPowerCorrectionValue(*i)
	}
	return au
}

// AddSpecialAttackPowerCorrectionValue adds i to the "special_attack_power_correction_value" field.
func (au *AbilitiesUpdate) AddSpecialAttackPowerCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddSpecialAttackPowerCorrectionValue(i)
	return au
}

// SetAttackCorrectionValue sets the "attack_correction_value" field.
func (au *AbilitiesUpdate) SetAttackCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetAttackCorrectionValue()
	au.mutation.SetAttackCorrectionValue(i)
	return au
}

// SetNillableAttackCorrectionValue sets the "attack_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableAttackCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetAttackCorrectionValue(*i)
	}
	return au
}

// AddAttackCorrectionValue adds i to the "attack_correction_value" field.
func (au *AbilitiesUpdate) AddAttackCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddAttackCorrectionValue(i)
	return au
}

// SetSpecialAttackCorrectionValue sets the "special_attack_correction_value" field.
func (au *AbilitiesUpdate) SetSpecialAttackCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetSpecialAttackCorrectionValue()
	au.mutation.SetSpecialAttackCorrectionValue(i)
	return au
}

// SetNillableSpecialAttackCorrectionValue sets the "special_attack_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableSpecialAttackCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetSpecialAttackCorrectionValue(*i)
	}
	return au
}

// AddSpecialAttackCorrectionValue adds i to the "special_attack_correction_value" field.
func (au *AbilitiesUpdate) AddSpecialAttackCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddSpecialAttackCorrectionValue(i)
	return au
}

// SetDeffenseCorrectionValue sets the "deffense_correction_value" field.
func (au *AbilitiesUpdate) SetDeffenseCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetDeffenseCorrectionValue()
	au.mutation.SetDeffenseCorrectionValue(i)
	return au
}

// SetNillableDeffenseCorrectionValue sets the "deffense_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableDeffenseCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetDeffenseCorrectionValue(*i)
	}
	return au
}

// AddDeffenseCorrectionValue adds i to the "deffense_correction_value" field.
func (au *AbilitiesUpdate) AddDeffenseCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddDeffenseCorrectionValue(i)
	return au
}

// SetSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field.
func (au *AbilitiesUpdate) SetSpecialDeffenseCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetSpecialDeffenseCorrectionValue()
	au.mutation.SetSpecialDeffenseCorrectionValue(i)
	return au
}

// SetNillableSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableSpecialDeffenseCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetSpecialDeffenseCorrectionValue(*i)
	}
	return au
}

// AddSpecialDeffenseCorrectionValue adds i to the "special_deffense_correction_value" field.
func (au *AbilitiesUpdate) AddSpecialDeffenseCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddSpecialDeffenseCorrectionValue(i)
	return au
}

// SetDamageCorrectionType1 sets the "damage_correction_type1" field.
func (au *AbilitiesUpdate) SetDamageCorrectionType1(pr property.Types) *AbilitiesUpdate {
	au.mutation.SetDamageCorrectionType1(pr)
	return au
}

// SetDamageCorrectionValue1 sets the "damage_correction_value1" field.
func (au *AbilitiesUpdate) SetDamageCorrectionValue1(i int) *AbilitiesUpdate {
	au.mutation.ResetDamageCorrectionValue1()
	au.mutation.SetDamageCorrectionValue1(i)
	return au
}

// SetNillableDamageCorrectionValue1 sets the "damage_correction_value1" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableDamageCorrectionValue1(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetDamageCorrectionValue1(*i)
	}
	return au
}

// AddDamageCorrectionValue1 adds i to the "damage_correction_value1" field.
func (au *AbilitiesUpdate) AddDamageCorrectionValue1(i int) *AbilitiesUpdate {
	au.mutation.AddDamageCorrectionValue1(i)
	return au
}

// SetDamageCorrectionType2 sets the "damage_correction_type2" field.
func (au *AbilitiesUpdate) SetDamageCorrectionType2(pr property.Types) *AbilitiesUpdate {
	au.mutation.SetDamageCorrectionType2(pr)
	return au
}

// SetNillableDamageCorrectionType2 sets the "damage_correction_type2" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableDamageCorrectionType2(pr *property.Types) *AbilitiesUpdate {
	if pr != nil {
		au.SetDamageCorrectionType2(*pr)
	}
	return au
}

// ClearDamageCorrectionType2 clears the value of the "damage_correction_type2" field.
func (au *AbilitiesUpdate) ClearDamageCorrectionType2() *AbilitiesUpdate {
	au.mutation.ClearDamageCorrectionType2()
	return au
}

// SetDamageCorrectionValue2 sets the "damage_correction_value2" field.
func (au *AbilitiesUpdate) SetDamageCorrectionValue2(i int) *AbilitiesUpdate {
	au.mutation.ResetDamageCorrectionValue2()
	au.mutation.SetDamageCorrectionValue2(i)
	return au
}

// SetNillableDamageCorrectionValue2 sets the "damage_correction_value2" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableDamageCorrectionValue2(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetDamageCorrectionValue2(*i)
	}
	return au
}

// AddDamageCorrectionValue2 adds i to the "damage_correction_value2" field.
func (au *AbilitiesUpdate) AddDamageCorrectionValue2(i int) *AbilitiesUpdate {
	au.mutation.AddDamageCorrectionValue2(i)
	return au
}

// ClearDamageCorrectionValue2 clears the value of the "damage_correction_value2" field.
func (au *AbilitiesUpdate) ClearDamageCorrectionValue2() *AbilitiesUpdate {
	au.mutation.ClearDamageCorrectionValue2()
	return au
}

// SetWeightCorrectionValue sets the "weight_correction_value" field.
func (au *AbilitiesUpdate) SetWeightCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.ResetWeightCorrectionValue()
	au.mutation.SetWeightCorrectionValue(i)
	return au
}

// SetNillableWeightCorrectionValue sets the "weight_correction_value" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableWeightCorrectionValue(i *int) *AbilitiesUpdate {
	if i != nil {
		au.SetWeightCorrectionValue(*i)
	}
	return au
}

// AddWeightCorrectionValue adds i to the "weight_correction_value" field.
func (au *AbilitiesUpdate) AddWeightCorrectionValue(i int) *AbilitiesUpdate {
	au.mutation.AddWeightCorrectionValue(i)
	return au
}

// SetName sets the "name" field.
func (au *AbilitiesUpdate) SetName(s string) *AbilitiesUpdate {
	au.mutation.SetName(s)
	return au
}

// SetDescription sets the "description" field.
func (au *AbilitiesUpdate) SetDescription(s string) *AbilitiesUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AbilitiesUpdate) SetNillableDescription(s *string) *AbilitiesUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AbilitiesUpdate) ClearDescription() *AbilitiesUpdate {
	au.mutation.ClearDescription()
	return au
}

// AddAbilityHolder1IDs adds the "ability_holder1" edge to the Pokemons entity by IDs.
func (au *AbilitiesUpdate) AddAbilityHolder1IDs(ids ...int) *AbilitiesUpdate {
	au.mutation.AddAbilityHolder1IDs(ids...)
	return au
}

// AddAbilityHolder1 adds the "ability_holder1" edges to the Pokemons entity.
func (au *AbilitiesUpdate) AddAbilityHolder1(p ...*Pokemons) *AbilitiesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddAbilityHolder1IDs(ids...)
}

// AddAbilityHolder2IDs adds the "ability_holder2" edge to the Pokemons entity by IDs.
func (au *AbilitiesUpdate) AddAbilityHolder2IDs(ids ...int) *AbilitiesUpdate {
	au.mutation.AddAbilityHolder2IDs(ids...)
	return au
}

// AddAbilityHolder2 adds the "ability_holder2" edges to the Pokemons entity.
func (au *AbilitiesUpdate) AddAbilityHolder2(p ...*Pokemons) *AbilitiesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddAbilityHolder2IDs(ids...)
}

// AddHiddenAbilityHolderIDs adds the "hidden_ability_holder" edge to the Pokemons entity by IDs.
func (au *AbilitiesUpdate) AddHiddenAbilityHolderIDs(ids ...int) *AbilitiesUpdate {
	au.mutation.AddHiddenAbilityHolderIDs(ids...)
	return au
}

// AddHiddenAbilityHolder adds the "hidden_ability_holder" edges to the Pokemons entity.
func (au *AbilitiesUpdate) AddHiddenAbilityHolder(p ...*Pokemons) *AbilitiesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddHiddenAbilityHolderIDs(ids...)
}

// AddToTrainedPokemonAbilityIDs adds the "to_trained_pokemon_ability" edge to the TrainedPokemonDetails entity by IDs.
func (au *AbilitiesUpdate) AddToTrainedPokemonAbilityIDs(ids ...int) *AbilitiesUpdate {
	au.mutation.AddToTrainedPokemonAbilityIDs(ids...)
	return au
}

// AddToTrainedPokemonAbility adds the "to_trained_pokemon_ability" edges to the TrainedPokemonDetails entity.
func (au *AbilitiesUpdate) AddToTrainedPokemonAbility(t ...*TrainedPokemonDetails) *AbilitiesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddToTrainedPokemonAbilityIDs(ids...)
}

// Mutation returns the AbilitiesMutation object of the builder.
func (au *AbilitiesUpdate) Mutation() *AbilitiesMutation {
	return au.mutation
}

// ClearAbilityHolder1 clears all "ability_holder1" edges to the Pokemons entity.
func (au *AbilitiesUpdate) ClearAbilityHolder1() *AbilitiesUpdate {
	au.mutation.ClearAbilityHolder1()
	return au
}

// RemoveAbilityHolder1IDs removes the "ability_holder1" edge to Pokemons entities by IDs.
func (au *AbilitiesUpdate) RemoveAbilityHolder1IDs(ids ...int) *AbilitiesUpdate {
	au.mutation.RemoveAbilityHolder1IDs(ids...)
	return au
}

// RemoveAbilityHolder1 removes "ability_holder1" edges to Pokemons entities.
func (au *AbilitiesUpdate) RemoveAbilityHolder1(p ...*Pokemons) *AbilitiesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveAbilityHolder1IDs(ids...)
}

// ClearAbilityHolder2 clears all "ability_holder2" edges to the Pokemons entity.
func (au *AbilitiesUpdate) ClearAbilityHolder2() *AbilitiesUpdate {
	au.mutation.ClearAbilityHolder2()
	return au
}

// RemoveAbilityHolder2IDs removes the "ability_holder2" edge to Pokemons entities by IDs.
func (au *AbilitiesUpdate) RemoveAbilityHolder2IDs(ids ...int) *AbilitiesUpdate {
	au.mutation.RemoveAbilityHolder2IDs(ids...)
	return au
}

// RemoveAbilityHolder2 removes "ability_holder2" edges to Pokemons entities.
func (au *AbilitiesUpdate) RemoveAbilityHolder2(p ...*Pokemons) *AbilitiesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveAbilityHolder2IDs(ids...)
}

// ClearHiddenAbilityHolder clears all "hidden_ability_holder" edges to the Pokemons entity.
func (au *AbilitiesUpdate) ClearHiddenAbilityHolder() *AbilitiesUpdate {
	au.mutation.ClearHiddenAbilityHolder()
	return au
}

// RemoveHiddenAbilityHolderIDs removes the "hidden_ability_holder" edge to Pokemons entities by IDs.
func (au *AbilitiesUpdate) RemoveHiddenAbilityHolderIDs(ids ...int) *AbilitiesUpdate {
	au.mutation.RemoveHiddenAbilityHolderIDs(ids...)
	return au
}

// RemoveHiddenAbilityHolder removes "hidden_ability_holder" edges to Pokemons entities.
func (au *AbilitiesUpdate) RemoveHiddenAbilityHolder(p ...*Pokemons) *AbilitiesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveHiddenAbilityHolderIDs(ids...)
}

// ClearToTrainedPokemonAbility clears all "to_trained_pokemon_ability" edges to the TrainedPokemonDetails entity.
func (au *AbilitiesUpdate) ClearToTrainedPokemonAbility() *AbilitiesUpdate {
	au.mutation.ClearToTrainedPokemonAbility()
	return au
}

// RemoveToTrainedPokemonAbilityIDs removes the "to_trained_pokemon_ability" edge to TrainedPokemonDetails entities by IDs.
func (au *AbilitiesUpdate) RemoveToTrainedPokemonAbilityIDs(ids ...int) *AbilitiesUpdate {
	au.mutation.RemoveToTrainedPokemonAbilityIDs(ids...)
	return au
}

// RemoveToTrainedPokemonAbility removes "to_trained_pokemon_ability" edges to TrainedPokemonDetails entities.
func (au *AbilitiesUpdate) RemoveToTrainedPokemonAbility(t ...*TrainedPokemonDetails) *AbilitiesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveToTrainedPokemonAbilityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AbilitiesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbilitiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AbilitiesUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AbilitiesUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AbilitiesUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AbilitiesUpdate) check() error {
	if v, ok := au.mutation.DamageCorrectionType1(); ok {
		if err := abilities.DamageCorrectionType1Validator(string(v)); err != nil {
			return &ValidationError{Name: "damage_correction_type1", err: fmt.Errorf("ent: validator failed for field \"damage_correction_type1\": %w", err)}
		}
	}
	if v, ok := au.mutation.Name(); ok {
		if err := abilities.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (au *AbilitiesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abilities.Table,
			Columns: abilities.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abilities.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.PhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldPhysicalMovePowerCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedPhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldPhysicalMovePowerCorrectionValue,
		})
	}
	if value, ok := au.mutation.SpecialMovePowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialMovePowerCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedSpecialMovePowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialMovePowerCorrectionValue,
		})
	}
	if value, ok := au.mutation.AttackPowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackPowerCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedAttackPowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackPowerCorrectionValue,
		})
	}
	if value, ok := au.mutation.SpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackPowerCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedSpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackPowerCorrectionValue,
		})
	}
	if value, ok := au.mutation.AttackCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedAttackCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackCorrectionValue,
		})
	}
	if value, ok := au.mutation.SpecialAttackCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedSpecialAttackCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackCorrectionValue,
		})
	}
	if value, ok := au.mutation.DeffenseCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDeffenseCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedDeffenseCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDeffenseCorrectionValue,
		})
	}
	if value, ok := au.mutation.SpecialDeffenseCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialDeffenseCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedSpecialDeffenseCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialDeffenseCorrectionValue,
		})
	}
	if value, ok := au.mutation.DamageCorrectionType1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDamageCorrectionType1,
		})
	}
	if value, ok := au.mutation.DamageCorrectionValue1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue1,
		})
	}
	if value, ok := au.mutation.AddedDamageCorrectionValue1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue1,
		})
	}
	if value, ok := au.mutation.DamageCorrectionType2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDamageCorrectionType2,
		})
	}
	if au.mutation.DamageCorrectionType2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: abilities.FieldDamageCorrectionType2,
		})
	}
	if value, ok := au.mutation.DamageCorrectionValue2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue2,
		})
	}
	if value, ok := au.mutation.AddedDamageCorrectionValue2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue2,
		})
	}
	if au.mutation.DamageCorrectionValue2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: abilities.FieldDamageCorrectionValue2,
		})
	}
	if value, ok := au.mutation.WeightCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldWeightCorrectionValue,
		})
	}
	if value, ok := au.mutation.AddedWeightCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldWeightCorrectionValue,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldName,
		})
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDescription,
		})
	}
	if au.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: abilities.FieldDescription,
		})
	}
	if au.mutation.AbilityHolder1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder1Table,
			Columns: []string{abilities.AbilityHolder1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAbilityHolder1IDs(); len(nodes) > 0 && !au.mutation.AbilityHolder1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder1Table,
			Columns: []string{abilities.AbilityHolder1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AbilityHolder1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder1Table,
			Columns: []string{abilities.AbilityHolder1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AbilityHolder2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder2Table,
			Columns: []string{abilities.AbilityHolder2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAbilityHolder2IDs(); len(nodes) > 0 && !au.mutation.AbilityHolder2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder2Table,
			Columns: []string{abilities.AbilityHolder2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AbilityHolder2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder2Table,
			Columns: []string{abilities.AbilityHolder2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.HiddenAbilityHolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.HiddenAbilityHolderTable,
			Columns: []string{abilities.HiddenAbilityHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedHiddenAbilityHolderIDs(); len(nodes) > 0 && !au.mutation.HiddenAbilityHolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.HiddenAbilityHolderTable,
			Columns: []string{abilities.HiddenAbilityHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.HiddenAbilityHolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.HiddenAbilityHolderTable,
			Columns: []string{abilities.HiddenAbilityHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ToTrainedPokemonAbilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.ToTrainedPokemonAbilityTable,
			Columns: []string{abilities.ToTrainedPokemonAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedToTrainedPokemonAbilityIDs(); len(nodes) > 0 && !au.mutation.ToTrainedPokemonAbilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.ToTrainedPokemonAbilityTable,
			Columns: []string{abilities.ToTrainedPokemonAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ToTrainedPokemonAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.ToTrainedPokemonAbilityTable,
			Columns: []string{abilities.ToTrainedPokemonAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abilities.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AbilitiesUpdateOne is the builder for updating a single Abilities entity.
type AbilitiesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbilitiesMutation
}

// SetPhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field.
func (auo *AbilitiesUpdateOne) SetPhysicalMovePowerCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetPhysicalMovePowerCorrectionValue()
	auo.mutation.SetPhysicalMovePowerCorrectionValue(i)
	return auo
}

// SetNillablePhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillablePhysicalMovePowerCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetPhysicalMovePowerCorrectionValue(*i)
	}
	return auo
}

// AddPhysicalMovePowerCorrectionValue adds i to the "physical_move_power_correction_value" field.
func (auo *AbilitiesUpdateOne) AddPhysicalMovePowerCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddPhysicalMovePowerCorrectionValue(i)
	return auo
}

// SetSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field.
func (auo *AbilitiesUpdateOne) SetSpecialMovePowerCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetSpecialMovePowerCorrectionValue()
	auo.mutation.SetSpecialMovePowerCorrectionValue(i)
	return auo
}

// SetNillableSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableSpecialMovePowerCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetSpecialMovePowerCorrectionValue(*i)
	}
	return auo
}

// AddSpecialMovePowerCorrectionValue adds i to the "special_move_power_correction_value" field.
func (auo *AbilitiesUpdateOne) AddSpecialMovePowerCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddSpecialMovePowerCorrectionValue(i)
	return auo
}

// SetAttackPowerCorrectionValue sets the "attack_power_correction_value" field.
func (auo *AbilitiesUpdateOne) SetAttackPowerCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetAttackPowerCorrectionValue()
	auo.mutation.SetAttackPowerCorrectionValue(i)
	return auo
}

// SetNillableAttackPowerCorrectionValue sets the "attack_power_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableAttackPowerCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetAttackPowerCorrectionValue(*i)
	}
	return auo
}

// AddAttackPowerCorrectionValue adds i to the "attack_power_correction_value" field.
func (auo *AbilitiesUpdateOne) AddAttackPowerCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddAttackPowerCorrectionValue(i)
	return auo
}

// SetSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field.
func (auo *AbilitiesUpdateOne) SetSpecialAttackPowerCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetSpecialAttackPowerCorrectionValue()
	auo.mutation.SetSpecialAttackPowerCorrectionValue(i)
	return auo
}

// SetNillableSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableSpecialAttackPowerCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetSpecialAttackPowerCorrectionValue(*i)
	}
	return auo
}

// AddSpecialAttackPowerCorrectionValue adds i to the "special_attack_power_correction_value" field.
func (auo *AbilitiesUpdateOne) AddSpecialAttackPowerCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddSpecialAttackPowerCorrectionValue(i)
	return auo
}

// SetAttackCorrectionValue sets the "attack_correction_value" field.
func (auo *AbilitiesUpdateOne) SetAttackCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetAttackCorrectionValue()
	auo.mutation.SetAttackCorrectionValue(i)
	return auo
}

// SetNillableAttackCorrectionValue sets the "attack_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableAttackCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetAttackCorrectionValue(*i)
	}
	return auo
}

// AddAttackCorrectionValue adds i to the "attack_correction_value" field.
func (auo *AbilitiesUpdateOne) AddAttackCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddAttackCorrectionValue(i)
	return auo
}

// SetSpecialAttackCorrectionValue sets the "special_attack_correction_value" field.
func (auo *AbilitiesUpdateOne) SetSpecialAttackCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetSpecialAttackCorrectionValue()
	auo.mutation.SetSpecialAttackCorrectionValue(i)
	return auo
}

// SetNillableSpecialAttackCorrectionValue sets the "special_attack_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableSpecialAttackCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetSpecialAttackCorrectionValue(*i)
	}
	return auo
}

// AddSpecialAttackCorrectionValue adds i to the "special_attack_correction_value" field.
func (auo *AbilitiesUpdateOne) AddSpecialAttackCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddSpecialAttackCorrectionValue(i)
	return auo
}

// SetDeffenseCorrectionValue sets the "deffense_correction_value" field.
func (auo *AbilitiesUpdateOne) SetDeffenseCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetDeffenseCorrectionValue()
	auo.mutation.SetDeffenseCorrectionValue(i)
	return auo
}

// SetNillableDeffenseCorrectionValue sets the "deffense_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableDeffenseCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetDeffenseCorrectionValue(*i)
	}
	return auo
}

// AddDeffenseCorrectionValue adds i to the "deffense_correction_value" field.
func (auo *AbilitiesUpdateOne) AddDeffenseCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddDeffenseCorrectionValue(i)
	return auo
}

// SetSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field.
func (auo *AbilitiesUpdateOne) SetSpecialDeffenseCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetSpecialDeffenseCorrectionValue()
	auo.mutation.SetSpecialDeffenseCorrectionValue(i)
	return auo
}

// SetNillableSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableSpecialDeffenseCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetSpecialDeffenseCorrectionValue(*i)
	}
	return auo
}

// AddSpecialDeffenseCorrectionValue adds i to the "special_deffense_correction_value" field.
func (auo *AbilitiesUpdateOne) AddSpecialDeffenseCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddSpecialDeffenseCorrectionValue(i)
	return auo
}

// SetDamageCorrectionType1 sets the "damage_correction_type1" field.
func (auo *AbilitiesUpdateOne) SetDamageCorrectionType1(pr property.Types) *AbilitiesUpdateOne {
	auo.mutation.SetDamageCorrectionType1(pr)
	return auo
}

// SetDamageCorrectionValue1 sets the "damage_correction_value1" field.
func (auo *AbilitiesUpdateOne) SetDamageCorrectionValue1(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetDamageCorrectionValue1()
	auo.mutation.SetDamageCorrectionValue1(i)
	return auo
}

// SetNillableDamageCorrectionValue1 sets the "damage_correction_value1" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableDamageCorrectionValue1(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetDamageCorrectionValue1(*i)
	}
	return auo
}

// AddDamageCorrectionValue1 adds i to the "damage_correction_value1" field.
func (auo *AbilitiesUpdateOne) AddDamageCorrectionValue1(i int) *AbilitiesUpdateOne {
	auo.mutation.AddDamageCorrectionValue1(i)
	return auo
}

// SetDamageCorrectionType2 sets the "damage_correction_type2" field.
func (auo *AbilitiesUpdateOne) SetDamageCorrectionType2(pr property.Types) *AbilitiesUpdateOne {
	auo.mutation.SetDamageCorrectionType2(pr)
	return auo
}

// SetNillableDamageCorrectionType2 sets the "damage_correction_type2" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableDamageCorrectionType2(pr *property.Types) *AbilitiesUpdateOne {
	if pr != nil {
		auo.SetDamageCorrectionType2(*pr)
	}
	return auo
}

// ClearDamageCorrectionType2 clears the value of the "damage_correction_type2" field.
func (auo *AbilitiesUpdateOne) ClearDamageCorrectionType2() *AbilitiesUpdateOne {
	auo.mutation.ClearDamageCorrectionType2()
	return auo
}

// SetDamageCorrectionValue2 sets the "damage_correction_value2" field.
func (auo *AbilitiesUpdateOne) SetDamageCorrectionValue2(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetDamageCorrectionValue2()
	auo.mutation.SetDamageCorrectionValue2(i)
	return auo
}

// SetNillableDamageCorrectionValue2 sets the "damage_correction_value2" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableDamageCorrectionValue2(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetDamageCorrectionValue2(*i)
	}
	return auo
}

// AddDamageCorrectionValue2 adds i to the "damage_correction_value2" field.
func (auo *AbilitiesUpdateOne) AddDamageCorrectionValue2(i int) *AbilitiesUpdateOne {
	auo.mutation.AddDamageCorrectionValue2(i)
	return auo
}

// ClearDamageCorrectionValue2 clears the value of the "damage_correction_value2" field.
func (auo *AbilitiesUpdateOne) ClearDamageCorrectionValue2() *AbilitiesUpdateOne {
	auo.mutation.ClearDamageCorrectionValue2()
	return auo
}

// SetWeightCorrectionValue sets the "weight_correction_value" field.
func (auo *AbilitiesUpdateOne) SetWeightCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.ResetWeightCorrectionValue()
	auo.mutation.SetWeightCorrectionValue(i)
	return auo
}

// SetNillableWeightCorrectionValue sets the "weight_correction_value" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableWeightCorrectionValue(i *int) *AbilitiesUpdateOne {
	if i != nil {
		auo.SetWeightCorrectionValue(*i)
	}
	return auo
}

// AddWeightCorrectionValue adds i to the "weight_correction_value" field.
func (auo *AbilitiesUpdateOne) AddWeightCorrectionValue(i int) *AbilitiesUpdateOne {
	auo.mutation.AddWeightCorrectionValue(i)
	return auo
}

// SetName sets the "name" field.
func (auo *AbilitiesUpdateOne) SetName(s string) *AbilitiesUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetDescription sets the "description" field.
func (auo *AbilitiesUpdateOne) SetDescription(s string) *AbilitiesUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AbilitiesUpdateOne) SetNillableDescription(s *string) *AbilitiesUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AbilitiesUpdateOne) ClearDescription() *AbilitiesUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// AddAbilityHolder1IDs adds the "ability_holder1" edge to the Pokemons entity by IDs.
func (auo *AbilitiesUpdateOne) AddAbilityHolder1IDs(ids ...int) *AbilitiesUpdateOne {
	auo.mutation.AddAbilityHolder1IDs(ids...)
	return auo
}

// AddAbilityHolder1 adds the "ability_holder1" edges to the Pokemons entity.
func (auo *AbilitiesUpdateOne) AddAbilityHolder1(p ...*Pokemons) *AbilitiesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddAbilityHolder1IDs(ids...)
}

// AddAbilityHolder2IDs adds the "ability_holder2" edge to the Pokemons entity by IDs.
func (auo *AbilitiesUpdateOne) AddAbilityHolder2IDs(ids ...int) *AbilitiesUpdateOne {
	auo.mutation.AddAbilityHolder2IDs(ids...)
	return auo
}

// AddAbilityHolder2 adds the "ability_holder2" edges to the Pokemons entity.
func (auo *AbilitiesUpdateOne) AddAbilityHolder2(p ...*Pokemons) *AbilitiesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddAbilityHolder2IDs(ids...)
}

// AddHiddenAbilityHolderIDs adds the "hidden_ability_holder" edge to the Pokemons entity by IDs.
func (auo *AbilitiesUpdateOne) AddHiddenAbilityHolderIDs(ids ...int) *AbilitiesUpdateOne {
	auo.mutation.AddHiddenAbilityHolderIDs(ids...)
	return auo
}

// AddHiddenAbilityHolder adds the "hidden_ability_holder" edges to the Pokemons entity.
func (auo *AbilitiesUpdateOne) AddHiddenAbilityHolder(p ...*Pokemons) *AbilitiesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddHiddenAbilityHolderIDs(ids...)
}

// AddToTrainedPokemonAbilityIDs adds the "to_trained_pokemon_ability" edge to the TrainedPokemonDetails entity by IDs.
func (auo *AbilitiesUpdateOne) AddToTrainedPokemonAbilityIDs(ids ...int) *AbilitiesUpdateOne {
	auo.mutation.AddToTrainedPokemonAbilityIDs(ids...)
	return auo
}

// AddToTrainedPokemonAbility adds the "to_trained_pokemon_ability" edges to the TrainedPokemonDetails entity.
func (auo *AbilitiesUpdateOne) AddToTrainedPokemonAbility(t ...*TrainedPokemonDetails) *AbilitiesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddToTrainedPokemonAbilityIDs(ids...)
}

// Mutation returns the AbilitiesMutation object of the builder.
func (auo *AbilitiesUpdateOne) Mutation() *AbilitiesMutation {
	return auo.mutation
}

// ClearAbilityHolder1 clears all "ability_holder1" edges to the Pokemons entity.
func (auo *AbilitiesUpdateOne) ClearAbilityHolder1() *AbilitiesUpdateOne {
	auo.mutation.ClearAbilityHolder1()
	return auo
}

// RemoveAbilityHolder1IDs removes the "ability_holder1" edge to Pokemons entities by IDs.
func (auo *AbilitiesUpdateOne) RemoveAbilityHolder1IDs(ids ...int) *AbilitiesUpdateOne {
	auo.mutation.RemoveAbilityHolder1IDs(ids...)
	return auo
}

// RemoveAbilityHolder1 removes "ability_holder1" edges to Pokemons entities.
func (auo *AbilitiesUpdateOne) RemoveAbilityHolder1(p ...*Pokemons) *AbilitiesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveAbilityHolder1IDs(ids...)
}

// ClearAbilityHolder2 clears all "ability_holder2" edges to the Pokemons entity.
func (auo *AbilitiesUpdateOne) ClearAbilityHolder2() *AbilitiesUpdateOne {
	auo.mutation.ClearAbilityHolder2()
	return auo
}

// RemoveAbilityHolder2IDs removes the "ability_holder2" edge to Pokemons entities by IDs.
func (auo *AbilitiesUpdateOne) RemoveAbilityHolder2IDs(ids ...int) *AbilitiesUpdateOne {
	auo.mutation.RemoveAbilityHolder2IDs(ids...)
	return auo
}

// RemoveAbilityHolder2 removes "ability_holder2" edges to Pokemons entities.
func (auo *AbilitiesUpdateOne) RemoveAbilityHolder2(p ...*Pokemons) *AbilitiesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveAbilityHolder2IDs(ids...)
}

// ClearHiddenAbilityHolder clears all "hidden_ability_holder" edges to the Pokemons entity.
func (auo *AbilitiesUpdateOne) ClearHiddenAbilityHolder() *AbilitiesUpdateOne {
	auo.mutation.ClearHiddenAbilityHolder()
	return auo
}

// RemoveHiddenAbilityHolderIDs removes the "hidden_ability_holder" edge to Pokemons entities by IDs.
func (auo *AbilitiesUpdateOne) RemoveHiddenAbilityHolderIDs(ids ...int) *AbilitiesUpdateOne {
	auo.mutation.RemoveHiddenAbilityHolderIDs(ids...)
	return auo
}

// RemoveHiddenAbilityHolder removes "hidden_ability_holder" edges to Pokemons entities.
func (auo *AbilitiesUpdateOne) RemoveHiddenAbilityHolder(p ...*Pokemons) *AbilitiesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveHiddenAbilityHolderIDs(ids...)
}

// ClearToTrainedPokemonAbility clears all "to_trained_pokemon_ability" edges to the TrainedPokemonDetails entity.
func (auo *AbilitiesUpdateOne) ClearToTrainedPokemonAbility() *AbilitiesUpdateOne {
	auo.mutation.ClearToTrainedPokemonAbility()
	return auo
}

// RemoveToTrainedPokemonAbilityIDs removes the "to_trained_pokemon_ability" edge to TrainedPokemonDetails entities by IDs.
func (auo *AbilitiesUpdateOne) RemoveToTrainedPokemonAbilityIDs(ids ...int) *AbilitiesUpdateOne {
	auo.mutation.RemoveToTrainedPokemonAbilityIDs(ids...)
	return auo
}

// RemoveToTrainedPokemonAbility removes "to_trained_pokemon_ability" edges to TrainedPokemonDetails entities.
func (auo *AbilitiesUpdateOne) RemoveToTrainedPokemonAbility(t ...*TrainedPokemonDetails) *AbilitiesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveToTrainedPokemonAbilityIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AbilitiesUpdateOne) Select(field string, fields ...string) *AbilitiesUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Abilities entity.
func (auo *AbilitiesUpdateOne) Save(ctx context.Context) (*Abilities, error) {
	var (
		err  error
		node *Abilities
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbilitiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AbilitiesUpdateOne) SaveX(ctx context.Context) *Abilities {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AbilitiesUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AbilitiesUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AbilitiesUpdateOne) check() error {
	if v, ok := auo.mutation.DamageCorrectionType1(); ok {
		if err := abilities.DamageCorrectionType1Validator(string(v)); err != nil {
			return &ValidationError{Name: "damage_correction_type1", err: fmt.Errorf("ent: validator failed for field \"damage_correction_type1\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Name(); ok {
		if err := abilities.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (auo *AbilitiesUpdateOne) sqlSave(ctx context.Context) (_node *Abilities, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abilities.Table,
			Columns: abilities.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abilities.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Abilities.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abilities.FieldID)
		for _, f := range fields {
			if !abilities.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abilities.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.PhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldPhysicalMovePowerCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedPhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldPhysicalMovePowerCorrectionValue,
		})
	}
	if value, ok := auo.mutation.SpecialMovePowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialMovePowerCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedSpecialMovePowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialMovePowerCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AttackPowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackPowerCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedAttackPowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackPowerCorrectionValue,
		})
	}
	if value, ok := auo.mutation.SpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackPowerCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedSpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackPowerCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AttackCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedAttackCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackCorrectionValue,
		})
	}
	if value, ok := auo.mutation.SpecialAttackCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedSpecialAttackCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackCorrectionValue,
		})
	}
	if value, ok := auo.mutation.DeffenseCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDeffenseCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedDeffenseCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDeffenseCorrectionValue,
		})
	}
	if value, ok := auo.mutation.SpecialDeffenseCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialDeffenseCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedSpecialDeffenseCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialDeffenseCorrectionValue,
		})
	}
	if value, ok := auo.mutation.DamageCorrectionType1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDamageCorrectionType1,
		})
	}
	if value, ok := auo.mutation.DamageCorrectionValue1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue1,
		})
	}
	if value, ok := auo.mutation.AddedDamageCorrectionValue1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue1,
		})
	}
	if value, ok := auo.mutation.DamageCorrectionType2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDamageCorrectionType2,
		})
	}
	if auo.mutation.DamageCorrectionType2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: abilities.FieldDamageCorrectionType2,
		})
	}
	if value, ok := auo.mutation.DamageCorrectionValue2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue2,
		})
	}
	if value, ok := auo.mutation.AddedDamageCorrectionValue2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue2,
		})
	}
	if auo.mutation.DamageCorrectionValue2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: abilities.FieldDamageCorrectionValue2,
		})
	}
	if value, ok := auo.mutation.WeightCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldWeightCorrectionValue,
		})
	}
	if value, ok := auo.mutation.AddedWeightCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldWeightCorrectionValue,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldName,
		})
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDescription,
		})
	}
	if auo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: abilities.FieldDescription,
		})
	}
	if auo.mutation.AbilityHolder1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder1Table,
			Columns: []string{abilities.AbilityHolder1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAbilityHolder1IDs(); len(nodes) > 0 && !auo.mutation.AbilityHolder1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder1Table,
			Columns: []string{abilities.AbilityHolder1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AbilityHolder1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder1Table,
			Columns: []string{abilities.AbilityHolder1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AbilityHolder2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder2Table,
			Columns: []string{abilities.AbilityHolder2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAbilityHolder2IDs(); len(nodes) > 0 && !auo.mutation.AbilityHolder2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder2Table,
			Columns: []string{abilities.AbilityHolder2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AbilityHolder2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder2Table,
			Columns: []string{abilities.AbilityHolder2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.HiddenAbilityHolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.HiddenAbilityHolderTable,
			Columns: []string{abilities.HiddenAbilityHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedHiddenAbilityHolderIDs(); len(nodes) > 0 && !auo.mutation.HiddenAbilityHolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.HiddenAbilityHolderTable,
			Columns: []string{abilities.HiddenAbilityHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.HiddenAbilityHolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.HiddenAbilityHolderTable,
			Columns: []string{abilities.HiddenAbilityHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ToTrainedPokemonAbilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.ToTrainedPokemonAbilityTable,
			Columns: []string{abilities.ToTrainedPokemonAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedToTrainedPokemonAbilityIDs(); len(nodes) > 0 && !auo.mutation.ToTrainedPokemonAbilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.ToTrainedPokemonAbilityTable,
			Columns: []string{abilities.ToTrainedPokemonAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ToTrainedPokemonAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.ToTrainedPokemonAbilityTable,
			Columns: []string{abilities.ToTrainedPokemonAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Abilities{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abilities.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
