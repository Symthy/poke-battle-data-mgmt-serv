// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battlerecords"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/partyresultrecord"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/tags"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// PartyUpdate is the builder for updating Party entities.
type PartyUpdate struct {
	config
	hooks    []Hook
	mutation *PartyMutation
}

// Where appends a list predicates to the PartyUpdate builder.
func (pu *PartyUpdate) Where(ps ...predicate.Party) *PartyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PartyUpdate) SetUserID(i int) *PartyUpdate {
	pu.mutation.ResetUserID()
	pu.mutation.SetUserID(i)
	return pu
}

// AddUserID adds i to the "user_id" field.
func (pu *PartyUpdate) AddUserID(i int) *PartyUpdate {
	pu.mutation.AddUserID(i)
	return pu
}

// SetName sets the "name" field.
func (pu *PartyUpdate) SetName(s string) *PartyUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableName(s *string) *PartyUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *PartyUpdate) ClearName() *PartyUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetBattleFormat sets the "battle_format" field.
func (pu *PartyUpdate) SetBattleFormat(pf property.BattleFormats) *PartyUpdate {
	pu.mutation.SetBattleFormat(pf)
	return pu
}

// SetNillableBattleFormat sets the "battle_format" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableBattleFormat(pf *property.BattleFormats) *PartyUpdate {
	if pf != nil {
		pu.SetBattleFormat(*pf)
	}
	return pu
}

// ClearBattleFormat clears the value of the "battle_format" field.
func (pu *PartyUpdate) ClearBattleFormat() *PartyUpdate {
	pu.mutation.ClearBattleFormat()
	return pu
}

// AddPartyBattleRecordIDs adds the "party_battle_record" edge to the BattleRecords entity by IDs.
func (pu *PartyUpdate) AddPartyBattleRecordIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddPartyBattleRecordIDs(ids...)
	return pu
}

// AddPartyBattleRecord adds the "party_battle_record" edges to the BattleRecords entity.
func (pu *PartyUpdate) AddPartyBattleRecord(b ...*BattleRecords) *PartyUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddPartyBattleRecordIDs(ids...)
}

// AddPartyToTagIDs adds the "party_to_tag" edge to the Tags entity by IDs.
func (pu *PartyUpdate) AddPartyToTagIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddPartyToTagIDs(ids...)
	return pu
}

// AddPartyToTag adds the "party_to_tag" edges to the Tags entity.
func (pu *PartyUpdate) AddPartyToTag(t ...*Tags) *PartyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddPartyToTagIDs(ids...)
}

// AddResultRecordIDs adds the "result_record" edge to the PartyResultRecord entity by IDs.
func (pu *PartyUpdate) AddResultRecordIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddResultRecordIDs(ids...)
	return pu
}

// AddResultRecord adds the "result_record" edges to the PartyResultRecord entity.
func (pu *PartyUpdate) AddResultRecord(p ...*PartyResultRecord) *PartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddResultRecordIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (pu *PartyUpdate) Mutation() *PartyMutation {
	return pu.mutation
}

// ClearPartyBattleRecord clears all "party_battle_record" edges to the BattleRecords entity.
func (pu *PartyUpdate) ClearPartyBattleRecord() *PartyUpdate {
	pu.mutation.ClearPartyBattleRecord()
	return pu
}

// RemovePartyBattleRecordIDs removes the "party_battle_record" edge to BattleRecords entities by IDs.
func (pu *PartyUpdate) RemovePartyBattleRecordIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemovePartyBattleRecordIDs(ids...)
	return pu
}

// RemovePartyBattleRecord removes "party_battle_record" edges to BattleRecords entities.
func (pu *PartyUpdate) RemovePartyBattleRecord(b ...*BattleRecords) *PartyUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemovePartyBattleRecordIDs(ids...)
}

// ClearPartyToTag clears all "party_to_tag" edges to the Tags entity.
func (pu *PartyUpdate) ClearPartyToTag() *PartyUpdate {
	pu.mutation.ClearPartyToTag()
	return pu
}

// RemovePartyToTagIDs removes the "party_to_tag" edge to Tags entities by IDs.
func (pu *PartyUpdate) RemovePartyToTagIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemovePartyToTagIDs(ids...)
	return pu
}

// RemovePartyToTag removes "party_to_tag" edges to Tags entities.
func (pu *PartyUpdate) RemovePartyToTag(t ...*Tags) *PartyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemovePartyToTagIDs(ids...)
}

// ClearResultRecord clears all "result_record" edges to the PartyResultRecord entity.
func (pu *PartyUpdate) ClearResultRecord() *PartyUpdate {
	pu.mutation.ClearResultRecord()
	return pu
}

// RemoveResultRecordIDs removes the "result_record" edge to PartyResultRecord entities by IDs.
func (pu *PartyUpdate) RemoveResultRecordIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemoveResultRecordIDs(ids...)
	return pu
}

// RemoveResultRecord removes "result_record" edges to PartyResultRecord entities.
func (pu *PartyUpdate) RemoveResultRecord(p ...*PartyResultRecord) *PartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveResultRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PartyUpdate) check() error {
	if v, ok := pu.mutation.UserID(); ok {
		if err := party.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf("ent: validator failed for field \"user_id\": %w", err)}
		}
	}
	return nil
}

func (pu *PartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   party.Table,
			Columns: party.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: party.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldUserID,
		})
	}
	if value, ok := pu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldUserID,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldName,
		})
	}
	if pu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: party.FieldName,
		})
	}
	if value, ok := pu.mutation.BattleFormat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldBattleFormat,
		})
	}
	if pu.mutation.BattleFormatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: party.FieldBattleFormat,
		})
	}
	if pu.mutation.PartyBattleRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.PartyBattleRecordTable,
			Columns: []string{party.PartyBattleRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battlerecords.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPartyBattleRecordIDs(); len(nodes) > 0 && !pu.mutation.PartyBattleRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.PartyBattleRecordTable,
			Columns: []string{party.PartyBattleRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battlerecords.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartyBattleRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.PartyBattleRecordTable,
			Columns: []string{party.PartyBattleRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battlerecords.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PartyToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   party.PartyToTagTable,
			Columns: party.PartyToTagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tags.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPartyToTagIDs(); len(nodes) > 0 && !pu.mutation.PartyToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   party.PartyToTagTable,
			Columns: party.PartyToTagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tags.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartyToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   party.PartyToTagTable,
			Columns: party.PartyToTagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tags.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ResultRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.ResultRecordTable,
			Columns: []string{party.ResultRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyresultrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedResultRecordIDs(); len(nodes) > 0 && !pu.mutation.ResultRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.ResultRecordTable,
			Columns: []string{party.ResultRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyresultrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ResultRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.ResultRecordTable,
			Columns: []string{party.ResultRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyresultrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{party.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PartyUpdateOne is the builder for updating a single Party entity.
type PartyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyMutation
}

// SetUserID sets the "user_id" field.
func (puo *PartyUpdateOne) SetUserID(i int) *PartyUpdateOne {
	puo.mutation.ResetUserID()
	puo.mutation.SetUserID(i)
	return puo
}

// AddUserID adds i to the "user_id" field.
func (puo *PartyUpdateOne) AddUserID(i int) *PartyUpdateOne {
	puo.mutation.AddUserID(i)
	return puo
}

// SetName sets the "name" field.
func (puo *PartyUpdateOne) SetName(s string) *PartyUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableName(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *PartyUpdateOne) ClearName() *PartyUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetBattleFormat sets the "battle_format" field.
func (puo *PartyUpdateOne) SetBattleFormat(pf property.BattleFormats) *PartyUpdateOne {
	puo.mutation.SetBattleFormat(pf)
	return puo
}

// SetNillableBattleFormat sets the "battle_format" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableBattleFormat(pf *property.BattleFormats) *PartyUpdateOne {
	if pf != nil {
		puo.SetBattleFormat(*pf)
	}
	return puo
}

// ClearBattleFormat clears the value of the "battle_format" field.
func (puo *PartyUpdateOne) ClearBattleFormat() *PartyUpdateOne {
	puo.mutation.ClearBattleFormat()
	return puo
}

// AddPartyBattleRecordIDs adds the "party_battle_record" edge to the BattleRecords entity by IDs.
func (puo *PartyUpdateOne) AddPartyBattleRecordIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddPartyBattleRecordIDs(ids...)
	return puo
}

// AddPartyBattleRecord adds the "party_battle_record" edges to the BattleRecords entity.
func (puo *PartyUpdateOne) AddPartyBattleRecord(b ...*BattleRecords) *PartyUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddPartyBattleRecordIDs(ids...)
}

// AddPartyToTagIDs adds the "party_to_tag" edge to the Tags entity by IDs.
func (puo *PartyUpdateOne) AddPartyToTagIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddPartyToTagIDs(ids...)
	return puo
}

// AddPartyToTag adds the "party_to_tag" edges to the Tags entity.
func (puo *PartyUpdateOne) AddPartyToTag(t ...*Tags) *PartyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddPartyToTagIDs(ids...)
}

// AddResultRecordIDs adds the "result_record" edge to the PartyResultRecord entity by IDs.
func (puo *PartyUpdateOne) AddResultRecordIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddResultRecordIDs(ids...)
	return puo
}

// AddResultRecord adds the "result_record" edges to the PartyResultRecord entity.
func (puo *PartyUpdateOne) AddResultRecord(p ...*PartyResultRecord) *PartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddResultRecordIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (puo *PartyUpdateOne) Mutation() *PartyMutation {
	return puo.mutation
}

// ClearPartyBattleRecord clears all "party_battle_record" edges to the BattleRecords entity.
func (puo *PartyUpdateOne) ClearPartyBattleRecord() *PartyUpdateOne {
	puo.mutation.ClearPartyBattleRecord()
	return puo
}

// RemovePartyBattleRecordIDs removes the "party_battle_record" edge to BattleRecords entities by IDs.
func (puo *PartyUpdateOne) RemovePartyBattleRecordIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemovePartyBattleRecordIDs(ids...)
	return puo
}

// RemovePartyBattleRecord removes "party_battle_record" edges to BattleRecords entities.
func (puo *PartyUpdateOne) RemovePartyBattleRecord(b ...*BattleRecords) *PartyUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemovePartyBattleRecordIDs(ids...)
}

// ClearPartyToTag clears all "party_to_tag" edges to the Tags entity.
func (puo *PartyUpdateOne) ClearPartyToTag() *PartyUpdateOne {
	puo.mutation.ClearPartyToTag()
	return puo
}

// RemovePartyToTagIDs removes the "party_to_tag" edge to Tags entities by IDs.
func (puo *PartyUpdateOne) RemovePartyToTagIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemovePartyToTagIDs(ids...)
	return puo
}

// RemovePartyToTag removes "party_to_tag" edges to Tags entities.
func (puo *PartyUpdateOne) RemovePartyToTag(t ...*Tags) *PartyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemovePartyToTagIDs(ids...)
}

// ClearResultRecord clears all "result_record" edges to the PartyResultRecord entity.
func (puo *PartyUpdateOne) ClearResultRecord() *PartyUpdateOne {
	puo.mutation.ClearResultRecord()
	return puo
}

// RemoveResultRecordIDs removes the "result_record" edge to PartyResultRecord entities by IDs.
func (puo *PartyUpdateOne) RemoveResultRecordIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemoveResultRecordIDs(ids...)
	return puo
}

// RemoveResultRecord removes "result_record" edges to PartyResultRecord entities.
func (puo *PartyUpdateOne) RemoveResultRecord(p ...*PartyResultRecord) *PartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveResultRecordIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartyUpdateOne) Select(field string, fields ...string) *PartyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Party entity.
func (puo *PartyUpdateOne) Save(ctx context.Context) (*Party, error) {
	var (
		err  error
		node *Party
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartyUpdateOne) SaveX(ctx context.Context) *Party {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PartyUpdateOne) check() error {
	if v, ok := puo.mutation.UserID(); ok {
		if err := party.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf("ent: validator failed for field \"user_id\": %w", err)}
		}
	}
	return nil
}

func (puo *PartyUpdateOne) sqlSave(ctx context.Context) (_node *Party, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   party.Table,
			Columns: party.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: party.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Party.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, party.FieldID)
		for _, f := range fields {
			if !party.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != party.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldUserID,
		})
	}
	if value, ok := puo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldUserID,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldName,
		})
	}
	if puo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: party.FieldName,
		})
	}
	if value, ok := puo.mutation.BattleFormat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldBattleFormat,
		})
	}
	if puo.mutation.BattleFormatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: party.FieldBattleFormat,
		})
	}
	if puo.mutation.PartyBattleRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.PartyBattleRecordTable,
			Columns: []string{party.PartyBattleRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battlerecords.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPartyBattleRecordIDs(); len(nodes) > 0 && !puo.mutation.PartyBattleRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.PartyBattleRecordTable,
			Columns: []string{party.PartyBattleRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battlerecords.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartyBattleRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.PartyBattleRecordTable,
			Columns: []string{party.PartyBattleRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battlerecords.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PartyToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   party.PartyToTagTable,
			Columns: party.PartyToTagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tags.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPartyToTagIDs(); len(nodes) > 0 && !puo.mutation.PartyToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   party.PartyToTagTable,
			Columns: party.PartyToTagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tags.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartyToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   party.PartyToTagTable,
			Columns: party.PartyToTagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tags.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ResultRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.ResultRecordTable,
			Columns: []string{party.ResultRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyresultrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedResultRecordIDs(); len(nodes) > 0 && !puo.mutation.ResultRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.ResultRecordTable,
			Columns: []string{party.ResultRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyresultrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ResultRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.ResultRecordTable,
			Columns: []string{party.ResultRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyresultrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Party{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{party.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
