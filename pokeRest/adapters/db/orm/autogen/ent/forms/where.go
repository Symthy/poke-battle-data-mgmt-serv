// Code generated by entc, DO NOT EDIT.

package forms

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FormName applies equality check predicate on the "form_name" field. It's identical to FormNameEQ.
func FormName(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormName), v))
	})
}

// IsRegionalVariant applies equality check predicate on the "is_regional_variant" field. It's identical to IsRegionalVariantEQ.
func IsRegionalVariant(v bool) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRegionalVariant), v))
	})
}

// RegionName applies equality check predicate on the "regionName" field. It's identical to RegionNameEQ.
func RegionName(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegionName), v))
	})
}

// FormNameEQ applies the EQ predicate on the "form_name" field.
func FormNameEQ(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormName), v))
	})
}

// FormNameNEQ applies the NEQ predicate on the "form_name" field.
func FormNameNEQ(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFormName), v))
	})
}

// FormNameIn applies the In predicate on the "form_name" field.
func FormNameIn(vs ...string) predicate.Forms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFormName), v...))
	})
}

// FormNameNotIn applies the NotIn predicate on the "form_name" field.
func FormNameNotIn(vs ...string) predicate.Forms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFormName), v...))
	})
}

// FormNameGT applies the GT predicate on the "form_name" field.
func FormNameGT(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFormName), v))
	})
}

// FormNameGTE applies the GTE predicate on the "form_name" field.
func FormNameGTE(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFormName), v))
	})
}

// FormNameLT applies the LT predicate on the "form_name" field.
func FormNameLT(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFormName), v))
	})
}

// FormNameLTE applies the LTE predicate on the "form_name" field.
func FormNameLTE(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFormName), v))
	})
}

// FormNameContains applies the Contains predicate on the "form_name" field.
func FormNameContains(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFormName), v))
	})
}

// FormNameHasPrefix applies the HasPrefix predicate on the "form_name" field.
func FormNameHasPrefix(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFormName), v))
	})
}

// FormNameHasSuffix applies the HasSuffix predicate on the "form_name" field.
func FormNameHasSuffix(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFormName), v))
	})
}

// FormNameEqualFold applies the EqualFold predicate on the "form_name" field.
func FormNameEqualFold(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFormName), v))
	})
}

// FormNameContainsFold applies the ContainsFold predicate on the "form_name" field.
func FormNameContainsFold(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFormName), v))
	})
}

// IsRegionalVariantEQ applies the EQ predicate on the "is_regional_variant" field.
func IsRegionalVariantEQ(v bool) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRegionalVariant), v))
	})
}

// IsRegionalVariantNEQ applies the NEQ predicate on the "is_regional_variant" field.
func IsRegionalVariantNEQ(v bool) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsRegionalVariant), v))
	})
}

// RegionNameEQ applies the EQ predicate on the "regionName" field.
func RegionNameEQ(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegionName), v))
	})
}

// RegionNameNEQ applies the NEQ predicate on the "regionName" field.
func RegionNameNEQ(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegionName), v))
	})
}

// RegionNameIn applies the In predicate on the "regionName" field.
func RegionNameIn(vs ...string) predicate.Forms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegionName), v...))
	})
}

// RegionNameNotIn applies the NotIn predicate on the "regionName" field.
func RegionNameNotIn(vs ...string) predicate.Forms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Forms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegionName), v...))
	})
}

// RegionNameGT applies the GT predicate on the "regionName" field.
func RegionNameGT(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegionName), v))
	})
}

// RegionNameGTE applies the GTE predicate on the "regionName" field.
func RegionNameGTE(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegionName), v))
	})
}

// RegionNameLT applies the LT predicate on the "regionName" field.
func RegionNameLT(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegionName), v))
	})
}

// RegionNameLTE applies the LTE predicate on the "regionName" field.
func RegionNameLTE(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegionName), v))
	})
}

// RegionNameContains applies the Contains predicate on the "regionName" field.
func RegionNameContains(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegionName), v))
	})
}

// RegionNameHasPrefix applies the HasPrefix predicate on the "regionName" field.
func RegionNameHasPrefix(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegionName), v))
	})
}

// RegionNameHasSuffix applies the HasSuffix predicate on the "regionName" field.
func RegionNameHasSuffix(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegionName), v))
	})
}

// RegionNameEqualFold applies the EqualFold predicate on the "regionName" field.
func RegionNameEqualFold(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegionName), v))
	})
}

// RegionNameContainsFold applies the ContainsFold predicate on the "regionName" field.
func RegionNameContainsFold(v string) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegionName), v))
	})
}

// HasFormHolder applies the HasEdge predicate on the "form_holder" edge.
func HasFormHolder() predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FormHolderTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FormHolderTable, FormHolderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormHolderWith applies the HasEdge predicate on the "form_holder" edge with a given conditions (other predicates).
func HasFormHolderWith(preds ...predicate.Pokemons) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FormHolderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FormHolderTable, FormHolderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Forms) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Forms) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Forms) predicate.Forms {
	return predicate.Forms(func(s *sql.Selector) {
		p(s.Not())
	})
}
