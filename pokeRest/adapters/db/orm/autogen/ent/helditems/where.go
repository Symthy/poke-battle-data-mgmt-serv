// Code generated by entc, DO NOT EDIT.

package helditems

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PhysicalMovePowerCorrectionValue applies equality check predicate on the "physical_move_power_correction_value" field. It's identical to PhysicalMovePowerCorrectionValueEQ.
func PhysicalMovePowerCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhysicalMovePowerCorrectionValue), v))
	})
}

// SpecialMovePowerCorrectionValue applies equality check predicate on the "special_move_power_correction_value" field. It's identical to SpecialMovePowerCorrectionValueEQ.
func SpecialMovePowerCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialMovePowerCorrectionValue), v))
	})
}

// AttackPowerCorrectionValue applies equality check predicate on the "attack_power_correction_value" field. It's identical to AttackPowerCorrectionValueEQ.
func AttackPowerCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttackPowerCorrectionValue), v))
	})
}

// SpecialAttackPowerCorrectionValue applies equality check predicate on the "special_attack_power_correction_value" field. It's identical to SpecialAttackPowerCorrectionValueEQ.
func SpecialAttackPowerCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialAttackPowerCorrectionValue), v))
	})
}

// AttackCorrectionValue applies equality check predicate on the "attack_correction_value" field. It's identical to AttackCorrectionValueEQ.
func AttackCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttackCorrectionValue), v))
	})
}

// SpecialAttackCorrectionValue applies equality check predicate on the "special_attack_correction_value" field. It's identical to SpecialAttackCorrectionValueEQ.
func SpecialAttackCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialAttackCorrectionValue), v))
	})
}

// DeffenseCorrectionValue applies equality check predicate on the "deffense_correction_value" field. It's identical to DeffenseCorrectionValueEQ.
func DeffenseCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeffenseCorrectionValue), v))
	})
}

// SpecialDeffenseCorrectionValue applies equality check predicate on the "special_deffense_correction_value" field. It's identical to SpecialDeffenseCorrectionValueEQ.
func SpecialDeffenseCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialDeffenseCorrectionValue), v))
	})
}

// DamageCorrectionType1 applies equality check predicate on the "damage_correction_type1" field. It's identical to DamageCorrectionType1EQ.
func DamageCorrectionType1(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionValue1 applies equality check predicate on the "damage_correction_value1" field. It's identical to DamageCorrectionValue1EQ.
func DamageCorrectionValue1(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDamageCorrectionValue1), v))
	})
}

// DamageCorrectionType2 applies equality check predicate on the "damage_correction_type2" field. It's identical to DamageCorrectionType2EQ.
func DamageCorrectionType2(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionValue2 applies equality check predicate on the "damage_correction_value2" field. It's identical to DamageCorrectionValue2EQ.
func DamageCorrectionValue2(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDamageCorrectionValue2), v))
	})
}

// WeightCorrectionValue applies equality check predicate on the "weight_correction_value" field. It's identical to WeightCorrectionValueEQ.
func WeightCorrectionValue(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeightCorrectionValue), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// PhysicalMovePowerCorrectionValueEQ applies the EQ predicate on the "physical_move_power_correction_value" field.
func PhysicalMovePowerCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhysicalMovePowerCorrectionValue), v))
	})
}

// PhysicalMovePowerCorrectionValueNEQ applies the NEQ predicate on the "physical_move_power_correction_value" field.
func PhysicalMovePowerCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhysicalMovePowerCorrectionValue), v))
	})
}

// PhysicalMovePowerCorrectionValueIn applies the In predicate on the "physical_move_power_correction_value" field.
func PhysicalMovePowerCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhysicalMovePowerCorrectionValue), v...))
	})
}

// PhysicalMovePowerCorrectionValueNotIn applies the NotIn predicate on the "physical_move_power_correction_value" field.
func PhysicalMovePowerCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhysicalMovePowerCorrectionValue), v...))
	})
}

// PhysicalMovePowerCorrectionValueGT applies the GT predicate on the "physical_move_power_correction_value" field.
func PhysicalMovePowerCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhysicalMovePowerCorrectionValue), v))
	})
}

// PhysicalMovePowerCorrectionValueGTE applies the GTE predicate on the "physical_move_power_correction_value" field.
func PhysicalMovePowerCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhysicalMovePowerCorrectionValue), v))
	})
}

// PhysicalMovePowerCorrectionValueLT applies the LT predicate on the "physical_move_power_correction_value" field.
func PhysicalMovePowerCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhysicalMovePowerCorrectionValue), v))
	})
}

// PhysicalMovePowerCorrectionValueLTE applies the LTE predicate on the "physical_move_power_correction_value" field.
func PhysicalMovePowerCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhysicalMovePowerCorrectionValue), v))
	})
}

// SpecialMovePowerCorrectionValueEQ applies the EQ predicate on the "special_move_power_correction_value" field.
func SpecialMovePowerCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialMovePowerCorrectionValue), v))
	})
}

// SpecialMovePowerCorrectionValueNEQ applies the NEQ predicate on the "special_move_power_correction_value" field.
func SpecialMovePowerCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecialMovePowerCorrectionValue), v))
	})
}

// SpecialMovePowerCorrectionValueIn applies the In predicate on the "special_move_power_correction_value" field.
func SpecialMovePowerCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpecialMovePowerCorrectionValue), v...))
	})
}

// SpecialMovePowerCorrectionValueNotIn applies the NotIn predicate on the "special_move_power_correction_value" field.
func SpecialMovePowerCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpecialMovePowerCorrectionValue), v...))
	})
}

// SpecialMovePowerCorrectionValueGT applies the GT predicate on the "special_move_power_correction_value" field.
func SpecialMovePowerCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecialMovePowerCorrectionValue), v))
	})
}

// SpecialMovePowerCorrectionValueGTE applies the GTE predicate on the "special_move_power_correction_value" field.
func SpecialMovePowerCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecialMovePowerCorrectionValue), v))
	})
}

// SpecialMovePowerCorrectionValueLT applies the LT predicate on the "special_move_power_correction_value" field.
func SpecialMovePowerCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecialMovePowerCorrectionValue), v))
	})
}

// SpecialMovePowerCorrectionValueLTE applies the LTE predicate on the "special_move_power_correction_value" field.
func SpecialMovePowerCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecialMovePowerCorrectionValue), v))
	})
}

// AttackPowerCorrectionValueEQ applies the EQ predicate on the "attack_power_correction_value" field.
func AttackPowerCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttackPowerCorrectionValue), v))
	})
}

// AttackPowerCorrectionValueNEQ applies the NEQ predicate on the "attack_power_correction_value" field.
func AttackPowerCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttackPowerCorrectionValue), v))
	})
}

// AttackPowerCorrectionValueIn applies the In predicate on the "attack_power_correction_value" field.
func AttackPowerCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttackPowerCorrectionValue), v...))
	})
}

// AttackPowerCorrectionValueNotIn applies the NotIn predicate on the "attack_power_correction_value" field.
func AttackPowerCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttackPowerCorrectionValue), v...))
	})
}

// AttackPowerCorrectionValueGT applies the GT predicate on the "attack_power_correction_value" field.
func AttackPowerCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttackPowerCorrectionValue), v))
	})
}

// AttackPowerCorrectionValueGTE applies the GTE predicate on the "attack_power_correction_value" field.
func AttackPowerCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttackPowerCorrectionValue), v))
	})
}

// AttackPowerCorrectionValueLT applies the LT predicate on the "attack_power_correction_value" field.
func AttackPowerCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttackPowerCorrectionValue), v))
	})
}

// AttackPowerCorrectionValueLTE applies the LTE predicate on the "attack_power_correction_value" field.
func AttackPowerCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttackPowerCorrectionValue), v))
	})
}

// SpecialAttackPowerCorrectionValueEQ applies the EQ predicate on the "special_attack_power_correction_value" field.
func SpecialAttackPowerCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialAttackPowerCorrectionValue), v))
	})
}

// SpecialAttackPowerCorrectionValueNEQ applies the NEQ predicate on the "special_attack_power_correction_value" field.
func SpecialAttackPowerCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecialAttackPowerCorrectionValue), v))
	})
}

// SpecialAttackPowerCorrectionValueIn applies the In predicate on the "special_attack_power_correction_value" field.
func SpecialAttackPowerCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpecialAttackPowerCorrectionValue), v...))
	})
}

// SpecialAttackPowerCorrectionValueNotIn applies the NotIn predicate on the "special_attack_power_correction_value" field.
func SpecialAttackPowerCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpecialAttackPowerCorrectionValue), v...))
	})
}

// SpecialAttackPowerCorrectionValueGT applies the GT predicate on the "special_attack_power_correction_value" field.
func SpecialAttackPowerCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecialAttackPowerCorrectionValue), v))
	})
}

// SpecialAttackPowerCorrectionValueGTE applies the GTE predicate on the "special_attack_power_correction_value" field.
func SpecialAttackPowerCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecialAttackPowerCorrectionValue), v))
	})
}

// SpecialAttackPowerCorrectionValueLT applies the LT predicate on the "special_attack_power_correction_value" field.
func SpecialAttackPowerCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecialAttackPowerCorrectionValue), v))
	})
}

// SpecialAttackPowerCorrectionValueLTE applies the LTE predicate on the "special_attack_power_correction_value" field.
func SpecialAttackPowerCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecialAttackPowerCorrectionValue), v))
	})
}

// AttackCorrectionValueEQ applies the EQ predicate on the "attack_correction_value" field.
func AttackCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttackCorrectionValue), v))
	})
}

// AttackCorrectionValueNEQ applies the NEQ predicate on the "attack_correction_value" field.
func AttackCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttackCorrectionValue), v))
	})
}

// AttackCorrectionValueIn applies the In predicate on the "attack_correction_value" field.
func AttackCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttackCorrectionValue), v...))
	})
}

// AttackCorrectionValueNotIn applies the NotIn predicate on the "attack_correction_value" field.
func AttackCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttackCorrectionValue), v...))
	})
}

// AttackCorrectionValueGT applies the GT predicate on the "attack_correction_value" field.
func AttackCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttackCorrectionValue), v))
	})
}

// AttackCorrectionValueGTE applies the GTE predicate on the "attack_correction_value" field.
func AttackCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttackCorrectionValue), v))
	})
}

// AttackCorrectionValueLT applies the LT predicate on the "attack_correction_value" field.
func AttackCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttackCorrectionValue), v))
	})
}

// AttackCorrectionValueLTE applies the LTE predicate on the "attack_correction_value" field.
func AttackCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttackCorrectionValue), v))
	})
}

// SpecialAttackCorrectionValueEQ applies the EQ predicate on the "special_attack_correction_value" field.
func SpecialAttackCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialAttackCorrectionValue), v))
	})
}

// SpecialAttackCorrectionValueNEQ applies the NEQ predicate on the "special_attack_correction_value" field.
func SpecialAttackCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecialAttackCorrectionValue), v))
	})
}

// SpecialAttackCorrectionValueIn applies the In predicate on the "special_attack_correction_value" field.
func SpecialAttackCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpecialAttackCorrectionValue), v...))
	})
}

// SpecialAttackCorrectionValueNotIn applies the NotIn predicate on the "special_attack_correction_value" field.
func SpecialAttackCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpecialAttackCorrectionValue), v...))
	})
}

// SpecialAttackCorrectionValueGT applies the GT predicate on the "special_attack_correction_value" field.
func SpecialAttackCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecialAttackCorrectionValue), v))
	})
}

// SpecialAttackCorrectionValueGTE applies the GTE predicate on the "special_attack_correction_value" field.
func SpecialAttackCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecialAttackCorrectionValue), v))
	})
}

// SpecialAttackCorrectionValueLT applies the LT predicate on the "special_attack_correction_value" field.
func SpecialAttackCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecialAttackCorrectionValue), v))
	})
}

// SpecialAttackCorrectionValueLTE applies the LTE predicate on the "special_attack_correction_value" field.
func SpecialAttackCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecialAttackCorrectionValue), v))
	})
}

// DeffenseCorrectionValueEQ applies the EQ predicate on the "deffense_correction_value" field.
func DeffenseCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeffenseCorrectionValue), v))
	})
}

// DeffenseCorrectionValueNEQ applies the NEQ predicate on the "deffense_correction_value" field.
func DeffenseCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeffenseCorrectionValue), v))
	})
}

// DeffenseCorrectionValueIn applies the In predicate on the "deffense_correction_value" field.
func DeffenseCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeffenseCorrectionValue), v...))
	})
}

// DeffenseCorrectionValueNotIn applies the NotIn predicate on the "deffense_correction_value" field.
func DeffenseCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeffenseCorrectionValue), v...))
	})
}

// DeffenseCorrectionValueGT applies the GT predicate on the "deffense_correction_value" field.
func DeffenseCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeffenseCorrectionValue), v))
	})
}

// DeffenseCorrectionValueGTE applies the GTE predicate on the "deffense_correction_value" field.
func DeffenseCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeffenseCorrectionValue), v))
	})
}

// DeffenseCorrectionValueLT applies the LT predicate on the "deffense_correction_value" field.
func DeffenseCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeffenseCorrectionValue), v))
	})
}

// DeffenseCorrectionValueLTE applies the LTE predicate on the "deffense_correction_value" field.
func DeffenseCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeffenseCorrectionValue), v))
	})
}

// SpecialDeffenseCorrectionValueEQ applies the EQ predicate on the "special_deffense_correction_value" field.
func SpecialDeffenseCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialDeffenseCorrectionValue), v))
	})
}

// SpecialDeffenseCorrectionValueNEQ applies the NEQ predicate on the "special_deffense_correction_value" field.
func SpecialDeffenseCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecialDeffenseCorrectionValue), v))
	})
}

// SpecialDeffenseCorrectionValueIn applies the In predicate on the "special_deffense_correction_value" field.
func SpecialDeffenseCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpecialDeffenseCorrectionValue), v...))
	})
}

// SpecialDeffenseCorrectionValueNotIn applies the NotIn predicate on the "special_deffense_correction_value" field.
func SpecialDeffenseCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpecialDeffenseCorrectionValue), v...))
	})
}

// SpecialDeffenseCorrectionValueGT applies the GT predicate on the "special_deffense_correction_value" field.
func SpecialDeffenseCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecialDeffenseCorrectionValue), v))
	})
}

// SpecialDeffenseCorrectionValueGTE applies the GTE predicate on the "special_deffense_correction_value" field.
func SpecialDeffenseCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecialDeffenseCorrectionValue), v))
	})
}

// SpecialDeffenseCorrectionValueLT applies the LT predicate on the "special_deffense_correction_value" field.
func SpecialDeffenseCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecialDeffenseCorrectionValue), v))
	})
}

// SpecialDeffenseCorrectionValueLTE applies the LTE predicate on the "special_deffense_correction_value" field.
func SpecialDeffenseCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecialDeffenseCorrectionValue), v))
	})
}

// DamageCorrectionType1EQ applies the EQ predicate on the "damage_correction_type1" field.
func DamageCorrectionType1EQ(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1NEQ applies the NEQ predicate on the "damage_correction_type1" field.
func DamageCorrectionType1NEQ(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1In applies the In predicate on the "damage_correction_type1" field.
func DamageCorrectionType1In(vs ...property.Types) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDamageCorrectionType1), v...))
	})
}

// DamageCorrectionType1NotIn applies the NotIn predicate on the "damage_correction_type1" field.
func DamageCorrectionType1NotIn(vs ...property.Types) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDamageCorrectionType1), v...))
	})
}

// DamageCorrectionType1GT applies the GT predicate on the "damage_correction_type1" field.
func DamageCorrectionType1GT(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1GTE applies the GTE predicate on the "damage_correction_type1" field.
func DamageCorrectionType1GTE(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1LT applies the LT predicate on the "damage_correction_type1" field.
func DamageCorrectionType1LT(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1LTE applies the LTE predicate on the "damage_correction_type1" field.
func DamageCorrectionType1LTE(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1Contains applies the Contains predicate on the "damage_correction_type1" field.
func DamageCorrectionType1Contains(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1HasPrefix applies the HasPrefix predicate on the "damage_correction_type1" field.
func DamageCorrectionType1HasPrefix(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1HasSuffix applies the HasSuffix predicate on the "damage_correction_type1" field.
func DamageCorrectionType1HasSuffix(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1EqualFold applies the EqualFold predicate on the "damage_correction_type1" field.
func DamageCorrectionType1EqualFold(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionType1ContainsFold applies the ContainsFold predicate on the "damage_correction_type1" field.
func DamageCorrectionType1ContainsFold(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDamageCorrectionType1), vc))
	})
}

// DamageCorrectionValue1EQ applies the EQ predicate on the "damage_correction_value1" field.
func DamageCorrectionValue1EQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDamageCorrectionValue1), v))
	})
}

// DamageCorrectionValue1NEQ applies the NEQ predicate on the "damage_correction_value1" field.
func DamageCorrectionValue1NEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDamageCorrectionValue1), v))
	})
}

// DamageCorrectionValue1In applies the In predicate on the "damage_correction_value1" field.
func DamageCorrectionValue1In(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDamageCorrectionValue1), v...))
	})
}

// DamageCorrectionValue1NotIn applies the NotIn predicate on the "damage_correction_value1" field.
func DamageCorrectionValue1NotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDamageCorrectionValue1), v...))
	})
}

// DamageCorrectionValue1GT applies the GT predicate on the "damage_correction_value1" field.
func DamageCorrectionValue1GT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDamageCorrectionValue1), v))
	})
}

// DamageCorrectionValue1GTE applies the GTE predicate on the "damage_correction_value1" field.
func DamageCorrectionValue1GTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDamageCorrectionValue1), v))
	})
}

// DamageCorrectionValue1LT applies the LT predicate on the "damage_correction_value1" field.
func DamageCorrectionValue1LT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDamageCorrectionValue1), v))
	})
}

// DamageCorrectionValue1LTE applies the LTE predicate on the "damage_correction_value1" field.
func DamageCorrectionValue1LTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDamageCorrectionValue1), v))
	})
}

// DamageCorrectionType2EQ applies the EQ predicate on the "damage_correction_type2" field.
func DamageCorrectionType2EQ(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2NEQ applies the NEQ predicate on the "damage_correction_type2" field.
func DamageCorrectionType2NEQ(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2In applies the In predicate on the "damage_correction_type2" field.
func DamageCorrectionType2In(vs ...property.Types) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDamageCorrectionType2), v...))
	})
}

// DamageCorrectionType2NotIn applies the NotIn predicate on the "damage_correction_type2" field.
func DamageCorrectionType2NotIn(vs ...property.Types) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDamageCorrectionType2), v...))
	})
}

// DamageCorrectionType2GT applies the GT predicate on the "damage_correction_type2" field.
func DamageCorrectionType2GT(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2GTE applies the GTE predicate on the "damage_correction_type2" field.
func DamageCorrectionType2GTE(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2LT applies the LT predicate on the "damage_correction_type2" field.
func DamageCorrectionType2LT(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2LTE applies the LTE predicate on the "damage_correction_type2" field.
func DamageCorrectionType2LTE(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2Contains applies the Contains predicate on the "damage_correction_type2" field.
func DamageCorrectionType2Contains(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2HasPrefix applies the HasPrefix predicate on the "damage_correction_type2" field.
func DamageCorrectionType2HasPrefix(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2HasSuffix applies the HasSuffix predicate on the "damage_correction_type2" field.
func DamageCorrectionType2HasSuffix(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2IsNil applies the IsNil predicate on the "damage_correction_type2" field.
func DamageCorrectionType2IsNil() predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDamageCorrectionType2)))
	})
}

// DamageCorrectionType2NotNil applies the NotNil predicate on the "damage_correction_type2" field.
func DamageCorrectionType2NotNil() predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDamageCorrectionType2)))
	})
}

// DamageCorrectionType2EqualFold applies the EqualFold predicate on the "damage_correction_type2" field.
func DamageCorrectionType2EqualFold(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionType2ContainsFold applies the ContainsFold predicate on the "damage_correction_type2" field.
func DamageCorrectionType2ContainsFold(v property.Types) predicate.HeldItems {
	vc := string(v)
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDamageCorrectionType2), vc))
	})
}

// DamageCorrectionValue2EQ applies the EQ predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2EQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDamageCorrectionValue2), v))
	})
}

// DamageCorrectionValue2NEQ applies the NEQ predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2NEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDamageCorrectionValue2), v))
	})
}

// DamageCorrectionValue2In applies the In predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2In(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDamageCorrectionValue2), v...))
	})
}

// DamageCorrectionValue2NotIn applies the NotIn predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2NotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDamageCorrectionValue2), v...))
	})
}

// DamageCorrectionValue2GT applies the GT predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2GT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDamageCorrectionValue2), v))
	})
}

// DamageCorrectionValue2GTE applies the GTE predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2GTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDamageCorrectionValue2), v))
	})
}

// DamageCorrectionValue2LT applies the LT predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2LT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDamageCorrectionValue2), v))
	})
}

// DamageCorrectionValue2LTE applies the LTE predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2LTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDamageCorrectionValue2), v))
	})
}

// DamageCorrectionValue2IsNil applies the IsNil predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2IsNil() predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDamageCorrectionValue2)))
	})
}

// DamageCorrectionValue2NotNil applies the NotNil predicate on the "damage_correction_value2" field.
func DamageCorrectionValue2NotNil() predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDamageCorrectionValue2)))
	})
}

// WeightCorrectionValueEQ applies the EQ predicate on the "weight_correction_value" field.
func WeightCorrectionValueEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeightCorrectionValue), v))
	})
}

// WeightCorrectionValueNEQ applies the NEQ predicate on the "weight_correction_value" field.
func WeightCorrectionValueNEQ(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeightCorrectionValue), v))
	})
}

// WeightCorrectionValueIn applies the In predicate on the "weight_correction_value" field.
func WeightCorrectionValueIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWeightCorrectionValue), v...))
	})
}

// WeightCorrectionValueNotIn applies the NotIn predicate on the "weight_correction_value" field.
func WeightCorrectionValueNotIn(vs ...int) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWeightCorrectionValue), v...))
	})
}

// WeightCorrectionValueGT applies the GT predicate on the "weight_correction_value" field.
func WeightCorrectionValueGT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeightCorrectionValue), v))
	})
}

// WeightCorrectionValueGTE applies the GTE predicate on the "weight_correction_value" field.
func WeightCorrectionValueGTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeightCorrectionValue), v))
	})
}

// WeightCorrectionValueLT applies the LT predicate on the "weight_correction_value" field.
func WeightCorrectionValueLT(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeightCorrectionValue), v))
	})
}

// WeightCorrectionValueLTE applies the LTE predicate on the "weight_correction_value" field.
func WeightCorrectionValueLTE(v int) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeightCorrectionValue), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.HeldItems {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HeldItems(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// HasToTrainedPokemonItem applies the HasEdge predicate on the "to_trained_pokemon_item" edge.
func HasToTrainedPokemonItem() predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonItemTable, ToTrainedPokemonItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToTrainedPokemonItemWith applies the HasEdge predicate on the "to_trained_pokemon_item" edge with a given conditions (other predicates).
func HasToTrainedPokemonItemWith(preds ...predicate.TrainedPokemonDetails) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTrainedPokemonItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ToTrainedPokemonItemTable, ToTrainedPokemonItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HeldItems) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HeldItems) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HeldItems) predicate.HeldItems {
	return predicate.HeldItems(func(s *sql.Selector) {
		p(s.Not())
	})
}
