// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/helditems"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
)

// TrainedPokemonDetailsQuery is the builder for querying TrainedPokemonDetails entities.
type TrainedPokemonDetailsQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TrainedPokemonDetails
	// eager-loading edges.
	withUseAbility         *AbilitiesQuery
	withUseHeldItem        *HeldItemsQuery
	withUseMove1           *MovesQuery
	withUseMove2           *MovesQuery
	withUseMove3           *MovesQuery
	withUseMove4           *MovesQuery
	withTrainingDetailUser *UsersQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TrainedPokemonDetailsQuery builder.
func (tpdq *TrainedPokemonDetailsQuery) Where(ps ...predicate.TrainedPokemonDetails) *TrainedPokemonDetailsQuery {
	tpdq.predicates = append(tpdq.predicates, ps...)
	return tpdq
}

// Limit adds a limit step to the query.
func (tpdq *TrainedPokemonDetailsQuery) Limit(limit int) *TrainedPokemonDetailsQuery {
	tpdq.limit = &limit
	return tpdq
}

// Offset adds an offset step to the query.
func (tpdq *TrainedPokemonDetailsQuery) Offset(offset int) *TrainedPokemonDetailsQuery {
	tpdq.offset = &offset
	return tpdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tpdq *TrainedPokemonDetailsQuery) Unique(unique bool) *TrainedPokemonDetailsQuery {
	tpdq.unique = &unique
	return tpdq
}

// Order adds an order step to the query.
func (tpdq *TrainedPokemonDetailsQuery) Order(o ...OrderFunc) *TrainedPokemonDetailsQuery {
	tpdq.order = append(tpdq.order, o...)
	return tpdq
}

// QueryUseAbility chains the current query on the "use_ability" edge.
func (tpdq *TrainedPokemonDetailsQuery) QueryUseAbility() *AbilitiesQuery {
	query := &AbilitiesQuery{config: tpdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, selector),
			sqlgraph.To(abilities.Table, abilities.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseAbilityTable, trainedpokemondetails.UseAbilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUseHeldItem chains the current query on the "use_held_item" edge.
func (tpdq *TrainedPokemonDetailsQuery) QueryUseHeldItem() *HeldItemsQuery {
	query := &HeldItemsQuery{config: tpdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, selector),
			sqlgraph.To(helditems.Table, helditems.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseHeldItemTable, trainedpokemondetails.UseHeldItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUseMove1 chains the current query on the "use_move1" edge.
func (tpdq *TrainedPokemonDetailsQuery) QueryUseMove1() *MovesQuery {
	query := &MovesQuery{config: tpdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, selector),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseMove1Table, trainedpokemondetails.UseMove1Column),
		)
		fromU = sqlgraph.SetNeighbors(tpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUseMove2 chains the current query on the "use_move2" edge.
func (tpdq *TrainedPokemonDetailsQuery) QueryUseMove2() *MovesQuery {
	query := &MovesQuery{config: tpdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, selector),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseMove2Table, trainedpokemondetails.UseMove2Column),
		)
		fromU = sqlgraph.SetNeighbors(tpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUseMove3 chains the current query on the "use_move3" edge.
func (tpdq *TrainedPokemonDetailsQuery) QueryUseMove3() *MovesQuery {
	query := &MovesQuery{config: tpdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, selector),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseMove3Table, trainedpokemondetails.UseMove3Column),
		)
		fromU = sqlgraph.SetNeighbors(tpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUseMove4 chains the current query on the "use_move4" edge.
func (tpdq *TrainedPokemonDetailsQuery) QueryUseMove4() *MovesQuery {
	query := &MovesQuery{config: tpdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, selector),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseMove4Table, trainedpokemondetails.UseMove4Column),
		)
		fromU = sqlgraph.SetNeighbors(tpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrainingDetailUser chains the current query on the "training_detail_user" edge.
func (tpdq *TrainedPokemonDetailsQuery) QueryTrainingDetailUser() *UsersQuery {
	query := &UsersQuery{config: tpdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, selector),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.TrainingDetailUserTable, trainedpokemondetails.TrainingDetailUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TrainedPokemonDetails entity from the query.
// Returns a *NotFoundError when no TrainedPokemonDetails was found.
func (tpdq *TrainedPokemonDetailsQuery) First(ctx context.Context) (*TrainedPokemonDetails, error) {
	nodes, err := tpdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{trainedpokemondetails.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tpdq *TrainedPokemonDetailsQuery) FirstX(ctx context.Context) *TrainedPokemonDetails {
	node, err := tpdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TrainedPokemonDetails ID from the query.
// Returns a *NotFoundError when no TrainedPokemonDetails ID was found.
func (tpdq *TrainedPokemonDetailsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tpdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{trainedpokemondetails.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tpdq *TrainedPokemonDetailsQuery) FirstIDX(ctx context.Context) int {
	id, err := tpdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TrainedPokemonDetails entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TrainedPokemonDetails entity is not found.
// Returns a *NotFoundError when no TrainedPokemonDetails entities are found.
func (tpdq *TrainedPokemonDetailsQuery) Only(ctx context.Context) (*TrainedPokemonDetails, error) {
	nodes, err := tpdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{trainedpokemondetails.Label}
	default:
		return nil, &NotSingularError{trainedpokemondetails.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tpdq *TrainedPokemonDetailsQuery) OnlyX(ctx context.Context) *TrainedPokemonDetails {
	node, err := tpdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TrainedPokemonDetails ID in the query.
// Returns a *NotSingularError when exactly one TrainedPokemonDetails ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tpdq *TrainedPokemonDetailsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tpdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = &NotSingularError{trainedpokemondetails.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tpdq *TrainedPokemonDetailsQuery) OnlyIDX(ctx context.Context) int {
	id, err := tpdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TrainedPokemonDetailsSlice.
func (tpdq *TrainedPokemonDetailsQuery) All(ctx context.Context) ([]*TrainedPokemonDetails, error) {
	if err := tpdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tpdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tpdq *TrainedPokemonDetailsQuery) AllX(ctx context.Context) []*TrainedPokemonDetails {
	nodes, err := tpdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TrainedPokemonDetails IDs.
func (tpdq *TrainedPokemonDetailsQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tpdq.Select(trainedpokemondetails.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tpdq *TrainedPokemonDetailsQuery) IDsX(ctx context.Context) []int {
	ids, err := tpdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tpdq *TrainedPokemonDetailsQuery) Count(ctx context.Context) (int, error) {
	if err := tpdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tpdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tpdq *TrainedPokemonDetailsQuery) CountX(ctx context.Context) int {
	count, err := tpdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tpdq *TrainedPokemonDetailsQuery) Exist(ctx context.Context) (bool, error) {
	if err := tpdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tpdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tpdq *TrainedPokemonDetailsQuery) ExistX(ctx context.Context) bool {
	exist, err := tpdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TrainedPokemonDetailsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tpdq *TrainedPokemonDetailsQuery) Clone() *TrainedPokemonDetailsQuery {
	if tpdq == nil {
		return nil
	}
	return &TrainedPokemonDetailsQuery{
		config:                 tpdq.config,
		limit:                  tpdq.limit,
		offset:                 tpdq.offset,
		order:                  append([]OrderFunc{}, tpdq.order...),
		predicates:             append([]predicate.TrainedPokemonDetails{}, tpdq.predicates...),
		withUseAbility:         tpdq.withUseAbility.Clone(),
		withUseHeldItem:        tpdq.withUseHeldItem.Clone(),
		withUseMove1:           tpdq.withUseMove1.Clone(),
		withUseMove2:           tpdq.withUseMove2.Clone(),
		withUseMove3:           tpdq.withUseMove3.Clone(),
		withUseMove4:           tpdq.withUseMove4.Clone(),
		withTrainingDetailUser: tpdq.withTrainingDetailUser.Clone(),
		// clone intermediate query.
		sql:  tpdq.sql.Clone(),
		path: tpdq.path,
	}
}

// WithUseAbility tells the query-builder to eager-load the nodes that are connected to
// the "use_ability" edge. The optional arguments are used to configure the query builder of the edge.
func (tpdq *TrainedPokemonDetailsQuery) WithUseAbility(opts ...func(*AbilitiesQuery)) *TrainedPokemonDetailsQuery {
	query := &AbilitiesQuery{config: tpdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpdq.withUseAbility = query
	return tpdq
}

// WithUseHeldItem tells the query-builder to eager-load the nodes that are connected to
// the "use_held_item" edge. The optional arguments are used to configure the query builder of the edge.
func (tpdq *TrainedPokemonDetailsQuery) WithUseHeldItem(opts ...func(*HeldItemsQuery)) *TrainedPokemonDetailsQuery {
	query := &HeldItemsQuery{config: tpdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpdq.withUseHeldItem = query
	return tpdq
}

// WithUseMove1 tells the query-builder to eager-load the nodes that are connected to
// the "use_move1" edge. The optional arguments are used to configure the query builder of the edge.
func (tpdq *TrainedPokemonDetailsQuery) WithUseMove1(opts ...func(*MovesQuery)) *TrainedPokemonDetailsQuery {
	query := &MovesQuery{config: tpdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpdq.withUseMove1 = query
	return tpdq
}

// WithUseMove2 tells the query-builder to eager-load the nodes that are connected to
// the "use_move2" edge. The optional arguments are used to configure the query builder of the edge.
func (tpdq *TrainedPokemonDetailsQuery) WithUseMove2(opts ...func(*MovesQuery)) *TrainedPokemonDetailsQuery {
	query := &MovesQuery{config: tpdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpdq.withUseMove2 = query
	return tpdq
}

// WithUseMove3 tells the query-builder to eager-load the nodes that are connected to
// the "use_move3" edge. The optional arguments are used to configure the query builder of the edge.
func (tpdq *TrainedPokemonDetailsQuery) WithUseMove3(opts ...func(*MovesQuery)) *TrainedPokemonDetailsQuery {
	query := &MovesQuery{config: tpdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpdq.withUseMove3 = query
	return tpdq
}

// WithUseMove4 tells the query-builder to eager-load the nodes that are connected to
// the "use_move4" edge. The optional arguments are used to configure the query builder of the edge.
func (tpdq *TrainedPokemonDetailsQuery) WithUseMove4(opts ...func(*MovesQuery)) *TrainedPokemonDetailsQuery {
	query := &MovesQuery{config: tpdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpdq.withUseMove4 = query
	return tpdq
}

// WithTrainingDetailUser tells the query-builder to eager-load the nodes that are connected to
// the "training_detail_user" edge. The optional arguments are used to configure the query builder of the edge.
func (tpdq *TrainedPokemonDetailsQuery) WithTrainingDetailUser(opts ...func(*UsersQuery)) *TrainedPokemonDetailsQuery {
	query := &UsersQuery{config: tpdq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpdq.withTrainingDetailUser = query
	return tpdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TrainedPokemonDetails.Query().
//		GroupBy(trainedpokemondetails.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tpdq *TrainedPokemonDetailsQuery) GroupBy(field string, fields ...string) *TrainedPokemonDetailsGroupBy {
	group := &TrainedPokemonDetailsGroupBy{config: tpdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tpdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tpdq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TrainedPokemonDetails.Query().
//		Select(trainedpokemondetails.FieldCreateTime).
//		Scan(ctx, &v)
//
func (tpdq *TrainedPokemonDetailsQuery) Select(fields ...string) *TrainedPokemonDetailsSelect {
	tpdq.fields = append(tpdq.fields, fields...)
	return &TrainedPokemonDetailsSelect{TrainedPokemonDetailsQuery: tpdq}
}

func (tpdq *TrainedPokemonDetailsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tpdq.fields {
		if !trainedpokemondetails.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tpdq.path != nil {
		prev, err := tpdq.path(ctx)
		if err != nil {
			return err
		}
		tpdq.sql = prev
	}
	return nil
}

func (tpdq *TrainedPokemonDetailsQuery) sqlAll(ctx context.Context) ([]*TrainedPokemonDetails, error) {
	var (
		nodes       = []*TrainedPokemonDetails{}
		_spec       = tpdq.querySpec()
		loadedTypes = [7]bool{
			tpdq.withUseAbility != nil,
			tpdq.withUseHeldItem != nil,
			tpdq.withUseMove1 != nil,
			tpdq.withUseMove2 != nil,
			tpdq.withUseMove3 != nil,
			tpdq.withUseMove4 != nil,
			tpdq.withTrainingDetailUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TrainedPokemonDetails{config: tpdq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tpdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tpdq.withUseAbility; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TrainedPokemonDetails)
		for i := range nodes {
			fk := nodes[i].AbilityID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(abilities.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "ability_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UseAbility = n
			}
		}
	}

	if query := tpdq.withUseHeldItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TrainedPokemonDetails)
		for i := range nodes {
			fk := nodes[i].HeldItemID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(helditems.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "held_item_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UseHeldItem = n
			}
		}
	}

	if query := tpdq.withUseMove1; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TrainedPokemonDetails)
		for i := range nodes {
			fk := nodes[i].MoveId1
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(moves.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "move_id1" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UseMove1 = n
			}
		}
	}

	if query := tpdq.withUseMove2; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TrainedPokemonDetails)
		for i := range nodes {
			fk := nodes[i].MoveId2
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(moves.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "move_id2" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UseMove2 = n
			}
		}
	}

	if query := tpdq.withUseMove3; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TrainedPokemonDetails)
		for i := range nodes {
			fk := nodes[i].MoveId3
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(moves.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "move_id3" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UseMove3 = n
			}
		}
	}

	if query := tpdq.withUseMove4; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TrainedPokemonDetails)
		for i := range nodes {
			fk := nodes[i].MoveId4
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(moves.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "move_id4" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UseMove4 = n
			}
		}
	}

	if query := tpdq.withTrainingDetailUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TrainedPokemonDetails)
		for i := range nodes {
			fk := nodes[i].UserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(users.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.TrainingDetailUser = n
			}
		}
	}

	return nodes, nil
}

func (tpdq *TrainedPokemonDetailsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tpdq.querySpec()
	return sqlgraph.CountNodes(ctx, tpdq.driver, _spec)
}

func (tpdq *TrainedPokemonDetailsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tpdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tpdq *TrainedPokemonDetailsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   trainedpokemondetails.Table,
			Columns: trainedpokemondetails.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trainedpokemondetails.FieldID,
			},
		},
		From:   tpdq.sql,
		Unique: true,
	}
	if unique := tpdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tpdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trainedpokemondetails.FieldID)
		for i := range fields {
			if fields[i] != trainedpokemondetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tpdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tpdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tpdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tpdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tpdq *TrainedPokemonDetailsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tpdq.driver.Dialect())
	t1 := builder.Table(trainedpokemondetails.Table)
	columns := tpdq.fields
	if len(columns) == 0 {
		columns = trainedpokemondetails.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tpdq.sql != nil {
		selector = tpdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range tpdq.predicates {
		p(selector)
	}
	for _, p := range tpdq.order {
		p(selector)
	}
	if offset := tpdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tpdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TrainedPokemonDetailsGroupBy is the group-by builder for TrainedPokemonDetails entities.
type TrainedPokemonDetailsGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tpdgb *TrainedPokemonDetailsGroupBy) Aggregate(fns ...AggregateFunc) *TrainedPokemonDetailsGroupBy {
	tpdgb.fns = append(tpdgb.fns, fns...)
	return tpdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tpdgb *TrainedPokemonDetailsGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tpdgb.path(ctx)
	if err != nil {
		return err
	}
	tpdgb.sql = query
	return tpdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tpdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tpdgb *TrainedPokemonDetailsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tpdgb.fields) > 1 {
		return nil, errors.New("ent: TrainedPokemonDetailsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tpdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) StringsX(ctx context.Context) []string {
	v, err := tpdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tpdgb *TrainedPokemonDetailsGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tpdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = fmt.Errorf("ent: TrainedPokemonDetailsGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) StringX(ctx context.Context) string {
	v, err := tpdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tpdgb *TrainedPokemonDetailsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tpdgb.fields) > 1 {
		return nil, errors.New("ent: TrainedPokemonDetailsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tpdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) IntsX(ctx context.Context) []int {
	v, err := tpdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tpdgb *TrainedPokemonDetailsGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tpdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = fmt.Errorf("ent: TrainedPokemonDetailsGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) IntX(ctx context.Context) int {
	v, err := tpdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tpdgb *TrainedPokemonDetailsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tpdgb.fields) > 1 {
		return nil, errors.New("ent: TrainedPokemonDetailsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tpdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tpdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tpdgb *TrainedPokemonDetailsGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tpdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = fmt.Errorf("ent: TrainedPokemonDetailsGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tpdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tpdgb *TrainedPokemonDetailsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tpdgb.fields) > 1 {
		return nil, errors.New("ent: TrainedPokemonDetailsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tpdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tpdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tpdgb *TrainedPokemonDetailsGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tpdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = fmt.Errorf("ent: TrainedPokemonDetailsGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tpdgb *TrainedPokemonDetailsGroupBy) BoolX(ctx context.Context) bool {
	v, err := tpdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tpdgb *TrainedPokemonDetailsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tpdgb.fields {
		if !trainedpokemondetails.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tpdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tpdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tpdgb *TrainedPokemonDetailsGroupBy) sqlQuery() *sql.Selector {
	selector := tpdgb.sql.Select()
	aggregation := make([]string, 0, len(tpdgb.fns))
	for _, fn := range tpdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tpdgb.fields)+len(tpdgb.fns))
		for _, f := range tpdgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tpdgb.fields...)...)
}

// TrainedPokemonDetailsSelect is the builder for selecting fields of TrainedPokemonDetails entities.
type TrainedPokemonDetailsSelect struct {
	*TrainedPokemonDetailsQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tpds *TrainedPokemonDetailsSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tpds.prepareQuery(ctx); err != nil {
		return err
	}
	tpds.sql = tpds.TrainedPokemonDetailsQuery.sqlQuery(ctx)
	return tpds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tpds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tpds *TrainedPokemonDetailsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tpds.fields) > 1 {
		return nil, errors.New("ent: TrainedPokemonDetailsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tpds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) StringsX(ctx context.Context) []string {
	v, err := tpds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tpds *TrainedPokemonDetailsSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tpds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = fmt.Errorf("ent: TrainedPokemonDetailsSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) StringX(ctx context.Context) string {
	v, err := tpds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tpds *TrainedPokemonDetailsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tpds.fields) > 1 {
		return nil, errors.New("ent: TrainedPokemonDetailsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tpds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) IntsX(ctx context.Context) []int {
	v, err := tpds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tpds *TrainedPokemonDetailsSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tpds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = fmt.Errorf("ent: TrainedPokemonDetailsSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) IntX(ctx context.Context) int {
	v, err := tpds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tpds *TrainedPokemonDetailsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tpds.fields) > 1 {
		return nil, errors.New("ent: TrainedPokemonDetailsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tpds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tpds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tpds *TrainedPokemonDetailsSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tpds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = fmt.Errorf("ent: TrainedPokemonDetailsSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) Float64X(ctx context.Context) float64 {
	v, err := tpds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tpds *TrainedPokemonDetailsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tpds.fields) > 1 {
		return nil, errors.New("ent: TrainedPokemonDetailsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tpds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) BoolsX(ctx context.Context) []bool {
	v, err := tpds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tpds *TrainedPokemonDetailsSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tpds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{trainedpokemondetails.Label}
	default:
		err = fmt.Errorf("ent: TrainedPokemonDetailsSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tpds *TrainedPokemonDetailsSelect) BoolX(ctx context.Context) bool {
	v, err := tpds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tpds *TrainedPokemonDetailsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tpds.sql.Query()
	if err := tpds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
