// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/partyresultrecord"
)

// PartyResultRecordCreate is the builder for creating a PartyResultRecord entity.
type PartyResultRecordCreate struct {
	config
	mutation *PartyResultRecordMutation
	hooks    []Hook
}

// SetPartyID sets the "party_id" field.
func (prrc *PartyResultRecordCreate) SetPartyID(i int) *PartyResultRecordCreate {
	prrc.mutation.SetPartyID(i)
	return prrc
}

// SetGeneration sets the "generation" field.
func (prrc *PartyResultRecordCreate) SetGeneration(i int) *PartyResultRecordCreate {
	prrc.mutation.SetGeneration(i)
	return prrc
}

// SetSeasen sets the "seasen" field.
func (prrc *PartyResultRecordCreate) SetSeasen(i int) *PartyResultRecordCreate {
	prrc.mutation.SetSeasen(i)
	return prrc
}

// SetMaxRate sets the "max_rate" field.
func (prrc *PartyResultRecordCreate) SetMaxRate(i int) *PartyResultRecordCreate {
	prrc.mutation.SetMaxRate(i)
	return prrc
}

// SetNillableMaxRate sets the "max_rate" field if the given value is not nil.
func (prrc *PartyResultRecordCreate) SetNillableMaxRate(i *int) *PartyResultRecordCreate {
	if i != nil {
		prrc.SetMaxRate(*i)
	}
	return prrc
}

// SetMaxRanking sets the "max_ranking" field.
func (prrc *PartyResultRecordCreate) SetMaxRanking(i int) *PartyResultRecordCreate {
	prrc.mutation.SetMaxRanking(i)
	return prrc
}

// SetNillableMaxRanking sets the "max_ranking" field if the given value is not nil.
func (prrc *PartyResultRecordCreate) SetNillableMaxRanking(i *int) *PartyResultRecordCreate {
	if i != nil {
		prrc.SetMaxRanking(*i)
	}
	return prrc
}

// SetResultToPartyID sets the "result_to_party" edge to the Party entity by ID.
func (prrc *PartyResultRecordCreate) SetResultToPartyID(id int) *PartyResultRecordCreate {
	prrc.mutation.SetResultToPartyID(id)
	return prrc
}

// SetResultToParty sets the "result_to_party" edge to the Party entity.
func (prrc *PartyResultRecordCreate) SetResultToParty(p *Party) *PartyResultRecordCreate {
	return prrc.SetResultToPartyID(p.ID)
}

// Mutation returns the PartyResultRecordMutation object of the builder.
func (prrc *PartyResultRecordCreate) Mutation() *PartyResultRecordMutation {
	return prrc.mutation
}

// Save creates the PartyResultRecord in the database.
func (prrc *PartyResultRecordCreate) Save(ctx context.Context) (*PartyResultRecord, error) {
	var (
		err  error
		node *PartyResultRecord
	)
	if len(prrc.hooks) == 0 {
		if err = prrc.check(); err != nil {
			return nil, err
		}
		node, err = prrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyResultRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prrc.check(); err != nil {
				return nil, err
			}
			prrc.mutation = mutation
			if node, err = prrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(prrc.hooks) - 1; i >= 0; i-- {
			if prrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prrc *PartyResultRecordCreate) SaveX(ctx context.Context) *PartyResultRecord {
	v, err := prrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prrc *PartyResultRecordCreate) Exec(ctx context.Context) error {
	_, err := prrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prrc *PartyResultRecordCreate) ExecX(ctx context.Context) {
	if err := prrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prrc *PartyResultRecordCreate) check() error {
	if _, ok := prrc.mutation.PartyID(); !ok {
		return &ValidationError{Name: "party_id", err: errors.New(`ent: missing required field "party_id"`)}
	}
	if v, ok := prrc.mutation.PartyID(); ok {
		if err := partyresultrecord.PartyIDValidator(v); err != nil {
			return &ValidationError{Name: "party_id", err: fmt.Errorf(`ent: validator failed for field "party_id": %w`, err)}
		}
	}
	if _, ok := prrc.mutation.Generation(); !ok {
		return &ValidationError{Name: "generation", err: errors.New(`ent: missing required field "generation"`)}
	}
	if v, ok := prrc.mutation.Generation(); ok {
		if err := partyresultrecord.GenerationValidator(v); err != nil {
			return &ValidationError{Name: "generation", err: fmt.Errorf(`ent: validator failed for field "generation": %w`, err)}
		}
	}
	if _, ok := prrc.mutation.Seasen(); !ok {
		return &ValidationError{Name: "seasen", err: errors.New(`ent: missing required field "seasen"`)}
	}
	if v, ok := prrc.mutation.Seasen(); ok {
		if err := partyresultrecord.SeasenValidator(v); err != nil {
			return &ValidationError{Name: "seasen", err: fmt.Errorf(`ent: validator failed for field "seasen": %w`, err)}
		}
	}
	if v, ok := prrc.mutation.MaxRate(); ok {
		if err := partyresultrecord.MaxRateValidator(v); err != nil {
			return &ValidationError{Name: "max_rate", err: fmt.Errorf(`ent: validator failed for field "max_rate": %w`, err)}
		}
	}
	if v, ok := prrc.mutation.MaxRanking(); ok {
		if err := partyresultrecord.MaxRankingValidator(v); err != nil {
			return &ValidationError{Name: "max_ranking", err: fmt.Errorf(`ent: validator failed for field "max_ranking": %w`, err)}
		}
	}
	if _, ok := prrc.mutation.ResultToPartyID(); !ok {
		return &ValidationError{Name: "result_to_party", err: errors.New("ent: missing required edge \"result_to_party\"")}
	}
	return nil
}

func (prrc *PartyResultRecordCreate) sqlSave(ctx context.Context) (*PartyResultRecord, error) {
	_node, _spec := prrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (prrc *PartyResultRecordCreate) createSpec() (*PartyResultRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &PartyResultRecord{config: prrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: partyresultrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyresultrecord.FieldID,
			},
		}
	)
	if value, ok := prrc.mutation.Generation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldGeneration,
		})
		_node.Generation = value
	}
	if value, ok := prrc.mutation.Seasen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldSeasen,
		})
		_node.Seasen = value
	}
	if value, ok := prrc.mutation.MaxRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRate,
		})
		_node.MaxRate = value
	}
	if value, ok := prrc.mutation.MaxRanking(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyresultrecord.FieldMaxRanking,
		})
		_node.MaxRanking = value
	}
	if nodes := prrc.mutation.ResultToPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   partyresultrecord.ResultToPartyTable,
			Columns: []string{partyresultrecord.ResultToPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PartyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PartyResultRecordCreateBulk is the builder for creating many PartyResultRecord entities in bulk.
type PartyResultRecordCreateBulk struct {
	config
	builders []*PartyResultRecordCreate
}

// Save creates the PartyResultRecord entities in the database.
func (prrcb *PartyResultRecordCreateBulk) Save(ctx context.Context) ([]*PartyResultRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prrcb.builders))
	nodes := make([]*PartyResultRecord, len(prrcb.builders))
	mutators := make([]Mutator, len(prrcb.builders))
	for i := range prrcb.builders {
		func(i int, root context.Context) {
			builder := prrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartyResultRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prrcb *PartyResultRecordCreateBulk) SaveX(ctx context.Context) []*PartyResultRecord {
	v, err := prrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prrcb *PartyResultRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := prrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prrcb *PartyResultRecordCreateBulk) ExecX(ctx context.Context) {
	if err := prrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
