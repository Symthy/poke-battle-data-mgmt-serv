// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/helditems"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// HeldItemsUpdate is the builder for updating HeldItems entities.
type HeldItemsUpdate struct {
	config
	hooks    []Hook
	mutation *HeldItemsMutation
}

// Where appends a list predicates to the HeldItemsUpdate builder.
func (hiu *HeldItemsUpdate) Where(ps ...predicate.HeldItems) *HeldItemsUpdate {
	hiu.mutation.Where(ps...)
	return hiu
}

// SetPhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field.
func (hiu *HeldItemsUpdate) SetPhysicalMovePowerCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetPhysicalMovePowerCorrectionValue()
	hiu.mutation.SetPhysicalMovePowerCorrectionValue(i)
	return hiu
}

// SetNillablePhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillablePhysicalMovePowerCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetPhysicalMovePowerCorrectionValue(*i)
	}
	return hiu
}

// AddPhysicalMovePowerCorrectionValue adds i to the "physical_move_power_correction_value" field.
func (hiu *HeldItemsUpdate) AddPhysicalMovePowerCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddPhysicalMovePowerCorrectionValue(i)
	return hiu
}

// SetSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field.
func (hiu *HeldItemsUpdate) SetSpecialMovePowerCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetSpecialMovePowerCorrectionValue()
	hiu.mutation.SetSpecialMovePowerCorrectionValue(i)
	return hiu
}

// SetNillableSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableSpecialMovePowerCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetSpecialMovePowerCorrectionValue(*i)
	}
	return hiu
}

// AddSpecialMovePowerCorrectionValue adds i to the "special_move_power_correction_value" field.
func (hiu *HeldItemsUpdate) AddSpecialMovePowerCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddSpecialMovePowerCorrectionValue(i)
	return hiu
}

// SetAttackPowerCorrectionValue sets the "attack_power_correction_value" field.
func (hiu *HeldItemsUpdate) SetAttackPowerCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetAttackPowerCorrectionValue()
	hiu.mutation.SetAttackPowerCorrectionValue(i)
	return hiu
}

// SetNillableAttackPowerCorrectionValue sets the "attack_power_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableAttackPowerCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetAttackPowerCorrectionValue(*i)
	}
	return hiu
}

// AddAttackPowerCorrectionValue adds i to the "attack_power_correction_value" field.
func (hiu *HeldItemsUpdate) AddAttackPowerCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddAttackPowerCorrectionValue(i)
	return hiu
}

// SetSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field.
func (hiu *HeldItemsUpdate) SetSpecialAttackPowerCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetSpecialAttackPowerCorrectionValue()
	hiu.mutation.SetSpecialAttackPowerCorrectionValue(i)
	return hiu
}

// SetNillableSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableSpecialAttackPowerCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetSpecialAttackPowerCorrectionValue(*i)
	}
	return hiu
}

// AddSpecialAttackPowerCorrectionValue adds i to the "special_attack_power_correction_value" field.
func (hiu *HeldItemsUpdate) AddSpecialAttackPowerCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddSpecialAttackPowerCorrectionValue(i)
	return hiu
}

// SetAttackCorrectionValue sets the "attack_correction_value" field.
func (hiu *HeldItemsUpdate) SetAttackCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetAttackCorrectionValue()
	hiu.mutation.SetAttackCorrectionValue(i)
	return hiu
}

// SetNillableAttackCorrectionValue sets the "attack_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableAttackCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetAttackCorrectionValue(*i)
	}
	return hiu
}

// AddAttackCorrectionValue adds i to the "attack_correction_value" field.
func (hiu *HeldItemsUpdate) AddAttackCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddAttackCorrectionValue(i)
	return hiu
}

// SetSpecialAttackCorrectionValue sets the "special_attack_correction_value" field.
func (hiu *HeldItemsUpdate) SetSpecialAttackCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetSpecialAttackCorrectionValue()
	hiu.mutation.SetSpecialAttackCorrectionValue(i)
	return hiu
}

// SetNillableSpecialAttackCorrectionValue sets the "special_attack_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableSpecialAttackCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetSpecialAttackCorrectionValue(*i)
	}
	return hiu
}

// AddSpecialAttackCorrectionValue adds i to the "special_attack_correction_value" field.
func (hiu *HeldItemsUpdate) AddSpecialAttackCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddSpecialAttackCorrectionValue(i)
	return hiu
}

// SetDeffenseCorrectionValue sets the "deffense_correction_value" field.
func (hiu *HeldItemsUpdate) SetDeffenseCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetDeffenseCorrectionValue()
	hiu.mutation.SetDeffenseCorrectionValue(i)
	return hiu
}

// SetNillableDeffenseCorrectionValue sets the "deffense_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableDeffenseCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetDeffenseCorrectionValue(*i)
	}
	return hiu
}

// AddDeffenseCorrectionValue adds i to the "deffense_correction_value" field.
func (hiu *HeldItemsUpdate) AddDeffenseCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddDeffenseCorrectionValue(i)
	return hiu
}

// SetSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field.
func (hiu *HeldItemsUpdate) SetSpecialDeffenseCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetSpecialDeffenseCorrectionValue()
	hiu.mutation.SetSpecialDeffenseCorrectionValue(i)
	return hiu
}

// SetNillableSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableSpecialDeffenseCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetSpecialDeffenseCorrectionValue(*i)
	}
	return hiu
}

// AddSpecialDeffenseCorrectionValue adds i to the "special_deffense_correction_value" field.
func (hiu *HeldItemsUpdate) AddSpecialDeffenseCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddSpecialDeffenseCorrectionValue(i)
	return hiu
}

// SetDamageCorrectionType1 sets the "damage_correction_type1" field.
func (hiu *HeldItemsUpdate) SetDamageCorrectionType1(pr property.Types) *HeldItemsUpdate {
	hiu.mutation.SetDamageCorrectionType1(pr)
	return hiu
}

// SetDamageCorrectionValue1 sets the "damage_correction_value1" field.
func (hiu *HeldItemsUpdate) SetDamageCorrectionValue1(i int) *HeldItemsUpdate {
	hiu.mutation.ResetDamageCorrectionValue1()
	hiu.mutation.SetDamageCorrectionValue1(i)
	return hiu
}

// SetNillableDamageCorrectionValue1 sets the "damage_correction_value1" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableDamageCorrectionValue1(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetDamageCorrectionValue1(*i)
	}
	return hiu
}

// AddDamageCorrectionValue1 adds i to the "damage_correction_value1" field.
func (hiu *HeldItemsUpdate) AddDamageCorrectionValue1(i int) *HeldItemsUpdate {
	hiu.mutation.AddDamageCorrectionValue1(i)
	return hiu
}

// SetDamageCorrectionType2 sets the "damage_correction_type2" field.
func (hiu *HeldItemsUpdate) SetDamageCorrectionType2(pr property.Types) *HeldItemsUpdate {
	hiu.mutation.SetDamageCorrectionType2(pr)
	return hiu
}

// SetNillableDamageCorrectionType2 sets the "damage_correction_type2" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableDamageCorrectionType2(pr *property.Types) *HeldItemsUpdate {
	if pr != nil {
		hiu.SetDamageCorrectionType2(*pr)
	}
	return hiu
}

// ClearDamageCorrectionType2 clears the value of the "damage_correction_type2" field.
func (hiu *HeldItemsUpdate) ClearDamageCorrectionType2() *HeldItemsUpdate {
	hiu.mutation.ClearDamageCorrectionType2()
	return hiu
}

// SetDamageCorrectionValue2 sets the "damage_correction_value2" field.
func (hiu *HeldItemsUpdate) SetDamageCorrectionValue2(i int) *HeldItemsUpdate {
	hiu.mutation.ResetDamageCorrectionValue2()
	hiu.mutation.SetDamageCorrectionValue2(i)
	return hiu
}

// SetNillableDamageCorrectionValue2 sets the "damage_correction_value2" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableDamageCorrectionValue2(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetDamageCorrectionValue2(*i)
	}
	return hiu
}

// AddDamageCorrectionValue2 adds i to the "damage_correction_value2" field.
func (hiu *HeldItemsUpdate) AddDamageCorrectionValue2(i int) *HeldItemsUpdate {
	hiu.mutation.AddDamageCorrectionValue2(i)
	return hiu
}

// ClearDamageCorrectionValue2 clears the value of the "damage_correction_value2" field.
func (hiu *HeldItemsUpdate) ClearDamageCorrectionValue2() *HeldItemsUpdate {
	hiu.mutation.ClearDamageCorrectionValue2()
	return hiu
}

// SetWeightCorrectionValue sets the "weight_correction_value" field.
func (hiu *HeldItemsUpdate) SetWeightCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.ResetWeightCorrectionValue()
	hiu.mutation.SetWeightCorrectionValue(i)
	return hiu
}

// SetNillableWeightCorrectionValue sets the "weight_correction_value" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableWeightCorrectionValue(i *int) *HeldItemsUpdate {
	if i != nil {
		hiu.SetWeightCorrectionValue(*i)
	}
	return hiu
}

// AddWeightCorrectionValue adds i to the "weight_correction_value" field.
func (hiu *HeldItemsUpdate) AddWeightCorrectionValue(i int) *HeldItemsUpdate {
	hiu.mutation.AddWeightCorrectionValue(i)
	return hiu
}

// SetName sets the "name" field.
func (hiu *HeldItemsUpdate) SetName(s string) *HeldItemsUpdate {
	hiu.mutation.SetName(s)
	return hiu
}

// SetDescription sets the "description" field.
func (hiu *HeldItemsUpdate) SetDescription(s string) *HeldItemsUpdate {
	hiu.mutation.SetDescription(s)
	return hiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hiu *HeldItemsUpdate) SetNillableDescription(s *string) *HeldItemsUpdate {
	if s != nil {
		hiu.SetDescription(*s)
	}
	return hiu
}

// ClearDescription clears the value of the "description" field.
func (hiu *HeldItemsUpdate) ClearDescription() *HeldItemsUpdate {
	hiu.mutation.ClearDescription()
	return hiu
}

// AddToTrainedPokemonItemIDs adds the "to_trained_pokemon_item" edge to the TrainedPokemonDetails entity by IDs.
func (hiu *HeldItemsUpdate) AddToTrainedPokemonItemIDs(ids ...int) *HeldItemsUpdate {
	hiu.mutation.AddToTrainedPokemonItemIDs(ids...)
	return hiu
}

// AddToTrainedPokemonItem adds the "to_trained_pokemon_item" edges to the TrainedPokemonDetails entity.
func (hiu *HeldItemsUpdate) AddToTrainedPokemonItem(t ...*TrainedPokemonDetails) *HeldItemsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hiu.AddToTrainedPokemonItemIDs(ids...)
}

// Mutation returns the HeldItemsMutation object of the builder.
func (hiu *HeldItemsUpdate) Mutation() *HeldItemsMutation {
	return hiu.mutation
}

// ClearToTrainedPokemonItem clears all "to_trained_pokemon_item" edges to the TrainedPokemonDetails entity.
func (hiu *HeldItemsUpdate) ClearToTrainedPokemonItem() *HeldItemsUpdate {
	hiu.mutation.ClearToTrainedPokemonItem()
	return hiu
}

// RemoveToTrainedPokemonItemIDs removes the "to_trained_pokemon_item" edge to TrainedPokemonDetails entities by IDs.
func (hiu *HeldItemsUpdate) RemoveToTrainedPokemonItemIDs(ids ...int) *HeldItemsUpdate {
	hiu.mutation.RemoveToTrainedPokemonItemIDs(ids...)
	return hiu
}

// RemoveToTrainedPokemonItem removes "to_trained_pokemon_item" edges to TrainedPokemonDetails entities.
func (hiu *HeldItemsUpdate) RemoveToTrainedPokemonItem(t ...*TrainedPokemonDetails) *HeldItemsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hiu.RemoveToTrainedPokemonItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hiu *HeldItemsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hiu.hooks) == 0 {
		if err = hiu.check(); err != nil {
			return 0, err
		}
		affected, err = hiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HeldItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hiu.check(); err != nil {
				return 0, err
			}
			hiu.mutation = mutation
			affected, err = hiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hiu.hooks) - 1; i >= 0; i-- {
			if hiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hiu *HeldItemsUpdate) SaveX(ctx context.Context) int {
	affected, err := hiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hiu *HeldItemsUpdate) Exec(ctx context.Context) error {
	_, err := hiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hiu *HeldItemsUpdate) ExecX(ctx context.Context) {
	if err := hiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hiu *HeldItemsUpdate) check() error {
	if v, ok := hiu.mutation.DamageCorrectionType1(); ok {
		if err := helditems.DamageCorrectionType1Validator(string(v)); err != nil {
			return &ValidationError{Name: "damage_correction_type1", err: fmt.Errorf("ent: validator failed for field \"damage_correction_type1\": %w", err)}
		}
	}
	if v, ok := hiu.mutation.Name(); ok {
		if err := helditems.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (hiu *HeldItemsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   helditems.Table,
			Columns: helditems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: helditems.FieldID,
			},
		},
	}
	if ps := hiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hiu.mutation.PhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldPhysicalMovePowerCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedPhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldPhysicalMovePowerCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.SpecialMovePowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialMovePowerCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedSpecialMovePowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialMovePowerCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AttackPowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldAttackPowerCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedAttackPowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldAttackPowerCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.SpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialAttackPowerCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedSpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialAttackPowerCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AttackCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldAttackCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedAttackCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldAttackCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.SpecialAttackCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialAttackCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedSpecialAttackCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialAttackCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.DeffenseCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDeffenseCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedDeffenseCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDeffenseCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.SpecialDeffenseCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialDeffenseCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedSpecialDeffenseCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialDeffenseCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.DamageCorrectionType1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helditems.FieldDamageCorrectionType1,
		})
	}
	if value, ok := hiu.mutation.DamageCorrectionValue1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDamageCorrectionValue1,
		})
	}
	if value, ok := hiu.mutation.AddedDamageCorrectionValue1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDamageCorrectionValue1,
		})
	}
	if value, ok := hiu.mutation.DamageCorrectionType2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helditems.FieldDamageCorrectionType2,
		})
	}
	if hiu.mutation.DamageCorrectionType2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: helditems.FieldDamageCorrectionType2,
		})
	}
	if value, ok := hiu.mutation.DamageCorrectionValue2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDamageCorrectionValue2,
		})
	}
	if value, ok := hiu.mutation.AddedDamageCorrectionValue2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDamageCorrectionValue2,
		})
	}
	if hiu.mutation.DamageCorrectionValue2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: helditems.FieldDamageCorrectionValue2,
		})
	}
	if value, ok := hiu.mutation.WeightCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldWeightCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.AddedWeightCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldWeightCorrectionValue,
		})
	}
	if value, ok := hiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helditems.FieldName,
		})
	}
	if value, ok := hiu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helditems.FieldDescription,
		})
	}
	if hiu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: helditems.FieldDescription,
		})
	}
	if hiu.mutation.ToTrainedPokemonItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   helditems.ToTrainedPokemonItemTable,
			Columns: []string{helditems.ToTrainedPokemonItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hiu.mutation.RemovedToTrainedPokemonItemIDs(); len(nodes) > 0 && !hiu.mutation.ToTrainedPokemonItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   helditems.ToTrainedPokemonItemTable,
			Columns: []string{helditems.ToTrainedPokemonItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hiu.mutation.ToTrainedPokemonItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   helditems.ToTrainedPokemonItemTable,
			Columns: []string{helditems.ToTrainedPokemonItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{helditems.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// HeldItemsUpdateOne is the builder for updating a single HeldItems entity.
type HeldItemsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HeldItemsMutation
}

// SetPhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetPhysicalMovePowerCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetPhysicalMovePowerCorrectionValue()
	hiuo.mutation.SetPhysicalMovePowerCorrectionValue(i)
	return hiuo
}

// SetNillablePhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillablePhysicalMovePowerCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetPhysicalMovePowerCorrectionValue(*i)
	}
	return hiuo
}

// AddPhysicalMovePowerCorrectionValue adds i to the "physical_move_power_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddPhysicalMovePowerCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddPhysicalMovePowerCorrectionValue(i)
	return hiuo
}

// SetSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetSpecialMovePowerCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetSpecialMovePowerCorrectionValue()
	hiuo.mutation.SetSpecialMovePowerCorrectionValue(i)
	return hiuo
}

// SetNillableSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableSpecialMovePowerCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetSpecialMovePowerCorrectionValue(*i)
	}
	return hiuo
}

// AddSpecialMovePowerCorrectionValue adds i to the "special_move_power_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddSpecialMovePowerCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddSpecialMovePowerCorrectionValue(i)
	return hiuo
}

// SetAttackPowerCorrectionValue sets the "attack_power_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetAttackPowerCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetAttackPowerCorrectionValue()
	hiuo.mutation.SetAttackPowerCorrectionValue(i)
	return hiuo
}

// SetNillableAttackPowerCorrectionValue sets the "attack_power_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableAttackPowerCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetAttackPowerCorrectionValue(*i)
	}
	return hiuo
}

// AddAttackPowerCorrectionValue adds i to the "attack_power_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddAttackPowerCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddAttackPowerCorrectionValue(i)
	return hiuo
}

// SetSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetSpecialAttackPowerCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetSpecialAttackPowerCorrectionValue()
	hiuo.mutation.SetSpecialAttackPowerCorrectionValue(i)
	return hiuo
}

// SetNillableSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableSpecialAttackPowerCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetSpecialAttackPowerCorrectionValue(*i)
	}
	return hiuo
}

// AddSpecialAttackPowerCorrectionValue adds i to the "special_attack_power_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddSpecialAttackPowerCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddSpecialAttackPowerCorrectionValue(i)
	return hiuo
}

// SetAttackCorrectionValue sets the "attack_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetAttackCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetAttackCorrectionValue()
	hiuo.mutation.SetAttackCorrectionValue(i)
	return hiuo
}

// SetNillableAttackCorrectionValue sets the "attack_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableAttackCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetAttackCorrectionValue(*i)
	}
	return hiuo
}

// AddAttackCorrectionValue adds i to the "attack_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddAttackCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddAttackCorrectionValue(i)
	return hiuo
}

// SetSpecialAttackCorrectionValue sets the "special_attack_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetSpecialAttackCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetSpecialAttackCorrectionValue()
	hiuo.mutation.SetSpecialAttackCorrectionValue(i)
	return hiuo
}

// SetNillableSpecialAttackCorrectionValue sets the "special_attack_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableSpecialAttackCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetSpecialAttackCorrectionValue(*i)
	}
	return hiuo
}

// AddSpecialAttackCorrectionValue adds i to the "special_attack_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddSpecialAttackCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddSpecialAttackCorrectionValue(i)
	return hiuo
}

// SetDeffenseCorrectionValue sets the "deffense_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetDeffenseCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetDeffenseCorrectionValue()
	hiuo.mutation.SetDeffenseCorrectionValue(i)
	return hiuo
}

// SetNillableDeffenseCorrectionValue sets the "deffense_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableDeffenseCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetDeffenseCorrectionValue(*i)
	}
	return hiuo
}

// AddDeffenseCorrectionValue adds i to the "deffense_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddDeffenseCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddDeffenseCorrectionValue(i)
	return hiuo
}

// SetSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetSpecialDeffenseCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetSpecialDeffenseCorrectionValue()
	hiuo.mutation.SetSpecialDeffenseCorrectionValue(i)
	return hiuo
}

// SetNillableSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableSpecialDeffenseCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetSpecialDeffenseCorrectionValue(*i)
	}
	return hiuo
}

// AddSpecialDeffenseCorrectionValue adds i to the "special_deffense_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddSpecialDeffenseCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddSpecialDeffenseCorrectionValue(i)
	return hiuo
}

// SetDamageCorrectionType1 sets the "damage_correction_type1" field.
func (hiuo *HeldItemsUpdateOne) SetDamageCorrectionType1(pr property.Types) *HeldItemsUpdateOne {
	hiuo.mutation.SetDamageCorrectionType1(pr)
	return hiuo
}

// SetDamageCorrectionValue1 sets the "damage_correction_value1" field.
func (hiuo *HeldItemsUpdateOne) SetDamageCorrectionValue1(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetDamageCorrectionValue1()
	hiuo.mutation.SetDamageCorrectionValue1(i)
	return hiuo
}

// SetNillableDamageCorrectionValue1 sets the "damage_correction_value1" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableDamageCorrectionValue1(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetDamageCorrectionValue1(*i)
	}
	return hiuo
}

// AddDamageCorrectionValue1 adds i to the "damage_correction_value1" field.
func (hiuo *HeldItemsUpdateOne) AddDamageCorrectionValue1(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddDamageCorrectionValue1(i)
	return hiuo
}

// SetDamageCorrectionType2 sets the "damage_correction_type2" field.
func (hiuo *HeldItemsUpdateOne) SetDamageCorrectionType2(pr property.Types) *HeldItemsUpdateOne {
	hiuo.mutation.SetDamageCorrectionType2(pr)
	return hiuo
}

// SetNillableDamageCorrectionType2 sets the "damage_correction_type2" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableDamageCorrectionType2(pr *property.Types) *HeldItemsUpdateOne {
	if pr != nil {
		hiuo.SetDamageCorrectionType2(*pr)
	}
	return hiuo
}

// ClearDamageCorrectionType2 clears the value of the "damage_correction_type2" field.
func (hiuo *HeldItemsUpdateOne) ClearDamageCorrectionType2() *HeldItemsUpdateOne {
	hiuo.mutation.ClearDamageCorrectionType2()
	return hiuo
}

// SetDamageCorrectionValue2 sets the "damage_correction_value2" field.
func (hiuo *HeldItemsUpdateOne) SetDamageCorrectionValue2(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetDamageCorrectionValue2()
	hiuo.mutation.SetDamageCorrectionValue2(i)
	return hiuo
}

// SetNillableDamageCorrectionValue2 sets the "damage_correction_value2" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableDamageCorrectionValue2(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetDamageCorrectionValue2(*i)
	}
	return hiuo
}

// AddDamageCorrectionValue2 adds i to the "damage_correction_value2" field.
func (hiuo *HeldItemsUpdateOne) AddDamageCorrectionValue2(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddDamageCorrectionValue2(i)
	return hiuo
}

// ClearDamageCorrectionValue2 clears the value of the "damage_correction_value2" field.
func (hiuo *HeldItemsUpdateOne) ClearDamageCorrectionValue2() *HeldItemsUpdateOne {
	hiuo.mutation.ClearDamageCorrectionValue2()
	return hiuo
}

// SetWeightCorrectionValue sets the "weight_correction_value" field.
func (hiuo *HeldItemsUpdateOne) SetWeightCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.ResetWeightCorrectionValue()
	hiuo.mutation.SetWeightCorrectionValue(i)
	return hiuo
}

// SetNillableWeightCorrectionValue sets the "weight_correction_value" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableWeightCorrectionValue(i *int) *HeldItemsUpdateOne {
	if i != nil {
		hiuo.SetWeightCorrectionValue(*i)
	}
	return hiuo
}

// AddWeightCorrectionValue adds i to the "weight_correction_value" field.
func (hiuo *HeldItemsUpdateOne) AddWeightCorrectionValue(i int) *HeldItemsUpdateOne {
	hiuo.mutation.AddWeightCorrectionValue(i)
	return hiuo
}

// SetName sets the "name" field.
func (hiuo *HeldItemsUpdateOne) SetName(s string) *HeldItemsUpdateOne {
	hiuo.mutation.SetName(s)
	return hiuo
}

// SetDescription sets the "description" field.
func (hiuo *HeldItemsUpdateOne) SetDescription(s string) *HeldItemsUpdateOne {
	hiuo.mutation.SetDescription(s)
	return hiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hiuo *HeldItemsUpdateOne) SetNillableDescription(s *string) *HeldItemsUpdateOne {
	if s != nil {
		hiuo.SetDescription(*s)
	}
	return hiuo
}

// ClearDescription clears the value of the "description" field.
func (hiuo *HeldItemsUpdateOne) ClearDescription() *HeldItemsUpdateOne {
	hiuo.mutation.ClearDescription()
	return hiuo
}

// AddToTrainedPokemonItemIDs adds the "to_trained_pokemon_item" edge to the TrainedPokemonDetails entity by IDs.
func (hiuo *HeldItemsUpdateOne) AddToTrainedPokemonItemIDs(ids ...int) *HeldItemsUpdateOne {
	hiuo.mutation.AddToTrainedPokemonItemIDs(ids...)
	return hiuo
}

// AddToTrainedPokemonItem adds the "to_trained_pokemon_item" edges to the TrainedPokemonDetails entity.
func (hiuo *HeldItemsUpdateOne) AddToTrainedPokemonItem(t ...*TrainedPokemonDetails) *HeldItemsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hiuo.AddToTrainedPokemonItemIDs(ids...)
}

// Mutation returns the HeldItemsMutation object of the builder.
func (hiuo *HeldItemsUpdateOne) Mutation() *HeldItemsMutation {
	return hiuo.mutation
}

// ClearToTrainedPokemonItem clears all "to_trained_pokemon_item" edges to the TrainedPokemonDetails entity.
func (hiuo *HeldItemsUpdateOne) ClearToTrainedPokemonItem() *HeldItemsUpdateOne {
	hiuo.mutation.ClearToTrainedPokemonItem()
	return hiuo
}

// RemoveToTrainedPokemonItemIDs removes the "to_trained_pokemon_item" edge to TrainedPokemonDetails entities by IDs.
func (hiuo *HeldItemsUpdateOne) RemoveToTrainedPokemonItemIDs(ids ...int) *HeldItemsUpdateOne {
	hiuo.mutation.RemoveToTrainedPokemonItemIDs(ids...)
	return hiuo
}

// RemoveToTrainedPokemonItem removes "to_trained_pokemon_item" edges to TrainedPokemonDetails entities.
func (hiuo *HeldItemsUpdateOne) RemoveToTrainedPokemonItem(t ...*TrainedPokemonDetails) *HeldItemsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hiuo.RemoveToTrainedPokemonItemIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hiuo *HeldItemsUpdateOne) Select(field string, fields ...string) *HeldItemsUpdateOne {
	hiuo.fields = append([]string{field}, fields...)
	return hiuo
}

// Save executes the query and returns the updated HeldItems entity.
func (hiuo *HeldItemsUpdateOne) Save(ctx context.Context) (*HeldItems, error) {
	var (
		err  error
		node *HeldItems
	)
	if len(hiuo.hooks) == 0 {
		if err = hiuo.check(); err != nil {
			return nil, err
		}
		node, err = hiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HeldItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hiuo.check(); err != nil {
				return nil, err
			}
			hiuo.mutation = mutation
			node, err = hiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hiuo.hooks) - 1; i >= 0; i-- {
			if hiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hiuo *HeldItemsUpdateOne) SaveX(ctx context.Context) *HeldItems {
	node, err := hiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hiuo *HeldItemsUpdateOne) Exec(ctx context.Context) error {
	_, err := hiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hiuo *HeldItemsUpdateOne) ExecX(ctx context.Context) {
	if err := hiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hiuo *HeldItemsUpdateOne) check() error {
	if v, ok := hiuo.mutation.DamageCorrectionType1(); ok {
		if err := helditems.DamageCorrectionType1Validator(string(v)); err != nil {
			return &ValidationError{Name: "damage_correction_type1", err: fmt.Errorf("ent: validator failed for field \"damage_correction_type1\": %w", err)}
		}
	}
	if v, ok := hiuo.mutation.Name(); ok {
		if err := helditems.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (hiuo *HeldItemsUpdateOne) sqlSave(ctx context.Context) (_node *HeldItems, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   helditems.Table,
			Columns: helditems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: helditems.FieldID,
			},
		},
	}
	id, ok := hiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing HeldItems.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := hiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, helditems.FieldID)
		for _, f := range fields {
			if !helditems.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != helditems.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hiuo.mutation.PhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldPhysicalMovePowerCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedPhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldPhysicalMovePowerCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.SpecialMovePowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialMovePowerCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedSpecialMovePowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialMovePowerCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AttackPowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldAttackPowerCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedAttackPowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldAttackPowerCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.SpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialAttackPowerCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedSpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialAttackPowerCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AttackCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldAttackCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedAttackCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldAttackCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.SpecialAttackCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialAttackCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedSpecialAttackCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialAttackCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.DeffenseCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDeffenseCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedDeffenseCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDeffenseCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.SpecialDeffenseCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialDeffenseCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedSpecialDeffenseCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldSpecialDeffenseCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.DamageCorrectionType1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helditems.FieldDamageCorrectionType1,
		})
	}
	if value, ok := hiuo.mutation.DamageCorrectionValue1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDamageCorrectionValue1,
		})
	}
	if value, ok := hiuo.mutation.AddedDamageCorrectionValue1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDamageCorrectionValue1,
		})
	}
	if value, ok := hiuo.mutation.DamageCorrectionType2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helditems.FieldDamageCorrectionType2,
		})
	}
	if hiuo.mutation.DamageCorrectionType2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: helditems.FieldDamageCorrectionType2,
		})
	}
	if value, ok := hiuo.mutation.DamageCorrectionValue2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDamageCorrectionValue2,
		})
	}
	if value, ok := hiuo.mutation.AddedDamageCorrectionValue2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldDamageCorrectionValue2,
		})
	}
	if hiuo.mutation.DamageCorrectionValue2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: helditems.FieldDamageCorrectionValue2,
		})
	}
	if value, ok := hiuo.mutation.WeightCorrectionValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldWeightCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.AddedWeightCorrectionValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helditems.FieldWeightCorrectionValue,
		})
	}
	if value, ok := hiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helditems.FieldName,
		})
	}
	if value, ok := hiuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helditems.FieldDescription,
		})
	}
	if hiuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: helditems.FieldDescription,
		})
	}
	if hiuo.mutation.ToTrainedPokemonItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   helditems.ToTrainedPokemonItemTable,
			Columns: []string{helditems.ToTrainedPokemonItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hiuo.mutation.RemovedToTrainedPokemonItemIDs(); len(nodes) > 0 && !hiuo.mutation.ToTrainedPokemonItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   helditems.ToTrainedPokemonItemTable,
			Columns: []string{helditems.ToTrainedPokemonItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hiuo.mutation.ToTrainedPokemonItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   helditems.ToTrainedPokemonItemTable,
			Columns: []string{helditems.ToTrainedPokemonItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HeldItems{config: hiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{helditems.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
