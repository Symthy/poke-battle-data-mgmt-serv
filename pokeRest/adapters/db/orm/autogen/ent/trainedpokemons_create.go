// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// TrainedPokemonsCreate is the builder for creating a TrainedPokemons entity.
type TrainedPokemonsCreate struct {
	config
	mutation *TrainedPokemonsMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tpc *TrainedPokemonsCreate) SetCreateTime(t time.Time) *TrainedPokemonsCreate {
	tpc.mutation.SetCreateTime(t)
	return tpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableCreateTime(t *time.Time) *TrainedPokemonsCreate {
	if t != nil {
		tpc.SetCreateTime(*t)
	}
	return tpc
}

// SetUpdateTime sets the "update_time" field.
func (tpc *TrainedPokemonsCreate) SetUpdateTime(t time.Time) *TrainedPokemonsCreate {
	tpc.mutation.SetUpdateTime(t)
	return tpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableUpdateTime(t *time.Time) *TrainedPokemonsCreate {
	if t != nil {
		tpc.SetUpdateTime(*t)
	}
	return tpc
}

// SetPokemonID sets the "pokemon_id" field.
func (tpc *TrainedPokemonsCreate) SetPokemonID(i int) *TrainedPokemonsCreate {
	tpc.mutation.SetPokemonID(i)
	return tpc
}

// SetCreateUserID sets the "create_user_id" field.
func (tpc *TrainedPokemonsCreate) SetCreateUserID(i int) *TrainedPokemonsCreate {
	tpc.mutation.SetCreateUserID(i)
	return tpc
}

// SetNillableCreateUserID sets the "create_user_id" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableCreateUserID(i *int) *TrainedPokemonsCreate {
	if i != nil {
		tpc.SetCreateUserID(*i)
	}
	return tpc
}

// SetNature sets the "nature" field.
func (tpc *TrainedPokemonsCreate) SetNature(pr property.Nature) *TrainedPokemonsCreate {
	tpc.mutation.SetNature(pr)
	return tpc
}

// SetEffortValueH sets the "effort_value_h" field.
func (tpc *TrainedPokemonsCreate) SetEffortValueH(i int) *TrainedPokemonsCreate {
	tpc.mutation.SetEffortValueH(i)
	return tpc
}

// SetNillableEffortValueH sets the "effort_value_h" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableEffortValueH(i *int) *TrainedPokemonsCreate {
	if i != nil {
		tpc.SetEffortValueH(*i)
	}
	return tpc
}

// SetEffortValueA sets the "effort_value_a" field.
func (tpc *TrainedPokemonsCreate) SetEffortValueA(i int) *TrainedPokemonsCreate {
	tpc.mutation.SetEffortValueA(i)
	return tpc
}

// SetNillableEffortValueA sets the "effort_value_a" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableEffortValueA(i *int) *TrainedPokemonsCreate {
	if i != nil {
		tpc.SetEffortValueA(*i)
	}
	return tpc
}

// SetEffortValueB sets the "effort_value_b" field.
func (tpc *TrainedPokemonsCreate) SetEffortValueB(i int) *TrainedPokemonsCreate {
	tpc.mutation.SetEffortValueB(i)
	return tpc
}

// SetNillableEffortValueB sets the "effort_value_b" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableEffortValueB(i *int) *TrainedPokemonsCreate {
	if i != nil {
		tpc.SetEffortValueB(*i)
	}
	return tpc
}

// SetEffortValueC sets the "effort_value_c" field.
func (tpc *TrainedPokemonsCreate) SetEffortValueC(i int) *TrainedPokemonsCreate {
	tpc.mutation.SetEffortValueC(i)
	return tpc
}

// SetNillableEffortValueC sets the "effort_value_c" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableEffortValueC(i *int) *TrainedPokemonsCreate {
	if i != nil {
		tpc.SetEffortValueC(*i)
	}
	return tpc
}

// SetEffortValueD sets the "effort_value_d" field.
func (tpc *TrainedPokemonsCreate) SetEffortValueD(i int) *TrainedPokemonsCreate {
	tpc.mutation.SetEffortValueD(i)
	return tpc
}

// SetNillableEffortValueD sets the "effort_value_d" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableEffortValueD(i *int) *TrainedPokemonsCreate {
	if i != nil {
		tpc.SetEffortValueD(*i)
	}
	return tpc
}

// SetEffortValueS sets the "effort_value_s" field.
func (tpc *TrainedPokemonsCreate) SetEffortValueS(i int) *TrainedPokemonsCreate {
	tpc.mutation.SetEffortValueS(i)
	return tpc
}

// SetNillableEffortValueS sets the "effort_value_s" field if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableEffortValueS(i *int) *TrainedPokemonsCreate {
	if i != nil {
		tpc.SetEffortValueS(*i)
	}
	return tpc
}

// SetUsePokemonID sets the "use_pokemon" edge to the Pokemons entity by ID.
func (tpc *TrainedPokemonsCreate) SetUsePokemonID(id int) *TrainedPokemonsCreate {
	tpc.mutation.SetUsePokemonID(id)
	return tpc
}

// SetUsePokemon sets the "use_pokemon" edge to the Pokemons entity.
func (tpc *TrainedPokemonsCreate) SetUsePokemon(p *Pokemons) *TrainedPokemonsCreate {
	return tpc.SetUsePokemonID(p.ID)
}

// SetTrainingUserID sets the "training_user" edge to the Users entity by ID.
func (tpc *TrainedPokemonsCreate) SetTrainingUserID(id int) *TrainedPokemonsCreate {
	tpc.mutation.SetTrainingUserID(id)
	return tpc
}

// SetNillableTrainingUserID sets the "training_user" edge to the Users entity by ID if the given value is not nil.
func (tpc *TrainedPokemonsCreate) SetNillableTrainingUserID(id *int) *TrainedPokemonsCreate {
	if id != nil {
		tpc = tpc.SetTrainingUserID(*id)
	}
	return tpc
}

// SetTrainingUser sets the "training_user" edge to the Users entity.
func (tpc *TrainedPokemonsCreate) SetTrainingUser(u *Users) *TrainedPokemonsCreate {
	return tpc.SetTrainingUserID(u.ID)
}

// Mutation returns the TrainedPokemonsMutation object of the builder.
func (tpc *TrainedPokemonsCreate) Mutation() *TrainedPokemonsMutation {
	return tpc.mutation
}

// Save creates the TrainedPokemons in the database.
func (tpc *TrainedPokemonsCreate) Save(ctx context.Context) (*TrainedPokemons, error) {
	var (
		err  error
		node *TrainedPokemons
	)
	tpc.defaults()
	if len(tpc.hooks) == 0 {
		if err = tpc.check(); err != nil {
			return nil, err
		}
		node, err = tpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrainedPokemonsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpc.check(); err != nil {
				return nil, err
			}
			tpc.mutation = mutation
			if node, err = tpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tpc.hooks) - 1; i >= 0; i-- {
			if tpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TrainedPokemonsCreate) SaveX(ctx context.Context) *TrainedPokemons {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TrainedPokemonsCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TrainedPokemonsCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpc *TrainedPokemonsCreate) defaults() {
	if _, ok := tpc.mutation.CreateTime(); !ok {
		v := trainedpokemons.DefaultCreateTime()
		tpc.mutation.SetCreateTime(v)
	}
	if _, ok := tpc.mutation.UpdateTime(); !ok {
		v := trainedpokemons.DefaultUpdateTime()
		tpc.mutation.SetUpdateTime(v)
	}
	if _, ok := tpc.mutation.EffortValueH(); !ok {
		v := trainedpokemons.DefaultEffortValueH
		tpc.mutation.SetEffortValueH(v)
	}
	if _, ok := tpc.mutation.EffortValueA(); !ok {
		v := trainedpokemons.DefaultEffortValueA
		tpc.mutation.SetEffortValueA(v)
	}
	if _, ok := tpc.mutation.EffortValueB(); !ok {
		v := trainedpokemons.DefaultEffortValueB
		tpc.mutation.SetEffortValueB(v)
	}
	if _, ok := tpc.mutation.EffortValueC(); !ok {
		v := trainedpokemons.DefaultEffortValueC
		tpc.mutation.SetEffortValueC(v)
	}
	if _, ok := tpc.mutation.EffortValueD(); !ok {
		v := trainedpokemons.DefaultEffortValueD
		tpc.mutation.SetEffortValueD(v)
	}
	if _, ok := tpc.mutation.EffortValueS(); !ok {
		v := trainedpokemons.DefaultEffortValueS
		tpc.mutation.SetEffortValueS(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TrainedPokemonsCreate) check() error {
	if _, ok := tpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := tpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := tpc.mutation.PokemonID(); !ok {
		return &ValidationError{Name: "pokemon_id", err: errors.New(`ent: missing required field "pokemon_id"`)}
	}
	if v, ok := tpc.mutation.PokemonID(); ok {
		if err := trainedpokemons.PokemonIDValidator(v); err != nil {
			return &ValidationError{Name: "pokemon_id", err: fmt.Errorf(`ent: validator failed for field "pokemon_id": %w`, err)}
		}
	}
	if v, ok := tpc.mutation.CreateUserID(); ok {
		if err := trainedpokemons.CreateUserIDValidator(v); err != nil {
			return &ValidationError{Name: "create_user_id", err: fmt.Errorf(`ent: validator failed for field "create_user_id": %w`, err)}
		}
	}
	if _, ok := tpc.mutation.Nature(); !ok {
		return &ValidationError{Name: "nature", err: errors.New(`ent: missing required field "nature"`)}
	}
	if v, ok := tpc.mutation.Nature(); ok {
		if err := trainedpokemons.NatureValidator(string(v)); err != nil {
			return &ValidationError{Name: "nature", err: fmt.Errorf(`ent: validator failed for field "nature": %w`, err)}
		}
	}
	if _, ok := tpc.mutation.EffortValueH(); !ok {
		return &ValidationError{Name: "effort_value_h", err: errors.New(`ent: missing required field "effort_value_h"`)}
	}
	if _, ok := tpc.mutation.EffortValueA(); !ok {
		return &ValidationError{Name: "effort_value_a", err: errors.New(`ent: missing required field "effort_value_a"`)}
	}
	if _, ok := tpc.mutation.EffortValueB(); !ok {
		return &ValidationError{Name: "effort_value_b", err: errors.New(`ent: missing required field "effort_value_b"`)}
	}
	if _, ok := tpc.mutation.EffortValueC(); !ok {
		return &ValidationError{Name: "effort_value_c", err: errors.New(`ent: missing required field "effort_value_c"`)}
	}
	if _, ok := tpc.mutation.EffortValueD(); !ok {
		return &ValidationError{Name: "effort_value_d", err: errors.New(`ent: missing required field "effort_value_d"`)}
	}
	if _, ok := tpc.mutation.EffortValueS(); !ok {
		return &ValidationError{Name: "effort_value_s", err: errors.New(`ent: missing required field "effort_value_s"`)}
	}
	if _, ok := tpc.mutation.UsePokemonID(); !ok {
		return &ValidationError{Name: "use_pokemon", err: errors.New("ent: missing required edge \"use_pokemon\"")}
	}
	return nil
}

func (tpc *TrainedPokemonsCreate) sqlSave(ctx context.Context) (*TrainedPokemons, error) {
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tpc *TrainedPokemonsCreate) createSpec() (*TrainedPokemons, *sqlgraph.CreateSpec) {
	var (
		_node = &TrainedPokemons{config: tpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: trainedpokemons.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trainedpokemons.FieldID,
			},
		}
	)
	if value, ok := tpc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: trainedpokemons.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := tpc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: trainedpokemons.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := tpc.mutation.Nature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemons.FieldNature,
		})
		_node.Nature = value
	}
	if value, ok := tpc.mutation.EffortValueH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueH,
		})
		_node.EffortValueH = value
	}
	if value, ok := tpc.mutation.EffortValueA(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueA,
		})
		_node.EffortValueA = value
	}
	if value, ok := tpc.mutation.EffortValueB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueB,
		})
		_node.EffortValueB = value
	}
	if value, ok := tpc.mutation.EffortValueC(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueC,
		})
		_node.EffortValueC = value
	}
	if value, ok := tpc.mutation.EffortValueD(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueD,
		})
		_node.EffortValueD = value
	}
	if value, ok := tpc.mutation.EffortValueS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueS,
		})
		_node.EffortValueS = value
	}
	if nodes := tpc.mutation.UsePokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.UsePokemonTable,
			Columns: []string{trainedpokemons.UsePokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PokemonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpc.mutation.TrainingUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.TrainingUserTable,
			Columns: []string{trainedpokemons.TrainingUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreateUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrainedPokemonsCreateBulk is the builder for creating many TrainedPokemons entities in bulk.
type TrainedPokemonsCreateBulk struct {
	config
	builders []*TrainedPokemonsCreate
}

// Save creates the TrainedPokemons entities in the database.
func (tpcb *TrainedPokemonsCreateBulk) Save(ctx context.Context) ([]*TrainedPokemons, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TrainedPokemons, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrainedPokemonsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TrainedPokemonsCreateBulk) SaveX(ctx context.Context) []*TrainedPokemons {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TrainedPokemonsCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TrainedPokemonsCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
