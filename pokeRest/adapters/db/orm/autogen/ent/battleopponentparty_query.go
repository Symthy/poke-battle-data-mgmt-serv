// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battleopponentparty"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battlerecords"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
)

// BattleOpponentPartyQuery is the builder for querying BattleOpponentParty entities.
type BattleOpponentPartyQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.BattleOpponentParty
	// eager-loading edges.
	withBattleContent *BattleRecordsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BattleOpponentPartyQuery builder.
func (bopq *BattleOpponentPartyQuery) Where(ps ...predicate.BattleOpponentParty) *BattleOpponentPartyQuery {
	bopq.predicates = append(bopq.predicates, ps...)
	return bopq
}

// Limit adds a limit step to the query.
func (bopq *BattleOpponentPartyQuery) Limit(limit int) *BattleOpponentPartyQuery {
	bopq.limit = &limit
	return bopq
}

// Offset adds an offset step to the query.
func (bopq *BattleOpponentPartyQuery) Offset(offset int) *BattleOpponentPartyQuery {
	bopq.offset = &offset
	return bopq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bopq *BattleOpponentPartyQuery) Unique(unique bool) *BattleOpponentPartyQuery {
	bopq.unique = &unique
	return bopq
}

// Order adds an order step to the query.
func (bopq *BattleOpponentPartyQuery) Order(o ...OrderFunc) *BattleOpponentPartyQuery {
	bopq.order = append(bopq.order, o...)
	return bopq
}

// QueryBattleContent chains the current query on the "battle_content" edge.
func (bopq *BattleOpponentPartyQuery) QueryBattleContent() *BattleRecordsQuery {
	query := &BattleRecordsQuery{config: bopq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bopq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bopq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(battleopponentparty.Table, battleopponentparty.FieldID, selector),
			sqlgraph.To(battlerecords.Table, battlerecords.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, battleopponentparty.BattleContentTable, battleopponentparty.BattleContentColumn),
		)
		fromU = sqlgraph.SetNeighbors(bopq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BattleOpponentParty entity from the query.
// Returns a *NotFoundError when no BattleOpponentParty was found.
func (bopq *BattleOpponentPartyQuery) First(ctx context.Context) (*BattleOpponentParty, error) {
	nodes, err := bopq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{battleopponentparty.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bopq *BattleOpponentPartyQuery) FirstX(ctx context.Context) *BattleOpponentParty {
	node, err := bopq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BattleOpponentParty ID from the query.
// Returns a *NotFoundError when no BattleOpponentParty ID was found.
func (bopq *BattleOpponentPartyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bopq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{battleopponentparty.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bopq *BattleOpponentPartyQuery) FirstIDX(ctx context.Context) int {
	id, err := bopq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BattleOpponentParty entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one BattleOpponentParty entity is not found.
// Returns a *NotFoundError when no BattleOpponentParty entities are found.
func (bopq *BattleOpponentPartyQuery) Only(ctx context.Context) (*BattleOpponentParty, error) {
	nodes, err := bopq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{battleopponentparty.Label}
	default:
		return nil, &NotSingularError{battleopponentparty.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bopq *BattleOpponentPartyQuery) OnlyX(ctx context.Context) *BattleOpponentParty {
	node, err := bopq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BattleOpponentParty ID in the query.
// Returns a *NotSingularError when exactly one BattleOpponentParty ID is not found.
// Returns a *NotFoundError when no entities are found.
func (bopq *BattleOpponentPartyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bopq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = &NotSingularError{battleopponentparty.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bopq *BattleOpponentPartyQuery) OnlyIDX(ctx context.Context) int {
	id, err := bopq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BattleOpponentParties.
func (bopq *BattleOpponentPartyQuery) All(ctx context.Context) ([]*BattleOpponentParty, error) {
	if err := bopq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bopq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bopq *BattleOpponentPartyQuery) AllX(ctx context.Context) []*BattleOpponentParty {
	nodes, err := bopq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BattleOpponentParty IDs.
func (bopq *BattleOpponentPartyQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := bopq.Select(battleopponentparty.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bopq *BattleOpponentPartyQuery) IDsX(ctx context.Context) []int {
	ids, err := bopq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bopq *BattleOpponentPartyQuery) Count(ctx context.Context) (int, error) {
	if err := bopq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bopq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bopq *BattleOpponentPartyQuery) CountX(ctx context.Context) int {
	count, err := bopq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bopq *BattleOpponentPartyQuery) Exist(ctx context.Context) (bool, error) {
	if err := bopq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bopq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bopq *BattleOpponentPartyQuery) ExistX(ctx context.Context) bool {
	exist, err := bopq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BattleOpponentPartyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bopq *BattleOpponentPartyQuery) Clone() *BattleOpponentPartyQuery {
	if bopq == nil {
		return nil
	}
	return &BattleOpponentPartyQuery{
		config:            bopq.config,
		limit:             bopq.limit,
		offset:            bopq.offset,
		order:             append([]OrderFunc{}, bopq.order...),
		predicates:        append([]predicate.BattleOpponentParty{}, bopq.predicates...),
		withBattleContent: bopq.withBattleContent.Clone(),
		// clone intermediate query.
		sql:  bopq.sql.Clone(),
		path: bopq.path,
	}
}

// WithBattleContent tells the query-builder to eager-load the nodes that are connected to
// the "battle_content" edge. The optional arguments are used to configure the query builder of the edge.
func (bopq *BattleOpponentPartyQuery) WithBattleContent(opts ...func(*BattleRecordsQuery)) *BattleOpponentPartyQuery {
	query := &BattleRecordsQuery{config: bopq.config}
	for _, opt := range opts {
		opt(query)
	}
	bopq.withBattleContent = query
	return bopq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OpponentPokemonId1 int `json:"opponent_pokemon_id1,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BattleOpponentParty.Query().
//		GroupBy(battleopponentparty.FieldOpponentPokemonId1).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (bopq *BattleOpponentPartyQuery) GroupBy(field string, fields ...string) *BattleOpponentPartyGroupBy {
	group := &BattleOpponentPartyGroupBy{config: bopq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bopq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bopq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OpponentPokemonId1 int `json:"opponent_pokemon_id1,omitempty"`
//	}
//
//	client.BattleOpponentParty.Query().
//		Select(battleopponentparty.FieldOpponentPokemonId1).
//		Scan(ctx, &v)
//
func (bopq *BattleOpponentPartyQuery) Select(fields ...string) *BattleOpponentPartySelect {
	bopq.fields = append(bopq.fields, fields...)
	return &BattleOpponentPartySelect{BattleOpponentPartyQuery: bopq}
}

func (bopq *BattleOpponentPartyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range bopq.fields {
		if !battleopponentparty.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bopq.path != nil {
		prev, err := bopq.path(ctx)
		if err != nil {
			return err
		}
		bopq.sql = prev
	}
	return nil
}

func (bopq *BattleOpponentPartyQuery) sqlAll(ctx context.Context) ([]*BattleOpponentParty, error) {
	var (
		nodes       = []*BattleOpponentParty{}
		_spec       = bopq.querySpec()
		loadedTypes = [1]bool{
			bopq.withBattleContent != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &BattleOpponentParty{config: bopq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, bopq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := bopq.withBattleContent; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*BattleOpponentParty)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BattleContent = []*BattleRecords{}
		}
		query.Where(predicate.BattleRecords(func(s *sql.Selector) {
			s.Where(sql.InValues(battleopponentparty.BattleContentColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.BattleOpponentPartyID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "battle_opponent_party_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.BattleContent = append(node.Edges.BattleContent, n)
		}
	}

	return nodes, nil
}

func (bopq *BattleOpponentPartyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bopq.querySpec()
	return sqlgraph.CountNodes(ctx, bopq.driver, _spec)
}

func (bopq *BattleOpponentPartyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := bopq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (bopq *BattleOpponentPartyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   battleopponentparty.Table,
			Columns: battleopponentparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: battleopponentparty.FieldID,
			},
		},
		From:   bopq.sql,
		Unique: true,
	}
	if unique := bopq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := bopq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, battleopponentparty.FieldID)
		for i := range fields {
			if fields[i] != battleopponentparty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bopq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bopq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bopq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bopq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bopq *BattleOpponentPartyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bopq.driver.Dialect())
	t1 := builder.Table(battleopponentparty.Table)
	columns := bopq.fields
	if len(columns) == 0 {
		columns = battleopponentparty.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bopq.sql != nil {
		selector = bopq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range bopq.predicates {
		p(selector)
	}
	for _, p := range bopq.order {
		p(selector)
	}
	if offset := bopq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bopq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BattleOpponentPartyGroupBy is the group-by builder for BattleOpponentParty entities.
type BattleOpponentPartyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bopgb *BattleOpponentPartyGroupBy) Aggregate(fns ...AggregateFunc) *BattleOpponentPartyGroupBy {
	bopgb.fns = append(bopgb.fns, fns...)
	return bopgb
}

// Scan applies the group-by query and scans the result into the given value.
func (bopgb *BattleOpponentPartyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bopgb.path(ctx)
	if err != nil {
		return err
	}
	bopgb.sql = query
	return bopgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := bopgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (bopgb *BattleOpponentPartyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(bopgb.fields) > 1 {
		return nil, errors.New("ent: BattleOpponentPartyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := bopgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) StringsX(ctx context.Context) []string {
	v, err := bopgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bopgb *BattleOpponentPartyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bopgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = fmt.Errorf("ent: BattleOpponentPartyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) StringX(ctx context.Context) string {
	v, err := bopgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (bopgb *BattleOpponentPartyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(bopgb.fields) > 1 {
		return nil, errors.New("ent: BattleOpponentPartyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := bopgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) IntsX(ctx context.Context) []int {
	v, err := bopgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bopgb *BattleOpponentPartyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bopgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = fmt.Errorf("ent: BattleOpponentPartyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) IntX(ctx context.Context) int {
	v, err := bopgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (bopgb *BattleOpponentPartyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(bopgb.fields) > 1 {
		return nil, errors.New("ent: BattleOpponentPartyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := bopgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := bopgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bopgb *BattleOpponentPartyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bopgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = fmt.Errorf("ent: BattleOpponentPartyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := bopgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (bopgb *BattleOpponentPartyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(bopgb.fields) > 1 {
		return nil, errors.New("ent: BattleOpponentPartyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := bopgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := bopgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bopgb *BattleOpponentPartyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bopgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = fmt.Errorf("ent: BattleOpponentPartyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bopgb *BattleOpponentPartyGroupBy) BoolX(ctx context.Context) bool {
	v, err := bopgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bopgb *BattleOpponentPartyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bopgb.fields {
		if !battleopponentparty.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bopgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bopgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bopgb *BattleOpponentPartyGroupBy) sqlQuery() *sql.Selector {
	selector := bopgb.sql.Select()
	aggregation := make([]string, 0, len(bopgb.fns))
	for _, fn := range bopgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(bopgb.fields)+len(bopgb.fns))
		for _, f := range bopgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(bopgb.fields...)...)
}

// BattleOpponentPartySelect is the builder for selecting fields of BattleOpponentParty entities.
type BattleOpponentPartySelect struct {
	*BattleOpponentPartyQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (bops *BattleOpponentPartySelect) Scan(ctx context.Context, v interface{}) error {
	if err := bops.prepareQuery(ctx); err != nil {
		return err
	}
	bops.sql = bops.BattleOpponentPartyQuery.sqlQuery(ctx)
	return bops.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) ScanX(ctx context.Context, v interface{}) {
	if err := bops.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (bops *BattleOpponentPartySelect) Strings(ctx context.Context) ([]string, error) {
	if len(bops.fields) > 1 {
		return nil, errors.New("ent: BattleOpponentPartySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bops.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) StringsX(ctx context.Context) []string {
	v, err := bops.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (bops *BattleOpponentPartySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bops.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = fmt.Errorf("ent: BattleOpponentPartySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) StringX(ctx context.Context) string {
	v, err := bops.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (bops *BattleOpponentPartySelect) Ints(ctx context.Context) ([]int, error) {
	if len(bops.fields) > 1 {
		return nil, errors.New("ent: BattleOpponentPartySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bops.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) IntsX(ctx context.Context) []int {
	v, err := bops.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (bops *BattleOpponentPartySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bops.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = fmt.Errorf("ent: BattleOpponentPartySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) IntX(ctx context.Context) int {
	v, err := bops.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (bops *BattleOpponentPartySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bops.fields) > 1 {
		return nil, errors.New("ent: BattleOpponentPartySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bops.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) Float64sX(ctx context.Context) []float64 {
	v, err := bops.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (bops *BattleOpponentPartySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bops.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = fmt.Errorf("ent: BattleOpponentPartySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) Float64X(ctx context.Context) float64 {
	v, err := bops.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (bops *BattleOpponentPartySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bops.fields) > 1 {
		return nil, errors.New("ent: BattleOpponentPartySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bops.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) BoolsX(ctx context.Context) []bool {
	v, err := bops.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (bops *BattleOpponentPartySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bops.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{battleopponentparty.Label}
	default:
		err = fmt.Errorf("ent: BattleOpponentPartySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bops *BattleOpponentPartySelect) BoolX(ctx context.Context) bool {
	v, err := bops.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bops *BattleOpponentPartySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bops.sql.Query()
	if err := bops.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
