// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/forms"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// PokemonsCreate is the builder for creating a Pokemons entity.
type PokemonsCreate struct {
	config
	mutation *PokemonsMutation
	hooks    []Hook
}

// SetPokedexNo sets the "pokedex_no" field.
func (pc *PokemonsCreate) SetPokedexNo(i int) *PokemonsCreate {
	pc.mutation.SetPokedexNo(i)
	return pc
}

// SetFormNo sets the "form_no" field.
func (pc *PokemonsCreate) SetFormNo(i int) *PokemonsCreate {
	pc.mutation.SetFormNo(i)
	return pc
}

// SetFormName sets the "form_name" field.
func (pc *PokemonsCreate) SetFormName(s string) *PokemonsCreate {
	pc.mutation.SetFormName(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PokemonsCreate) SetName(s string) *PokemonsCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetEnglishName sets the "english_name" field.
func (pc *PokemonsCreate) SetEnglishName(s string) *PokemonsCreate {
	pc.mutation.SetEnglishName(s)
	return pc
}

// SetType1 sets the "type1" field.
func (pc *PokemonsCreate) SetType1(pr property.Types) *PokemonsCreate {
	pc.mutation.SetType1(pr)
	return pc
}

// SetType2 sets the "type2" field.
func (pc *PokemonsCreate) SetType2(pr property.Types) *PokemonsCreate {
	pc.mutation.SetType2(pr)
	return pc
}

// SetNillableType2 sets the "type2" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableType2(pr *property.Types) *PokemonsCreate {
	if pr != nil {
		pc.SetType2(*pr)
	}
	return pc
}

// SetAbilityId1 sets the "ability_id1" field.
func (pc *PokemonsCreate) SetAbilityId1(i int) *PokemonsCreate {
	pc.mutation.SetAbilityId1(i)
	return pc
}

// SetAbilityId2 sets the "ability_id2" field.
func (pc *PokemonsCreate) SetAbilityId2(i int) *PokemonsCreate {
	pc.mutation.SetAbilityId2(i)
	return pc
}

// SetNillableAbilityId2 sets the "ability_id2" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableAbilityId2(i *int) *PokemonsCreate {
	if i != nil {
		pc.SetAbilityId2(*i)
	}
	return pc
}

// SetHiddenAbilityID sets the "hidden_ability_id" field.
func (pc *PokemonsCreate) SetHiddenAbilityID(i int) *PokemonsCreate {
	pc.mutation.SetHiddenAbilityID(i)
	return pc
}

// SetNillableHiddenAbilityID sets the "hidden_ability_id" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableHiddenAbilityID(i *int) *PokemonsCreate {
	if i != nil {
		pc.SetHiddenAbilityID(*i)
	}
	return pc
}

// SetIsFinalEvolution sets the "is_final_evolution" field.
func (pc *PokemonsCreate) SetIsFinalEvolution(b bool) *PokemonsCreate {
	pc.mutation.SetIsFinalEvolution(b)
	return pc
}

// SetNillableIsFinalEvolution sets the "is_final_evolution" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableIsFinalEvolution(b *bool) *PokemonsCreate {
	if b != nil {
		pc.SetIsFinalEvolution(*b)
	}
	return pc
}

// SetBaseStatsH sets the "base_stats_h" field.
func (pc *PokemonsCreate) SetBaseStatsH(i int) *PokemonsCreate {
	pc.mutation.SetBaseStatsH(i)
	return pc
}

// SetNillableBaseStatsH sets the "base_stats_h" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableBaseStatsH(i *int) *PokemonsCreate {
	if i != nil {
		pc.SetBaseStatsH(*i)
	}
	return pc
}

// SetBaseStatsA sets the "base_stats_a" field.
func (pc *PokemonsCreate) SetBaseStatsA(i int) *PokemonsCreate {
	pc.mutation.SetBaseStatsA(i)
	return pc
}

// SetNillableBaseStatsA sets the "base_stats_a" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableBaseStatsA(i *int) *PokemonsCreate {
	if i != nil {
		pc.SetBaseStatsA(*i)
	}
	return pc
}

// SetBaseStatsB sets the "base_stats_b" field.
func (pc *PokemonsCreate) SetBaseStatsB(i int) *PokemonsCreate {
	pc.mutation.SetBaseStatsB(i)
	return pc
}

// SetNillableBaseStatsB sets the "base_stats_b" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableBaseStatsB(i *int) *PokemonsCreate {
	if i != nil {
		pc.SetBaseStatsB(*i)
	}
	return pc
}

// SetBaseStatsC sets the "base_stats_c" field.
func (pc *PokemonsCreate) SetBaseStatsC(i int) *PokemonsCreate {
	pc.mutation.SetBaseStatsC(i)
	return pc
}

// SetNillableBaseStatsC sets the "base_stats_c" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableBaseStatsC(i *int) *PokemonsCreate {
	if i != nil {
		pc.SetBaseStatsC(*i)
	}
	return pc
}

// SetBaseStatsD sets the "base_stats_d" field.
func (pc *PokemonsCreate) SetBaseStatsD(i int) *PokemonsCreate {
	pc.mutation.SetBaseStatsD(i)
	return pc
}

// SetNillableBaseStatsD sets the "base_stats_d" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableBaseStatsD(i *int) *PokemonsCreate {
	if i != nil {
		pc.SetBaseStatsD(*i)
	}
	return pc
}

// SetBaseStatsS sets the "base_stats_s" field.
func (pc *PokemonsCreate) SetBaseStatsS(i int) *PokemonsCreate {
	pc.mutation.SetBaseStatsS(i)
	return pc
}

// SetNillableBaseStatsS sets the "base_stats_s" field if the given value is not nil.
func (pc *PokemonsCreate) SetNillableBaseStatsS(i *int) *PokemonsCreate {
	if i != nil {
		pc.SetBaseStatsS(*i)
	}
	return pc
}

// SetAbility1ID sets the "ability1" edge to the Abilities entity by ID.
func (pc *PokemonsCreate) SetAbility1ID(id int) *PokemonsCreate {
	pc.mutation.SetAbility1ID(id)
	return pc
}

// SetAbility1 sets the "ability1" edge to the Abilities entity.
func (pc *PokemonsCreate) SetAbility1(a *Abilities) *PokemonsCreate {
	return pc.SetAbility1ID(a.ID)
}

// SetAbility2ID sets the "ability2" edge to the Abilities entity by ID.
func (pc *PokemonsCreate) SetAbility2ID(id int) *PokemonsCreate {
	pc.mutation.SetAbility2ID(id)
	return pc
}

// SetNillableAbility2ID sets the "ability2" edge to the Abilities entity by ID if the given value is not nil.
func (pc *PokemonsCreate) SetNillableAbility2ID(id *int) *PokemonsCreate {
	if id != nil {
		pc = pc.SetAbility2ID(*id)
	}
	return pc
}

// SetAbility2 sets the "ability2" edge to the Abilities entity.
func (pc *PokemonsCreate) SetAbility2(a *Abilities) *PokemonsCreate {
	return pc.SetAbility2ID(a.ID)
}

// SetHiddenAbility sets the "hidden_ability" edge to the Abilities entity.
func (pc *PokemonsCreate) SetHiddenAbility(a *Abilities) *PokemonsCreate {
	return pc.SetHiddenAbilityID(a.ID)
}

// SetFormID sets the "form" edge to the Forms entity by ID.
func (pc *PokemonsCreate) SetFormID(id int) *PokemonsCreate {
	pc.mutation.SetFormID(id)
	return pc
}

// SetForm sets the "form" edge to the Forms entity.
func (pc *PokemonsCreate) SetForm(f *Forms) *PokemonsCreate {
	return pc.SetFormID(f.ID)
}

// AddToTrainedPokemonIDs adds the "to_trained_pokemon" edge to the TrainedPokemons entity by IDs.
func (pc *PokemonsCreate) AddToTrainedPokemonIDs(ids ...int) *PokemonsCreate {
	pc.mutation.AddToTrainedPokemonIDs(ids...)
	return pc
}

// AddToTrainedPokemon adds the "to_trained_pokemon" edges to the TrainedPokemons entity.
func (pc *PokemonsCreate) AddToTrainedPokemon(t ...*TrainedPokemons) *PokemonsCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddToTrainedPokemonIDs(ids...)
}

// AddPokemonToMoveIDs adds the "pokemon_to_move" edge to the Moves entity by IDs.
func (pc *PokemonsCreate) AddPokemonToMoveIDs(ids ...int) *PokemonsCreate {
	pc.mutation.AddPokemonToMoveIDs(ids...)
	return pc
}

// AddPokemonToMove adds the "pokemon_to_move" edges to the Moves entity.
func (pc *PokemonsCreate) AddPokemonToMove(m ...*Moves) *PokemonsCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pc.AddPokemonToMoveIDs(ids...)
}

// Mutation returns the PokemonsMutation object of the builder.
func (pc *PokemonsCreate) Mutation() *PokemonsMutation {
	return pc.mutation
}

// Save creates the Pokemons in the database.
func (pc *PokemonsCreate) Save(ctx context.Context) (*Pokemons, error) {
	var (
		err  error
		node *Pokemons
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PokemonsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PokemonsCreate) SaveX(ctx context.Context) *Pokemons {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PokemonsCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PokemonsCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PokemonsCreate) defaults() {
	if _, ok := pc.mutation.IsFinalEvolution(); !ok {
		v := pokemons.DefaultIsFinalEvolution
		pc.mutation.SetIsFinalEvolution(v)
	}
	if _, ok := pc.mutation.BaseStatsH(); !ok {
		v := pokemons.DefaultBaseStatsH
		pc.mutation.SetBaseStatsH(v)
	}
	if _, ok := pc.mutation.BaseStatsA(); !ok {
		v := pokemons.DefaultBaseStatsA
		pc.mutation.SetBaseStatsA(v)
	}
	if _, ok := pc.mutation.BaseStatsB(); !ok {
		v := pokemons.DefaultBaseStatsB
		pc.mutation.SetBaseStatsB(v)
	}
	if _, ok := pc.mutation.BaseStatsC(); !ok {
		v := pokemons.DefaultBaseStatsC
		pc.mutation.SetBaseStatsC(v)
	}
	if _, ok := pc.mutation.BaseStatsD(); !ok {
		v := pokemons.DefaultBaseStatsD
		pc.mutation.SetBaseStatsD(v)
	}
	if _, ok := pc.mutation.BaseStatsS(); !ok {
		v := pokemons.DefaultBaseStatsS
		pc.mutation.SetBaseStatsS(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PokemonsCreate) check() error {
	if _, ok := pc.mutation.PokedexNo(); !ok {
		return &ValidationError{Name: "pokedex_no", err: errors.New(`ent: missing required field "pokedex_no"`)}
	}
	if v, ok := pc.mutation.PokedexNo(); ok {
		if err := pokemons.PokedexNoValidator(v); err != nil {
			return &ValidationError{Name: "pokedex_no", err: fmt.Errorf(`ent: validator failed for field "pokedex_no": %w`, err)}
		}
	}
	if _, ok := pc.mutation.FormNo(); !ok {
		return &ValidationError{Name: "form_no", err: errors.New(`ent: missing required field "form_no"`)}
	}
	if v, ok := pc.mutation.FormNo(); ok {
		if err := pokemons.FormNoValidator(v); err != nil {
			return &ValidationError{Name: "form_no", err: fmt.Errorf(`ent: validator failed for field "form_no": %w`, err)}
		}
	}
	if _, ok := pc.mutation.FormName(); !ok {
		return &ValidationError{Name: "form_name", err: errors.New(`ent: missing required field "form_name"`)}
	}
	if v, ok := pc.mutation.FormName(); ok {
		if err := pokemons.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "form_name", err: fmt.Errorf(`ent: validator failed for field "form_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := pokemons.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.EnglishName(); !ok {
		return &ValidationError{Name: "english_name", err: errors.New(`ent: missing required field "english_name"`)}
	}
	if v, ok := pc.mutation.EnglishName(); ok {
		if err := pokemons.EnglishNameValidator(v); err != nil {
			return &ValidationError{Name: "english_name", err: fmt.Errorf(`ent: validator failed for field "english_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Type1(); !ok {
		return &ValidationError{Name: "type1", err: errors.New(`ent: missing required field "type1"`)}
	}
	if v, ok := pc.mutation.Type1(); ok {
		if err := pokemons.Type1Validator(v); err != nil {
			return &ValidationError{Name: "type1", err: fmt.Errorf(`ent: validator failed for field "type1": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Type2(); ok {
		if err := pokemons.Type2Validator(v); err != nil {
			return &ValidationError{Name: "type2", err: fmt.Errorf(`ent: validator failed for field "type2": %w`, err)}
		}
	}
	if _, ok := pc.mutation.AbilityId1(); !ok {
		return &ValidationError{Name: "ability_id1", err: errors.New(`ent: missing required field "ability_id1"`)}
	}
	if v, ok := pc.mutation.AbilityId1(); ok {
		if err := pokemons.AbilityId1Validator(v); err != nil {
			return &ValidationError{Name: "ability_id1", err: fmt.Errorf(`ent: validator failed for field "ability_id1": %w`, err)}
		}
	}
	if v, ok := pc.mutation.AbilityId2(); ok {
		if err := pokemons.AbilityId2Validator(v); err != nil {
			return &ValidationError{Name: "ability_id2", err: fmt.Errorf(`ent: validator failed for field "ability_id2": %w`, err)}
		}
	}
	if v, ok := pc.mutation.HiddenAbilityID(); ok {
		if err := pokemons.HiddenAbilityIDValidator(v); err != nil {
			return &ValidationError{Name: "hidden_ability_id", err: fmt.Errorf(`ent: validator failed for field "hidden_ability_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IsFinalEvolution(); !ok {
		return &ValidationError{Name: "is_final_evolution", err: errors.New(`ent: missing required field "is_final_evolution"`)}
	}
	if _, ok := pc.mutation.BaseStatsH(); !ok {
		return &ValidationError{Name: "base_stats_h", err: errors.New(`ent: missing required field "base_stats_h"`)}
	}
	if v, ok := pc.mutation.BaseStatsH(); ok {
		if err := pokemons.BaseStatsHValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_h", err: fmt.Errorf(`ent: validator failed for field "base_stats_h": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BaseStatsA(); !ok {
		return &ValidationError{Name: "base_stats_a", err: errors.New(`ent: missing required field "base_stats_a"`)}
	}
	if v, ok := pc.mutation.BaseStatsA(); ok {
		if err := pokemons.BaseStatsAValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_a", err: fmt.Errorf(`ent: validator failed for field "base_stats_a": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BaseStatsB(); !ok {
		return &ValidationError{Name: "base_stats_b", err: errors.New(`ent: missing required field "base_stats_b"`)}
	}
	if v, ok := pc.mutation.BaseStatsB(); ok {
		if err := pokemons.BaseStatsBValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_b", err: fmt.Errorf(`ent: validator failed for field "base_stats_b": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BaseStatsC(); !ok {
		return &ValidationError{Name: "base_stats_c", err: errors.New(`ent: missing required field "base_stats_c"`)}
	}
	if v, ok := pc.mutation.BaseStatsC(); ok {
		if err := pokemons.BaseStatsCValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_c", err: fmt.Errorf(`ent: validator failed for field "base_stats_c": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BaseStatsD(); !ok {
		return &ValidationError{Name: "base_stats_d", err: errors.New(`ent: missing required field "base_stats_d"`)}
	}
	if v, ok := pc.mutation.BaseStatsD(); ok {
		if err := pokemons.BaseStatsDValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_d", err: fmt.Errorf(`ent: validator failed for field "base_stats_d": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BaseStatsS(); !ok {
		return &ValidationError{Name: "base_stats_s", err: errors.New(`ent: missing required field "base_stats_s"`)}
	}
	if v, ok := pc.mutation.BaseStatsS(); ok {
		if err := pokemons.BaseStatsSValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_s", err: fmt.Errorf(`ent: validator failed for field "base_stats_s": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Ability1ID(); !ok {
		return &ValidationError{Name: "ability1", err: errors.New("ent: missing required edge \"ability1\"")}
	}
	if _, ok := pc.mutation.FormID(); !ok {
		return &ValidationError{Name: "form", err: errors.New("ent: missing required edge \"form\"")}
	}
	return nil
}

func (pc *PokemonsCreate) sqlSave(ctx context.Context) (*Pokemons, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PokemonsCreate) createSpec() (*Pokemons, *sqlgraph.CreateSpec) {
	var (
		_node = &Pokemons{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pokemons.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pokemons.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.PokedexNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldPokedexNo,
		})
		_node.PokedexNo = value
	}
	if value, ok := pc.mutation.FormName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldFormName,
		})
		_node.FormName = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.EnglishName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldEnglishName,
		})
		_node.EnglishName = value
	}
	if value, ok := pc.mutation.Type1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pokemons.FieldType1,
		})
		_node.Type1 = value
	}
	if value, ok := pc.mutation.Type2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pokemons.FieldType2,
		})
		_node.Type2 = value
	}
	if value, ok := pc.mutation.IsFinalEvolution(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pokemons.FieldIsFinalEvolution,
		})
		_node.IsFinalEvolution = value
	}
	if value, ok := pc.mutation.BaseStatsH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsH,
		})
		_node.BaseStatsH = value
	}
	if value, ok := pc.mutation.BaseStatsA(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsA,
		})
		_node.BaseStatsA = value
	}
	if value, ok := pc.mutation.BaseStatsB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsB,
		})
		_node.BaseStatsB = value
	}
	if value, ok := pc.mutation.BaseStatsC(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsC,
		})
		_node.BaseStatsC = value
	}
	if value, ok := pc.mutation.BaseStatsD(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsD,
		})
		_node.BaseStatsD = value
	}
	if value, ok := pc.mutation.BaseStatsS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsS,
		})
		_node.BaseStatsS = value
	}
	if nodes := pc.mutation.Ability1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability1Table,
			Columns: []string{pokemons.Ability1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AbilityId1 = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.Ability2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability2Table,
			Columns: []string{pokemons.Ability2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AbilityId2 = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.HiddenAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.HiddenAbilityTable,
			Columns: []string{pokemons.HiddenAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HiddenAbilityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.FormTable,
			Columns: []string{pokemons.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: forms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FormNo = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ToTrainedPokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pokemons.ToTrainedPokemonTable,
			Columns: []string{pokemons.ToTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PokemonToMoveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pokemons.PokemonToMoveTable,
			Columns: pokemons.PokemonToMovePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PokemonsCreateBulk is the builder for creating many Pokemons entities in bulk.
type PokemonsCreateBulk struct {
	config
	builders []*PokemonsCreate
}

// Save creates the Pokemons entities in the database.
func (pcb *PokemonsCreateBulk) Save(ctx context.Context) ([]*Pokemons, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pokemons, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PokemonsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PokemonsCreateBulk) SaveX(ctx context.Context) []*Pokemons {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PokemonsCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PokemonsCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
