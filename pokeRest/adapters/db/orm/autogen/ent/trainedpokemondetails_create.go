// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/helditems"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// TrainedPokemonDetailsCreate is the builder for creating a TrainedPokemonDetails entity.
type TrainedPokemonDetailsCreate struct {
	config
	mutation *TrainedPokemonDetailsMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tpdc *TrainedPokemonDetailsCreate) SetCreateTime(t time.Time) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetCreateTime(t)
	return tpdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableCreateTime(t *time.Time) *TrainedPokemonDetailsCreate {
	if t != nil {
		tpdc.SetCreateTime(*t)
	}
	return tpdc
}

// SetUpdateTime sets the "update_time" field.
func (tpdc *TrainedPokemonDetailsCreate) SetUpdateTime(t time.Time) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetUpdateTime(t)
	return tpdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableUpdateTime(t *time.Time) *TrainedPokemonDetailsCreate {
	if t != nil {
		tpdc.SetUpdateTime(*t)
	}
	return tpdc
}

// SetNickname sets the "nickname" field.
func (tpdc *TrainedPokemonDetailsCreate) SetNickname(s string) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetNickname(s)
	return tpdc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableNickname(s *string) *TrainedPokemonDetailsCreate {
	if s != nil {
		tpdc.SetNickname(*s)
	}
	return tpdc
}

// SetGender sets the "gender" field.
func (tpdc *TrainedPokemonDetailsCreate) SetGender(pr property.Gender) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetGender(pr)
	return tpdc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableGender(pr *property.Gender) *TrainedPokemonDetailsCreate {
	if pr != nil {
		tpdc.SetGender(*pr)
	}
	return tpdc
}

// SetAbilityID sets the "ability_id" field.
func (tpdc *TrainedPokemonDetailsCreate) SetAbilityID(i int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetAbilityID(i)
	return tpdc
}

// SetHeldItemID sets the "held_item_id" field.
func (tpdc *TrainedPokemonDetailsCreate) SetHeldItemID(i int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetHeldItemID(i)
	return tpdc
}

// SetMoveId1 sets the "move_id1" field.
func (tpdc *TrainedPokemonDetailsCreate) SetMoveId1(i int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetMoveId1(i)
	return tpdc
}

// SetMoveId2 sets the "move_id2" field.
func (tpdc *TrainedPokemonDetailsCreate) SetMoveId2(i int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetMoveId2(i)
	return tpdc
}

// SetNillableMoveId2 sets the "move_id2" field if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableMoveId2(i *int) *TrainedPokemonDetailsCreate {
	if i != nil {
		tpdc.SetMoveId2(*i)
	}
	return tpdc
}

// SetMoveId3 sets the "move_id3" field.
func (tpdc *TrainedPokemonDetailsCreate) SetMoveId3(i int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetMoveId3(i)
	return tpdc
}

// SetNillableMoveId3 sets the "move_id3" field if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableMoveId3(i *int) *TrainedPokemonDetailsCreate {
	if i != nil {
		tpdc.SetMoveId3(*i)
	}
	return tpdc
}

// SetMoveId4 sets the "move_id4" field.
func (tpdc *TrainedPokemonDetailsCreate) SetMoveId4(i int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetMoveId4(i)
	return tpdc
}

// SetNillableMoveId4 sets the "move_id4" field if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableMoveId4(i *int) *TrainedPokemonDetailsCreate {
	if i != nil {
		tpdc.SetMoveId4(*i)
	}
	return tpdc
}

// SetUserID sets the "user_id" field.
func (tpdc *TrainedPokemonDetailsCreate) SetUserID(i int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetUserID(i)
	return tpdc
}

// SetUseAbilityID sets the "use_ability" edge to the Abilities entity by ID.
func (tpdc *TrainedPokemonDetailsCreate) SetUseAbilityID(id int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetUseAbilityID(id)
	return tpdc
}

// SetUseAbility sets the "use_ability" edge to the Abilities entity.
func (tpdc *TrainedPokemonDetailsCreate) SetUseAbility(a *Abilities) *TrainedPokemonDetailsCreate {
	return tpdc.SetUseAbilityID(a.ID)
}

// SetUseHeldItemID sets the "use_held_item" edge to the HeldItems entity by ID.
func (tpdc *TrainedPokemonDetailsCreate) SetUseHeldItemID(id int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetUseHeldItemID(id)
	return tpdc
}

// SetUseHeldItem sets the "use_held_item" edge to the HeldItems entity.
func (tpdc *TrainedPokemonDetailsCreate) SetUseHeldItem(h *HeldItems) *TrainedPokemonDetailsCreate {
	return tpdc.SetUseHeldItemID(h.ID)
}

// SetUseMove1ID sets the "use_move1" edge to the Moves entity by ID.
func (tpdc *TrainedPokemonDetailsCreate) SetUseMove1ID(id int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetUseMove1ID(id)
	return tpdc
}

// SetUseMove1 sets the "use_move1" edge to the Moves entity.
func (tpdc *TrainedPokemonDetailsCreate) SetUseMove1(m *Moves) *TrainedPokemonDetailsCreate {
	return tpdc.SetUseMove1ID(m.ID)
}

// SetUseMove2ID sets the "use_move2" edge to the Moves entity by ID.
func (tpdc *TrainedPokemonDetailsCreate) SetUseMove2ID(id int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetUseMove2ID(id)
	return tpdc
}

// SetNillableUseMove2ID sets the "use_move2" edge to the Moves entity by ID if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableUseMove2ID(id *int) *TrainedPokemonDetailsCreate {
	if id != nil {
		tpdc = tpdc.SetUseMove2ID(*id)
	}
	return tpdc
}

// SetUseMove2 sets the "use_move2" edge to the Moves entity.
func (tpdc *TrainedPokemonDetailsCreate) SetUseMove2(m *Moves) *TrainedPokemonDetailsCreate {
	return tpdc.SetUseMove2ID(m.ID)
}

// SetUseMove3ID sets the "use_move3" edge to the Moves entity by ID.
func (tpdc *TrainedPokemonDetailsCreate) SetUseMove3ID(id int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetUseMove3ID(id)
	return tpdc
}

// SetNillableUseMove3ID sets the "use_move3" edge to the Moves entity by ID if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableUseMove3ID(id *int) *TrainedPokemonDetailsCreate {
	if id != nil {
		tpdc = tpdc.SetUseMove3ID(*id)
	}
	return tpdc
}

// SetUseMove3 sets the "use_move3" edge to the Moves entity.
func (tpdc *TrainedPokemonDetailsCreate) SetUseMove3(m *Moves) *TrainedPokemonDetailsCreate {
	return tpdc.SetUseMove3ID(m.ID)
}

// SetUseMove4ID sets the "use_move4" edge to the Moves entity by ID.
func (tpdc *TrainedPokemonDetailsCreate) SetUseMove4ID(id int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetUseMove4ID(id)
	return tpdc
}

// SetNillableUseMove4ID sets the "use_move4" edge to the Moves entity by ID if the given value is not nil.
func (tpdc *TrainedPokemonDetailsCreate) SetNillableUseMove4ID(id *int) *TrainedPokemonDetailsCreate {
	if id != nil {
		tpdc = tpdc.SetUseMove4ID(*id)
	}
	return tpdc
}

// SetUseMove4 sets the "use_move4" edge to the Moves entity.
func (tpdc *TrainedPokemonDetailsCreate) SetUseMove4(m *Moves) *TrainedPokemonDetailsCreate {
	return tpdc.SetUseMove4ID(m.ID)
}

// SetTrainingDetailUserID sets the "training_detail_user" edge to the Users entity by ID.
func (tpdc *TrainedPokemonDetailsCreate) SetTrainingDetailUserID(id int) *TrainedPokemonDetailsCreate {
	tpdc.mutation.SetTrainingDetailUserID(id)
	return tpdc
}

// SetTrainingDetailUser sets the "training_detail_user" edge to the Users entity.
func (tpdc *TrainedPokemonDetailsCreate) SetTrainingDetailUser(u *Users) *TrainedPokemonDetailsCreate {
	return tpdc.SetTrainingDetailUserID(u.ID)
}

// Mutation returns the TrainedPokemonDetailsMutation object of the builder.
func (tpdc *TrainedPokemonDetailsCreate) Mutation() *TrainedPokemonDetailsMutation {
	return tpdc.mutation
}

// Save creates the TrainedPokemonDetails in the database.
func (tpdc *TrainedPokemonDetailsCreate) Save(ctx context.Context) (*TrainedPokemonDetails, error) {
	var (
		err  error
		node *TrainedPokemonDetails
	)
	tpdc.defaults()
	if len(tpdc.hooks) == 0 {
		if err = tpdc.check(); err != nil {
			return nil, err
		}
		node, err = tpdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrainedPokemonDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpdc.check(); err != nil {
				return nil, err
			}
			tpdc.mutation = mutation
			if node, err = tpdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tpdc.hooks) - 1; i >= 0; i-- {
			if tpdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tpdc *TrainedPokemonDetailsCreate) SaveX(ctx context.Context) *TrainedPokemonDetails {
	v, err := tpdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpdc *TrainedPokemonDetailsCreate) Exec(ctx context.Context) error {
	_, err := tpdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpdc *TrainedPokemonDetailsCreate) ExecX(ctx context.Context) {
	if err := tpdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpdc *TrainedPokemonDetailsCreate) defaults() {
	if _, ok := tpdc.mutation.CreateTime(); !ok {
		v := trainedpokemondetails.DefaultCreateTime()
		tpdc.mutation.SetCreateTime(v)
	}
	if _, ok := tpdc.mutation.UpdateTime(); !ok {
		v := trainedpokemondetails.DefaultUpdateTime()
		tpdc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpdc *TrainedPokemonDetailsCreate) check() error {
	if _, ok := tpdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := tpdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := tpdc.mutation.AbilityID(); !ok {
		return &ValidationError{Name: "ability_id", err: errors.New(`ent: missing required field "ability_id"`)}
	}
	if v, ok := tpdc.mutation.AbilityID(); ok {
		if err := trainedpokemondetails.AbilityIDValidator(v); err != nil {
			return &ValidationError{Name: "ability_id", err: fmt.Errorf(`ent: validator failed for field "ability_id": %w`, err)}
		}
	}
	if _, ok := tpdc.mutation.HeldItemID(); !ok {
		return &ValidationError{Name: "held_item_id", err: errors.New(`ent: missing required field "held_item_id"`)}
	}
	if v, ok := tpdc.mutation.HeldItemID(); ok {
		if err := trainedpokemondetails.HeldItemIDValidator(v); err != nil {
			return &ValidationError{Name: "held_item_id", err: fmt.Errorf(`ent: validator failed for field "held_item_id": %w`, err)}
		}
	}
	if _, ok := tpdc.mutation.MoveId1(); !ok {
		return &ValidationError{Name: "move_id1", err: errors.New(`ent: missing required field "move_id1"`)}
	}
	if v, ok := tpdc.mutation.MoveId1(); ok {
		if err := trainedpokemondetails.MoveId1Validator(v); err != nil {
			return &ValidationError{Name: "move_id1", err: fmt.Errorf(`ent: validator failed for field "move_id1": %w`, err)}
		}
	}
	if v, ok := tpdc.mutation.MoveId2(); ok {
		if err := trainedpokemondetails.MoveId2Validator(v); err != nil {
			return &ValidationError{Name: "move_id2", err: fmt.Errorf(`ent: validator failed for field "move_id2": %w`, err)}
		}
	}
	if v, ok := tpdc.mutation.MoveId3(); ok {
		if err := trainedpokemondetails.MoveId3Validator(v); err != nil {
			return &ValidationError{Name: "move_id3", err: fmt.Errorf(`ent: validator failed for field "move_id3": %w`, err)}
		}
	}
	if v, ok := tpdc.mutation.MoveId4(); ok {
		if err := trainedpokemondetails.MoveId4Validator(v); err != nil {
			return &ValidationError{Name: "move_id4", err: fmt.Errorf(`ent: validator failed for field "move_id4": %w`, err)}
		}
	}
	if _, ok := tpdc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if v, ok := tpdc.mutation.UserID(); ok {
		if err := trainedpokemondetails.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "user_id": %w`, err)}
		}
	}
	if _, ok := tpdc.mutation.UseAbilityID(); !ok {
		return &ValidationError{Name: "use_ability", err: errors.New("ent: missing required edge \"use_ability\"")}
	}
	if _, ok := tpdc.mutation.UseHeldItemID(); !ok {
		return &ValidationError{Name: "use_held_item", err: errors.New("ent: missing required edge \"use_held_item\"")}
	}
	if _, ok := tpdc.mutation.UseMove1ID(); !ok {
		return &ValidationError{Name: "use_move1", err: errors.New("ent: missing required edge \"use_move1\"")}
	}
	if _, ok := tpdc.mutation.TrainingDetailUserID(); !ok {
		return &ValidationError{Name: "training_detail_user", err: errors.New("ent: missing required edge \"training_detail_user\"")}
	}
	return nil
}

func (tpdc *TrainedPokemonDetailsCreate) sqlSave(ctx context.Context) (*TrainedPokemonDetails, error) {
	_node, _spec := tpdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tpdc *TrainedPokemonDetailsCreate) createSpec() (*TrainedPokemonDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &TrainedPokemonDetails{config: tpdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: trainedpokemondetails.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trainedpokemondetails.FieldID,
			},
		}
	)
	if value, ok := tpdc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: trainedpokemondetails.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := tpdc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: trainedpokemondetails.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := tpdc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemondetails.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := tpdc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemondetails.FieldGender,
		})
		_node.Gender = value
	}
	if nodes := tpdc.mutation.UseAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseAbilityTable,
			Columns: []string{trainedpokemondetails.UseAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AbilityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpdc.mutation.UseHeldItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseHeldItemTable,
			Columns: []string{trainedpokemondetails.UseHeldItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helditems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HeldItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpdc.mutation.UseMove1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove1Table,
			Columns: []string{trainedpokemondetails.UseMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MoveId1 = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpdc.mutation.UseMove2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove2Table,
			Columns: []string{trainedpokemondetails.UseMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MoveId2 = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpdc.mutation.UseMove3IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove3Table,
			Columns: []string{trainedpokemondetails.UseMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MoveId3 = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpdc.mutation.UseMove4IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove4Table,
			Columns: []string{trainedpokemondetails.UseMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MoveId4 = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpdc.mutation.TrainingDetailUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.TrainingDetailUserTable,
			Columns: []string{trainedpokemondetails.TrainingDetailUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrainedPokemonDetailsCreateBulk is the builder for creating many TrainedPokemonDetails entities in bulk.
type TrainedPokemonDetailsCreateBulk struct {
	config
	builders []*TrainedPokemonDetailsCreate
}

// Save creates the TrainedPokemonDetails entities in the database.
func (tpdcb *TrainedPokemonDetailsCreateBulk) Save(ctx context.Context) ([]*TrainedPokemonDetails, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tpdcb.builders))
	nodes := make([]*TrainedPokemonDetails, len(tpdcb.builders))
	mutators := make([]Mutator, len(tpdcb.builders))
	for i := range tpdcb.builders {
		func(i int, root context.Context) {
			builder := tpdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrainedPokemonDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpdcb *TrainedPokemonDetailsCreateBulk) SaveX(ctx context.Context) []*TrainedPokemonDetails {
	v, err := tpdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpdcb *TrainedPokemonDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := tpdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpdcb *TrainedPokemonDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := tpdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
