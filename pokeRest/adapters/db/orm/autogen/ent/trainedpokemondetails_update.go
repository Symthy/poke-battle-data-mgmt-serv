// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/helditems"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// TrainedPokemonDetailsUpdate is the builder for updating TrainedPokemonDetails entities.
type TrainedPokemonDetailsUpdate struct {
	config
	hooks    []Hook
	mutation *TrainedPokemonDetailsMutation
}

// Where appends a list predicates to the TrainedPokemonDetailsUpdate builder.
func (tpdu *TrainedPokemonDetailsUpdate) Where(ps ...predicate.TrainedPokemonDetails) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.Where(ps...)
	return tpdu
}

// SetNickname sets the "nickname" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetNickname(s string) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetNickname(s)
	return tpdu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (tpdu *TrainedPokemonDetailsUpdate) SetNillableNickname(s *string) *TrainedPokemonDetailsUpdate {
	if s != nil {
		tpdu.SetNickname(*s)
	}
	return tpdu
}

// ClearNickname clears the value of the "nickname" field.
func (tpdu *TrainedPokemonDetailsUpdate) ClearNickname() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearNickname()
	return tpdu
}

// SetGender sets the "gender" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetGender(pr property.Gender) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetGender(pr)
	return tpdu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (tpdu *TrainedPokemonDetailsUpdate) SetNillableGender(pr *property.Gender) *TrainedPokemonDetailsUpdate {
	if pr != nil {
		tpdu.SetGender(*pr)
	}
	return tpdu
}

// ClearGender clears the value of the "gender" field.
func (tpdu *TrainedPokemonDetailsUpdate) ClearGender() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearGender()
	return tpdu
}

// SetAbilityID sets the "ability_id" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetAbilityID(i int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetAbilityID(i)
	return tpdu
}

// SetHeldItemID sets the "held_item_id" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetHeldItemID(i int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetHeldItemID(i)
	return tpdu
}

// SetMoveId1 sets the "move_id1" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetMoveId1(i int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetMoveId1(i)
	return tpdu
}

// SetMoveId2 sets the "move_id2" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetMoveId2(i int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetMoveId2(i)
	return tpdu
}

// SetNillableMoveId2 sets the "move_id2" field if the given value is not nil.
func (tpdu *TrainedPokemonDetailsUpdate) SetNillableMoveId2(i *int) *TrainedPokemonDetailsUpdate {
	if i != nil {
		tpdu.SetMoveId2(*i)
	}
	return tpdu
}

// ClearMoveId2 clears the value of the "move_id2" field.
func (tpdu *TrainedPokemonDetailsUpdate) ClearMoveId2() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearMoveId2()
	return tpdu
}

// SetMoveId3 sets the "move_id3" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetMoveId3(i int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetMoveId3(i)
	return tpdu
}

// SetNillableMoveId3 sets the "move_id3" field if the given value is not nil.
func (tpdu *TrainedPokemonDetailsUpdate) SetNillableMoveId3(i *int) *TrainedPokemonDetailsUpdate {
	if i != nil {
		tpdu.SetMoveId3(*i)
	}
	return tpdu
}

// ClearMoveId3 clears the value of the "move_id3" field.
func (tpdu *TrainedPokemonDetailsUpdate) ClearMoveId3() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearMoveId3()
	return tpdu
}

// SetMoveId4 sets the "move_id4" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetMoveId4(i int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetMoveId4(i)
	return tpdu
}

// SetNillableMoveId4 sets the "move_id4" field if the given value is not nil.
func (tpdu *TrainedPokemonDetailsUpdate) SetNillableMoveId4(i *int) *TrainedPokemonDetailsUpdate {
	if i != nil {
		tpdu.SetMoveId4(*i)
	}
	return tpdu
}

// ClearMoveId4 clears the value of the "move_id4" field.
func (tpdu *TrainedPokemonDetailsUpdate) ClearMoveId4() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearMoveId4()
	return tpdu
}

// SetUserID sets the "user_id" field.
func (tpdu *TrainedPokemonDetailsUpdate) SetUserID(i int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetUserID(i)
	return tpdu
}

// SetUseAbilityID sets the "use_ability" edge to the Abilities entity by ID.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseAbilityID(id int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetUseAbilityID(id)
	return tpdu
}

// SetUseAbility sets the "use_ability" edge to the Abilities entity.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseAbility(a *Abilities) *TrainedPokemonDetailsUpdate {
	return tpdu.SetUseAbilityID(a.ID)
}

// SetUseHeldItemID sets the "use_held_item" edge to the HeldItems entity by ID.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseHeldItemID(id int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetUseHeldItemID(id)
	return tpdu
}

// SetUseHeldItem sets the "use_held_item" edge to the HeldItems entity.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseHeldItem(h *HeldItems) *TrainedPokemonDetailsUpdate {
	return tpdu.SetUseHeldItemID(h.ID)
}

// SetUseMove1ID sets the "use_move1" edge to the Moves entity by ID.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseMove1ID(id int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetUseMove1ID(id)
	return tpdu
}

// SetUseMove1 sets the "use_move1" edge to the Moves entity.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseMove1(m *Moves) *TrainedPokemonDetailsUpdate {
	return tpdu.SetUseMove1ID(m.ID)
}

// SetUseMove2ID sets the "use_move2" edge to the Moves entity by ID.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseMove2ID(id int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetUseMove2ID(id)
	return tpdu
}

// SetNillableUseMove2ID sets the "use_move2" edge to the Moves entity by ID if the given value is not nil.
func (tpdu *TrainedPokemonDetailsUpdate) SetNillableUseMove2ID(id *int) *TrainedPokemonDetailsUpdate {
	if id != nil {
		tpdu = tpdu.SetUseMove2ID(*id)
	}
	return tpdu
}

// SetUseMove2 sets the "use_move2" edge to the Moves entity.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseMove2(m *Moves) *TrainedPokemonDetailsUpdate {
	return tpdu.SetUseMove2ID(m.ID)
}

// SetUseMove3ID sets the "use_move3" edge to the Moves entity by ID.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseMove3ID(id int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetUseMove3ID(id)
	return tpdu
}

// SetNillableUseMove3ID sets the "use_move3" edge to the Moves entity by ID if the given value is not nil.
func (tpdu *TrainedPokemonDetailsUpdate) SetNillableUseMove3ID(id *int) *TrainedPokemonDetailsUpdate {
	if id != nil {
		tpdu = tpdu.SetUseMove3ID(*id)
	}
	return tpdu
}

// SetUseMove3 sets the "use_move3" edge to the Moves entity.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseMove3(m *Moves) *TrainedPokemonDetailsUpdate {
	return tpdu.SetUseMove3ID(m.ID)
}

// SetUseMove4ID sets the "use_move4" edge to the Moves entity by ID.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseMove4ID(id int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetUseMove4ID(id)
	return tpdu
}

// SetNillableUseMove4ID sets the "use_move4" edge to the Moves entity by ID if the given value is not nil.
func (tpdu *TrainedPokemonDetailsUpdate) SetNillableUseMove4ID(id *int) *TrainedPokemonDetailsUpdate {
	if id != nil {
		tpdu = tpdu.SetUseMove4ID(*id)
	}
	return tpdu
}

// SetUseMove4 sets the "use_move4" edge to the Moves entity.
func (tpdu *TrainedPokemonDetailsUpdate) SetUseMove4(m *Moves) *TrainedPokemonDetailsUpdate {
	return tpdu.SetUseMove4ID(m.ID)
}

// SetTrainingDetailUserID sets the "training_detail_user" edge to the Users entity by ID.
func (tpdu *TrainedPokemonDetailsUpdate) SetTrainingDetailUserID(id int) *TrainedPokemonDetailsUpdate {
	tpdu.mutation.SetTrainingDetailUserID(id)
	return tpdu
}

// SetTrainingDetailUser sets the "training_detail_user" edge to the Users entity.
func (tpdu *TrainedPokemonDetailsUpdate) SetTrainingDetailUser(u *Users) *TrainedPokemonDetailsUpdate {
	return tpdu.SetTrainingDetailUserID(u.ID)
}

// Mutation returns the TrainedPokemonDetailsMutation object of the builder.
func (tpdu *TrainedPokemonDetailsUpdate) Mutation() *TrainedPokemonDetailsMutation {
	return tpdu.mutation
}

// ClearUseAbility clears the "use_ability" edge to the Abilities entity.
func (tpdu *TrainedPokemonDetailsUpdate) ClearUseAbility() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearUseAbility()
	return tpdu
}

// ClearUseHeldItem clears the "use_held_item" edge to the HeldItems entity.
func (tpdu *TrainedPokemonDetailsUpdate) ClearUseHeldItem() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearUseHeldItem()
	return tpdu
}

// ClearUseMove1 clears the "use_move1" edge to the Moves entity.
func (tpdu *TrainedPokemonDetailsUpdate) ClearUseMove1() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearUseMove1()
	return tpdu
}

// ClearUseMove2 clears the "use_move2" edge to the Moves entity.
func (tpdu *TrainedPokemonDetailsUpdate) ClearUseMove2() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearUseMove2()
	return tpdu
}

// ClearUseMove3 clears the "use_move3" edge to the Moves entity.
func (tpdu *TrainedPokemonDetailsUpdate) ClearUseMove3() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearUseMove3()
	return tpdu
}

// ClearUseMove4 clears the "use_move4" edge to the Moves entity.
func (tpdu *TrainedPokemonDetailsUpdate) ClearUseMove4() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearUseMove4()
	return tpdu
}

// ClearTrainingDetailUser clears the "training_detail_user" edge to the Users entity.
func (tpdu *TrainedPokemonDetailsUpdate) ClearTrainingDetailUser() *TrainedPokemonDetailsUpdate {
	tpdu.mutation.ClearTrainingDetailUser()
	return tpdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpdu *TrainedPokemonDetailsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tpdu.defaults()
	if len(tpdu.hooks) == 0 {
		if err = tpdu.check(); err != nil {
			return 0, err
		}
		affected, err = tpdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrainedPokemonDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpdu.check(); err != nil {
				return 0, err
			}
			tpdu.mutation = mutation
			affected, err = tpdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpdu.hooks) - 1; i >= 0; i-- {
			if tpdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpdu *TrainedPokemonDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := tpdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpdu *TrainedPokemonDetailsUpdate) Exec(ctx context.Context) error {
	_, err := tpdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpdu *TrainedPokemonDetailsUpdate) ExecX(ctx context.Context) {
	if err := tpdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpdu *TrainedPokemonDetailsUpdate) defaults() {
	if _, ok := tpdu.mutation.UpdateTime(); !ok {
		v := trainedpokemondetails.UpdateDefaultUpdateTime()
		tpdu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpdu *TrainedPokemonDetailsUpdate) check() error {
	if v, ok := tpdu.mutation.AbilityID(); ok {
		if err := trainedpokemondetails.AbilityIDValidator(v); err != nil {
			return &ValidationError{Name: "ability_id", err: fmt.Errorf("ent: validator failed for field \"ability_id\": %w", err)}
		}
	}
	if v, ok := tpdu.mutation.HeldItemID(); ok {
		if err := trainedpokemondetails.HeldItemIDValidator(v); err != nil {
			return &ValidationError{Name: "held_item_id", err: fmt.Errorf("ent: validator failed for field \"held_item_id\": %w", err)}
		}
	}
	if v, ok := tpdu.mutation.MoveId1(); ok {
		if err := trainedpokemondetails.MoveId1Validator(v); err != nil {
			return &ValidationError{Name: "move_id1", err: fmt.Errorf("ent: validator failed for field \"move_id1\": %w", err)}
		}
	}
	if v, ok := tpdu.mutation.MoveId2(); ok {
		if err := trainedpokemondetails.MoveId2Validator(v); err != nil {
			return &ValidationError{Name: "move_id2", err: fmt.Errorf("ent: validator failed for field \"move_id2\": %w", err)}
		}
	}
	if v, ok := tpdu.mutation.MoveId3(); ok {
		if err := trainedpokemondetails.MoveId3Validator(v); err != nil {
			return &ValidationError{Name: "move_id3", err: fmt.Errorf("ent: validator failed for field \"move_id3\": %w", err)}
		}
	}
	if v, ok := tpdu.mutation.MoveId4(); ok {
		if err := trainedpokemondetails.MoveId4Validator(v); err != nil {
			return &ValidationError{Name: "move_id4", err: fmt.Errorf("ent: validator failed for field \"move_id4\": %w", err)}
		}
	}
	if v, ok := tpdu.mutation.UserID(); ok {
		if err := trainedpokemondetails.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf("ent: validator failed for field \"user_id\": %w", err)}
		}
	}
	if _, ok := tpdu.mutation.UseAbilityID(); tpdu.mutation.UseAbilityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"use_ability\"")
	}
	if _, ok := tpdu.mutation.UseHeldItemID(); tpdu.mutation.UseHeldItemCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"use_held_item\"")
	}
	if _, ok := tpdu.mutation.UseMove1ID(); tpdu.mutation.UseMove1Cleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"use_move1\"")
	}
	if _, ok := tpdu.mutation.TrainingDetailUserID(); tpdu.mutation.TrainingDetailUserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"training_detail_user\"")
	}
	return nil
}

func (tpdu *TrainedPokemonDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   trainedpokemondetails.Table,
			Columns: trainedpokemondetails.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trainedpokemondetails.FieldID,
			},
		},
	}
	if ps := tpdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: trainedpokemondetails.FieldUpdateTime,
		})
	}
	if value, ok := tpdu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemondetails.FieldNickname,
		})
	}
	if tpdu.mutation.NicknameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: trainedpokemondetails.FieldNickname,
		})
	}
	if value, ok := tpdu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemondetails.FieldGender,
		})
	}
	if tpdu.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: trainedpokemondetails.FieldGender,
		})
	}
	if tpdu.mutation.UseAbilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseAbilityTable,
			Columns: []string{trainedpokemondetails.UseAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpdu.mutation.UseAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseAbilityTable,
			Columns: []string{trainedpokemondetails.UseAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpdu.mutation.UseHeldItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseHeldItemTable,
			Columns: []string{trainedpokemondetails.UseHeldItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helditems.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpdu.mutation.UseHeldItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseHeldItemTable,
			Columns: []string{trainedpokemondetails.UseHeldItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helditems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpdu.mutation.UseMove1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove1Table,
			Columns: []string{trainedpokemondetails.UseMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpdu.mutation.UseMove1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove1Table,
			Columns: []string{trainedpokemondetails.UseMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpdu.mutation.UseMove2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove2Table,
			Columns: []string{trainedpokemondetails.UseMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpdu.mutation.UseMove2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove2Table,
			Columns: []string{trainedpokemondetails.UseMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpdu.mutation.UseMove3Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove3Table,
			Columns: []string{trainedpokemondetails.UseMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpdu.mutation.UseMove3IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove3Table,
			Columns: []string{trainedpokemondetails.UseMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpdu.mutation.UseMove4Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove4Table,
			Columns: []string{trainedpokemondetails.UseMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpdu.mutation.UseMove4IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove4Table,
			Columns: []string{trainedpokemondetails.UseMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpdu.mutation.TrainingDetailUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.TrainingDetailUserTable,
			Columns: []string{trainedpokemondetails.TrainingDetailUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpdu.mutation.TrainingDetailUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.TrainingDetailUserTable,
			Columns: []string{trainedpokemondetails.TrainingDetailUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trainedpokemondetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TrainedPokemonDetailsUpdateOne is the builder for updating a single TrainedPokemonDetails entity.
type TrainedPokemonDetailsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrainedPokemonDetailsMutation
}

// SetNickname sets the "nickname" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNickname(s string) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetNickname(s)
	return tpduo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNillableNickname(s *string) *TrainedPokemonDetailsUpdateOne {
	if s != nil {
		tpduo.SetNickname(*s)
	}
	return tpduo
}

// ClearNickname clears the value of the "nickname" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearNickname() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearNickname()
	return tpduo
}

// SetGender sets the "gender" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetGender(pr property.Gender) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetGender(pr)
	return tpduo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNillableGender(pr *property.Gender) *TrainedPokemonDetailsUpdateOne {
	if pr != nil {
		tpduo.SetGender(*pr)
	}
	return tpduo
}

// ClearGender clears the value of the "gender" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearGender() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearGender()
	return tpduo
}

// SetAbilityID sets the "ability_id" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetAbilityID(i int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetAbilityID(i)
	return tpduo
}

// SetHeldItemID sets the "held_item_id" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetHeldItemID(i int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetHeldItemID(i)
	return tpduo
}

// SetMoveId1 sets the "move_id1" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetMoveId1(i int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetMoveId1(i)
	return tpduo
}

// SetMoveId2 sets the "move_id2" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetMoveId2(i int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetMoveId2(i)
	return tpduo
}

// SetNillableMoveId2 sets the "move_id2" field if the given value is not nil.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNillableMoveId2(i *int) *TrainedPokemonDetailsUpdateOne {
	if i != nil {
		tpduo.SetMoveId2(*i)
	}
	return tpduo
}

// ClearMoveId2 clears the value of the "move_id2" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearMoveId2() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearMoveId2()
	return tpduo
}

// SetMoveId3 sets the "move_id3" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetMoveId3(i int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetMoveId3(i)
	return tpduo
}

// SetNillableMoveId3 sets the "move_id3" field if the given value is not nil.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNillableMoveId3(i *int) *TrainedPokemonDetailsUpdateOne {
	if i != nil {
		tpduo.SetMoveId3(*i)
	}
	return tpduo
}

// ClearMoveId3 clears the value of the "move_id3" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearMoveId3() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearMoveId3()
	return tpduo
}

// SetMoveId4 sets the "move_id4" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetMoveId4(i int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetMoveId4(i)
	return tpduo
}

// SetNillableMoveId4 sets the "move_id4" field if the given value is not nil.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNillableMoveId4(i *int) *TrainedPokemonDetailsUpdateOne {
	if i != nil {
		tpduo.SetMoveId4(*i)
	}
	return tpduo
}

// ClearMoveId4 clears the value of the "move_id4" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearMoveId4() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearMoveId4()
	return tpduo
}

// SetUserID sets the "user_id" field.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUserID(i int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetUserID(i)
	return tpduo
}

// SetUseAbilityID sets the "use_ability" edge to the Abilities entity by ID.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseAbilityID(id int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetUseAbilityID(id)
	return tpduo
}

// SetUseAbility sets the "use_ability" edge to the Abilities entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseAbility(a *Abilities) *TrainedPokemonDetailsUpdateOne {
	return tpduo.SetUseAbilityID(a.ID)
}

// SetUseHeldItemID sets the "use_held_item" edge to the HeldItems entity by ID.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseHeldItemID(id int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetUseHeldItemID(id)
	return tpduo
}

// SetUseHeldItem sets the "use_held_item" edge to the HeldItems entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseHeldItem(h *HeldItems) *TrainedPokemonDetailsUpdateOne {
	return tpduo.SetUseHeldItemID(h.ID)
}

// SetUseMove1ID sets the "use_move1" edge to the Moves entity by ID.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseMove1ID(id int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetUseMove1ID(id)
	return tpduo
}

// SetUseMove1 sets the "use_move1" edge to the Moves entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseMove1(m *Moves) *TrainedPokemonDetailsUpdateOne {
	return tpduo.SetUseMove1ID(m.ID)
}

// SetUseMove2ID sets the "use_move2" edge to the Moves entity by ID.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseMove2ID(id int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetUseMove2ID(id)
	return tpduo
}

// SetNillableUseMove2ID sets the "use_move2" edge to the Moves entity by ID if the given value is not nil.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNillableUseMove2ID(id *int) *TrainedPokemonDetailsUpdateOne {
	if id != nil {
		tpduo = tpduo.SetUseMove2ID(*id)
	}
	return tpduo
}

// SetUseMove2 sets the "use_move2" edge to the Moves entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseMove2(m *Moves) *TrainedPokemonDetailsUpdateOne {
	return tpduo.SetUseMove2ID(m.ID)
}

// SetUseMove3ID sets the "use_move3" edge to the Moves entity by ID.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseMove3ID(id int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetUseMove3ID(id)
	return tpduo
}

// SetNillableUseMove3ID sets the "use_move3" edge to the Moves entity by ID if the given value is not nil.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNillableUseMove3ID(id *int) *TrainedPokemonDetailsUpdateOne {
	if id != nil {
		tpduo = tpduo.SetUseMove3ID(*id)
	}
	return tpduo
}

// SetUseMove3 sets the "use_move3" edge to the Moves entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseMove3(m *Moves) *TrainedPokemonDetailsUpdateOne {
	return tpduo.SetUseMove3ID(m.ID)
}

// SetUseMove4ID sets the "use_move4" edge to the Moves entity by ID.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseMove4ID(id int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetUseMove4ID(id)
	return tpduo
}

// SetNillableUseMove4ID sets the "use_move4" edge to the Moves entity by ID if the given value is not nil.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetNillableUseMove4ID(id *int) *TrainedPokemonDetailsUpdateOne {
	if id != nil {
		tpduo = tpduo.SetUseMove4ID(*id)
	}
	return tpduo
}

// SetUseMove4 sets the "use_move4" edge to the Moves entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetUseMove4(m *Moves) *TrainedPokemonDetailsUpdateOne {
	return tpduo.SetUseMove4ID(m.ID)
}

// SetTrainingDetailUserID sets the "training_detail_user" edge to the Users entity by ID.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetTrainingDetailUserID(id int) *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.SetTrainingDetailUserID(id)
	return tpduo
}

// SetTrainingDetailUser sets the "training_detail_user" edge to the Users entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) SetTrainingDetailUser(u *Users) *TrainedPokemonDetailsUpdateOne {
	return tpduo.SetTrainingDetailUserID(u.ID)
}

// Mutation returns the TrainedPokemonDetailsMutation object of the builder.
func (tpduo *TrainedPokemonDetailsUpdateOne) Mutation() *TrainedPokemonDetailsMutation {
	return tpduo.mutation
}

// ClearUseAbility clears the "use_ability" edge to the Abilities entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearUseAbility() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearUseAbility()
	return tpduo
}

// ClearUseHeldItem clears the "use_held_item" edge to the HeldItems entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearUseHeldItem() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearUseHeldItem()
	return tpduo
}

// ClearUseMove1 clears the "use_move1" edge to the Moves entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearUseMove1() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearUseMove1()
	return tpduo
}

// ClearUseMove2 clears the "use_move2" edge to the Moves entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearUseMove2() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearUseMove2()
	return tpduo
}

// ClearUseMove3 clears the "use_move3" edge to the Moves entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearUseMove3() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearUseMove3()
	return tpduo
}

// ClearUseMove4 clears the "use_move4" edge to the Moves entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearUseMove4() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearUseMove4()
	return tpduo
}

// ClearTrainingDetailUser clears the "training_detail_user" edge to the Users entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) ClearTrainingDetailUser() *TrainedPokemonDetailsUpdateOne {
	tpduo.mutation.ClearTrainingDetailUser()
	return tpduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpduo *TrainedPokemonDetailsUpdateOne) Select(field string, fields ...string) *TrainedPokemonDetailsUpdateOne {
	tpduo.fields = append([]string{field}, fields...)
	return tpduo
}

// Save executes the query and returns the updated TrainedPokemonDetails entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) Save(ctx context.Context) (*TrainedPokemonDetails, error) {
	var (
		err  error
		node *TrainedPokemonDetails
	)
	tpduo.defaults()
	if len(tpduo.hooks) == 0 {
		if err = tpduo.check(); err != nil {
			return nil, err
		}
		node, err = tpduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrainedPokemonDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpduo.check(); err != nil {
				return nil, err
			}
			tpduo.mutation = mutation
			node, err = tpduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpduo.hooks) - 1; i >= 0; i-- {
			if tpduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpduo *TrainedPokemonDetailsUpdateOne) SaveX(ctx context.Context) *TrainedPokemonDetails {
	node, err := tpduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpduo *TrainedPokemonDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := tpduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpduo *TrainedPokemonDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := tpduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpduo *TrainedPokemonDetailsUpdateOne) defaults() {
	if _, ok := tpduo.mutation.UpdateTime(); !ok {
		v := trainedpokemondetails.UpdateDefaultUpdateTime()
		tpduo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpduo *TrainedPokemonDetailsUpdateOne) check() error {
	if v, ok := tpduo.mutation.AbilityID(); ok {
		if err := trainedpokemondetails.AbilityIDValidator(v); err != nil {
			return &ValidationError{Name: "ability_id", err: fmt.Errorf("ent: validator failed for field \"ability_id\": %w", err)}
		}
	}
	if v, ok := tpduo.mutation.HeldItemID(); ok {
		if err := trainedpokemondetails.HeldItemIDValidator(v); err != nil {
			return &ValidationError{Name: "held_item_id", err: fmt.Errorf("ent: validator failed for field \"held_item_id\": %w", err)}
		}
	}
	if v, ok := tpduo.mutation.MoveId1(); ok {
		if err := trainedpokemondetails.MoveId1Validator(v); err != nil {
			return &ValidationError{Name: "move_id1", err: fmt.Errorf("ent: validator failed for field \"move_id1\": %w", err)}
		}
	}
	if v, ok := tpduo.mutation.MoveId2(); ok {
		if err := trainedpokemondetails.MoveId2Validator(v); err != nil {
			return &ValidationError{Name: "move_id2", err: fmt.Errorf("ent: validator failed for field \"move_id2\": %w", err)}
		}
	}
	if v, ok := tpduo.mutation.MoveId3(); ok {
		if err := trainedpokemondetails.MoveId3Validator(v); err != nil {
			return &ValidationError{Name: "move_id3", err: fmt.Errorf("ent: validator failed for field \"move_id3\": %w", err)}
		}
	}
	if v, ok := tpduo.mutation.MoveId4(); ok {
		if err := trainedpokemondetails.MoveId4Validator(v); err != nil {
			return &ValidationError{Name: "move_id4", err: fmt.Errorf("ent: validator failed for field \"move_id4\": %w", err)}
		}
	}
	if v, ok := tpduo.mutation.UserID(); ok {
		if err := trainedpokemondetails.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf("ent: validator failed for field \"user_id\": %w", err)}
		}
	}
	if _, ok := tpduo.mutation.UseAbilityID(); tpduo.mutation.UseAbilityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"use_ability\"")
	}
	if _, ok := tpduo.mutation.UseHeldItemID(); tpduo.mutation.UseHeldItemCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"use_held_item\"")
	}
	if _, ok := tpduo.mutation.UseMove1ID(); tpduo.mutation.UseMove1Cleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"use_move1\"")
	}
	if _, ok := tpduo.mutation.TrainingDetailUserID(); tpduo.mutation.TrainingDetailUserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"training_detail_user\"")
	}
	return nil
}

func (tpduo *TrainedPokemonDetailsUpdateOne) sqlSave(ctx context.Context) (_node *TrainedPokemonDetails, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   trainedpokemondetails.Table,
			Columns: trainedpokemondetails.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trainedpokemondetails.FieldID,
			},
		},
	}
	id, ok := tpduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TrainedPokemonDetails.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tpduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trainedpokemondetails.FieldID)
		for _, f := range fields {
			if !trainedpokemondetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trainedpokemondetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: trainedpokemondetails.FieldUpdateTime,
		})
	}
	if value, ok := tpduo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemondetails.FieldNickname,
		})
	}
	if tpduo.mutation.NicknameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: trainedpokemondetails.FieldNickname,
		})
	}
	if value, ok := tpduo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemondetails.FieldGender,
		})
	}
	if tpduo.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: trainedpokemondetails.FieldGender,
		})
	}
	if tpduo.mutation.UseAbilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseAbilityTable,
			Columns: []string{trainedpokemondetails.UseAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpduo.mutation.UseAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseAbilityTable,
			Columns: []string{trainedpokemondetails.UseAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpduo.mutation.UseHeldItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseHeldItemTable,
			Columns: []string{trainedpokemondetails.UseHeldItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helditems.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpduo.mutation.UseHeldItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseHeldItemTable,
			Columns: []string{trainedpokemondetails.UseHeldItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helditems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpduo.mutation.UseMove1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove1Table,
			Columns: []string{trainedpokemondetails.UseMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpduo.mutation.UseMove1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove1Table,
			Columns: []string{trainedpokemondetails.UseMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpduo.mutation.UseMove2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove2Table,
			Columns: []string{trainedpokemondetails.UseMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpduo.mutation.UseMove2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove2Table,
			Columns: []string{trainedpokemondetails.UseMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpduo.mutation.UseMove3Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove3Table,
			Columns: []string{trainedpokemondetails.UseMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpduo.mutation.UseMove3IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove3Table,
			Columns: []string{trainedpokemondetails.UseMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpduo.mutation.UseMove4Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove4Table,
			Columns: []string{trainedpokemondetails.UseMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpduo.mutation.UseMove4IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.UseMove4Table,
			Columns: []string{trainedpokemondetails.UseMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpduo.mutation.TrainingDetailUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.TrainingDetailUserTable,
			Columns: []string{trainedpokemondetails.TrainingDetailUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpduo.mutation.TrainingDetailUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemondetails.TrainingDetailUserTable,
			Columns: []string{trainedpokemondetails.TrainingDetailUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TrainedPokemonDetails{config: tpduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trainedpokemondetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
