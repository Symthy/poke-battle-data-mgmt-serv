// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// Moves is the model entity for the Moves schema.
type Moves struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type property.Types `json:"type,omitempty"`
	// Species holds the value of the "species" field.
	Species property.MoveSpecies `json:"species,omitempty"`
	// Power holds the value of the "power" field.
	Power int `json:"power,omitempty"`
	// Accuracy holds the value of the "accuracy" field.
	Accuracy int `json:"accuracy,omitempty"`
	// Pp holds the value of the "pp" field.
	Pp int `json:"pp,omitempty"`
	// IsContact holds the value of the "is_contact" field.
	IsContact bool `json:"is_contact,omitempty"`
	// IsCanGuard holds the value of the "is_can_guard" field.
	IsCanGuard bool `json:"is_can_guard,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovesQuery when eager-loading is set.
	Edges MovesEdges `json:"edges"`
}

// MovesEdges holds the relations/edges for other nodes in the graph.
type MovesEdges struct {
	// ToTrainedPokemonMove1 holds the value of the to_trained_pokemon_move1 edge.
	ToTrainedPokemonMove1 []*TrainedPokemonDetails `json:"to_trained_pokemon_move1,omitempty"`
	// ToTrainedPokemonMove2 holds the value of the to_trained_pokemon_move2 edge.
	ToTrainedPokemonMove2 []*TrainedPokemonDetails `json:"to_trained_pokemon_move2,omitempty"`
	// ToTrainedPokemonMove3 holds the value of the to_trained_pokemon_move3 edge.
	ToTrainedPokemonMove3 []*TrainedPokemonDetails `json:"to_trained_pokemon_move3,omitempty"`
	// ToTrainedPokemonMove4 holds the value of the to_trained_pokemon_move4 edge.
	ToTrainedPokemonMove4 []*TrainedPokemonDetails `json:"to_trained_pokemon_move4,omitempty"`
	// MoveToPokemon holds the value of the move_to_pokemon edge.
	MoveToPokemon []*Pokemons `json:"move_to_pokemon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ToTrainedPokemonMove1OrErr returns the ToTrainedPokemonMove1 value or an error if the edge
// was not loaded in eager-loading.
func (e MovesEdges) ToTrainedPokemonMove1OrErr() ([]*TrainedPokemonDetails, error) {
	if e.loadedTypes[0] {
		return e.ToTrainedPokemonMove1, nil
	}
	return nil, &NotLoadedError{edge: "to_trained_pokemon_move1"}
}

// ToTrainedPokemonMove2OrErr returns the ToTrainedPokemonMove2 value or an error if the edge
// was not loaded in eager-loading.
func (e MovesEdges) ToTrainedPokemonMove2OrErr() ([]*TrainedPokemonDetails, error) {
	if e.loadedTypes[1] {
		return e.ToTrainedPokemonMove2, nil
	}
	return nil, &NotLoadedError{edge: "to_trained_pokemon_move2"}
}

// ToTrainedPokemonMove3OrErr returns the ToTrainedPokemonMove3 value or an error if the edge
// was not loaded in eager-loading.
func (e MovesEdges) ToTrainedPokemonMove3OrErr() ([]*TrainedPokemonDetails, error) {
	if e.loadedTypes[2] {
		return e.ToTrainedPokemonMove3, nil
	}
	return nil, &NotLoadedError{edge: "to_trained_pokemon_move3"}
}

// ToTrainedPokemonMove4OrErr returns the ToTrainedPokemonMove4 value or an error if the edge
// was not loaded in eager-loading.
func (e MovesEdges) ToTrainedPokemonMove4OrErr() ([]*TrainedPokemonDetails, error) {
	if e.loadedTypes[3] {
		return e.ToTrainedPokemonMove4, nil
	}
	return nil, &NotLoadedError{edge: "to_trained_pokemon_move4"}
}

// MoveToPokemonOrErr returns the MoveToPokemon value or an error if the edge
// was not loaded in eager-loading.
func (e MovesEdges) MoveToPokemonOrErr() ([]*Pokemons, error) {
	if e.loadedTypes[4] {
		return e.MoveToPokemon, nil
	}
	return nil, &NotLoadedError{edge: "move_to_pokemon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Moves) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case moves.FieldIsContact, moves.FieldIsCanGuard:
			values[i] = new(sql.NullBool)
		case moves.FieldID, moves.FieldPower, moves.FieldAccuracy, moves.FieldPp:
			values[i] = new(sql.NullInt64)
		case moves.FieldName, moves.FieldType, moves.FieldSpecies:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Moves", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Moves fields.
func (m *Moves) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moves.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case moves.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case moves.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = property.Types(value.String)
			}
		case moves.FieldSpecies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field species", values[i])
			} else if value.Valid {
				m.Species = property.MoveSpecies(value.String)
			}
		case moves.FieldPower:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field power", values[i])
			} else if value.Valid {
				m.Power = int(value.Int64)
			}
		case moves.FieldAccuracy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accuracy", values[i])
			} else if value.Valid {
				m.Accuracy = int(value.Int64)
			}
		case moves.FieldPp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pp", values[i])
			} else if value.Valid {
				m.Pp = int(value.Int64)
			}
		case moves.FieldIsContact:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_contact", values[i])
			} else if value.Valid {
				m.IsContact = value.Bool
			}
		case moves.FieldIsCanGuard:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_can_guard", values[i])
			} else if value.Valid {
				m.IsCanGuard = value.Bool
			}
		}
	}
	return nil
}

// QueryToTrainedPokemonMove1 queries the "to_trained_pokemon_move1" edge of the Moves entity.
func (m *Moves) QueryToTrainedPokemonMove1() *TrainedPokemonDetailsQuery {
	return (&MovesClient{config: m.config}).QueryToTrainedPokemonMove1(m)
}

// QueryToTrainedPokemonMove2 queries the "to_trained_pokemon_move2" edge of the Moves entity.
func (m *Moves) QueryToTrainedPokemonMove2() *TrainedPokemonDetailsQuery {
	return (&MovesClient{config: m.config}).QueryToTrainedPokemonMove2(m)
}

// QueryToTrainedPokemonMove3 queries the "to_trained_pokemon_move3" edge of the Moves entity.
func (m *Moves) QueryToTrainedPokemonMove3() *TrainedPokemonDetailsQuery {
	return (&MovesClient{config: m.config}).QueryToTrainedPokemonMove3(m)
}

// QueryToTrainedPokemonMove4 queries the "to_trained_pokemon_move4" edge of the Moves entity.
func (m *Moves) QueryToTrainedPokemonMove4() *TrainedPokemonDetailsQuery {
	return (&MovesClient{config: m.config}).QueryToTrainedPokemonMove4(m)
}

// QueryMoveToPokemon queries the "move_to_pokemon" edge of the Moves entity.
func (m *Moves) QueryMoveToPokemon() *PokemonsQuery {
	return (&MovesClient{config: m.config}).QueryMoveToPokemon(m)
}

// Update returns a builder for updating this Moves.
// Note that you need to call Moves.Unwrap() before calling this method if this Moves
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Moves) Update() *MovesUpdateOne {
	return (&MovesClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Moves entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Moves) Unwrap() *Moves {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Moves is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Moves) String() string {
	var builder strings.Builder
	builder.WriteString("Moves(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", m.Type))
	builder.WriteString(", species=")
	builder.WriteString(fmt.Sprintf("%v", m.Species))
	builder.WriteString(", power=")
	builder.WriteString(fmt.Sprintf("%v", m.Power))
	builder.WriteString(", accuracy=")
	builder.WriteString(fmt.Sprintf("%v", m.Accuracy))
	builder.WriteString(", pp=")
	builder.WriteString(fmt.Sprintf("%v", m.Pp))
	builder.WriteString(", is_contact=")
	builder.WriteString(fmt.Sprintf("%v", m.IsContact))
	builder.WriteString(", is_can_guard=")
	builder.WriteString(fmt.Sprintf("%v", m.IsCanGuard))
	builder.WriteByte(')')
	return builder.String()
}

// MovesSlice is a parsable slice of Moves.
type MovesSlice []*Moves

func (m MovesSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
