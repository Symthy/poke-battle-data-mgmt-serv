// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// TrainedPokemons is the model entity for the TrainedPokemons schema.
type TrainedPokemons struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// PokemonID holds the value of the "pokemon_id" field.
	PokemonID int `json:"pokemon_id,omitempty"`
	// CreateUserID holds the value of the "create_user_id" field.
	CreateUserID int `json:"create_user_id,omitempty"`
	// Nature holds the value of the "nature" field.
	Nature property.Nature `json:"nature,omitempty"`
	// EffortValueH holds the value of the "effort_value_h" field.
	EffortValueH int `json:"effort_value_h,omitempty"`
	// EffortValueA holds the value of the "effort_value_a" field.
	EffortValueA int `json:"effort_value_a,omitempty"`
	// EffortValueB holds the value of the "effort_value_b" field.
	EffortValueB int `json:"effort_value_b,omitempty"`
	// EffortValueC holds the value of the "effort_value_c" field.
	EffortValueC int `json:"effort_value_c,omitempty"`
	// EffortValueD holds the value of the "effort_value_d" field.
	EffortValueD int `json:"effort_value_d,omitempty"`
	// EffortValueS holds the value of the "effort_value_s" field.
	EffortValueS int `json:"effort_value_s,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrainedPokemonsQuery when eager-loading is set.
	Edges TrainedPokemonsEdges `json:"edges"`
}

// TrainedPokemonsEdges holds the relations/edges for other nodes in the graph.
type TrainedPokemonsEdges struct {
	// UsePokemon holds the value of the use_pokemon edge.
	UsePokemon *Pokemons `json:"use_pokemon,omitempty"`
	// TrainingUser holds the value of the training_user edge.
	TrainingUser *Users `json:"training_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsePokemonOrErr returns the UsePokemon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainedPokemonsEdges) UsePokemonOrErr() (*Pokemons, error) {
	if e.loadedTypes[0] {
		if e.UsePokemon == nil {
			// The edge use_pokemon was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pokemons.Label}
		}
		return e.UsePokemon, nil
	}
	return nil, &NotLoadedError{edge: "use_pokemon"}
}

// TrainingUserOrErr returns the TrainingUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainedPokemonsEdges) TrainingUserOrErr() (*Users, error) {
	if e.loadedTypes[1] {
		if e.TrainingUser == nil {
			// The edge training_user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: users.Label}
		}
		return e.TrainingUser, nil
	}
	return nil, &NotLoadedError{edge: "training_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrainedPokemons) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case trainedpokemons.FieldID, trainedpokemons.FieldPokemonID, trainedpokemons.FieldCreateUserID, trainedpokemons.FieldEffortValueH, trainedpokemons.FieldEffortValueA, trainedpokemons.FieldEffortValueB, trainedpokemons.FieldEffortValueC, trainedpokemons.FieldEffortValueD, trainedpokemons.FieldEffortValueS:
			values[i] = new(sql.NullInt64)
		case trainedpokemons.FieldNature:
			values[i] = new(sql.NullString)
		case trainedpokemons.FieldCreateTime, trainedpokemons.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TrainedPokemons", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrainedPokemons fields.
func (tp *TrainedPokemons) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trainedpokemons.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tp.ID = int(value.Int64)
		case trainedpokemons.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				tp.CreateTime = value.Time
			}
		case trainedpokemons.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				tp.UpdateTime = value.Time
			}
		case trainedpokemons.FieldPokemonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pokemon_id", values[i])
			} else if value.Valid {
				tp.PokemonID = int(value.Int64)
			}
		case trainedpokemons.FieldCreateUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user_id", values[i])
			} else if value.Valid {
				tp.CreateUserID = int(value.Int64)
			}
		case trainedpokemons.FieldNature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nature", values[i])
			} else if value.Valid {
				tp.Nature = property.Nature(value.String)
			}
		case trainedpokemons.FieldEffortValueH:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effort_value_h", values[i])
			} else if value.Valid {
				tp.EffortValueH = int(value.Int64)
			}
		case trainedpokemons.FieldEffortValueA:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effort_value_a", values[i])
			} else if value.Valid {
				tp.EffortValueA = int(value.Int64)
			}
		case trainedpokemons.FieldEffortValueB:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effort_value_b", values[i])
			} else if value.Valid {
				tp.EffortValueB = int(value.Int64)
			}
		case trainedpokemons.FieldEffortValueC:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effort_value_c", values[i])
			} else if value.Valid {
				tp.EffortValueC = int(value.Int64)
			}
		case trainedpokemons.FieldEffortValueD:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effort_value_d", values[i])
			} else if value.Valid {
				tp.EffortValueD = int(value.Int64)
			}
		case trainedpokemons.FieldEffortValueS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effort_value_s", values[i])
			} else if value.Valid {
				tp.EffortValueS = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUsePokemon queries the "use_pokemon" edge of the TrainedPokemons entity.
func (tp *TrainedPokemons) QueryUsePokemon() *PokemonsQuery {
	return (&TrainedPokemonsClient{config: tp.config}).QueryUsePokemon(tp)
}

// QueryTrainingUser queries the "training_user" edge of the TrainedPokemons entity.
func (tp *TrainedPokemons) QueryTrainingUser() *UsersQuery {
	return (&TrainedPokemonsClient{config: tp.config}).QueryTrainingUser(tp)
}

// Update returns a builder for updating this TrainedPokemons.
// Note that you need to call TrainedPokemons.Unwrap() before calling this method if this TrainedPokemons
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TrainedPokemons) Update() *TrainedPokemonsUpdateOne {
	return (&TrainedPokemonsClient{config: tp.config}).UpdateOne(tp)
}

// Unwrap unwraps the TrainedPokemons entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TrainedPokemons) Unwrap() *TrainedPokemons {
	tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TrainedPokemons is not a transactional entity")
	}
	tp.config.driver = tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TrainedPokemons) String() string {
	var builder strings.Builder
	builder.WriteString("TrainedPokemons(")
	builder.WriteString(fmt.Sprintf("id=%v", tp.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(tp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(tp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", pokemon_id=")
	builder.WriteString(fmt.Sprintf("%v", tp.PokemonID))
	builder.WriteString(", create_user_id=")
	builder.WriteString(fmt.Sprintf("%v", tp.CreateUserID))
	builder.WriteString(", nature=")
	builder.WriteString(fmt.Sprintf("%v", tp.Nature))
	builder.WriteString(", effort_value_h=")
	builder.WriteString(fmt.Sprintf("%v", tp.EffortValueH))
	builder.WriteString(", effort_value_a=")
	builder.WriteString(fmt.Sprintf("%v", tp.EffortValueA))
	builder.WriteString(", effort_value_b=")
	builder.WriteString(fmt.Sprintf("%v", tp.EffortValueB))
	builder.WriteString(", effort_value_c=")
	builder.WriteString(fmt.Sprintf("%v", tp.EffortValueC))
	builder.WriteString(", effort_value_d=")
	builder.WriteString(fmt.Sprintf("%v", tp.EffortValueD))
	builder.WriteString(", effort_value_s=")
	builder.WriteString(fmt.Sprintf("%v", tp.EffortValueS))
	builder.WriteByte(')')
	return builder.String()
}

// TrainedPokemonsSlice is a parsable slice of TrainedPokemons.
type TrainedPokemonsSlice []*TrainedPokemons

func (tp TrainedPokemonsSlice) config(cfg config) {
	for _i := range tp {
		tp[_i].config = cfg
	}
}
