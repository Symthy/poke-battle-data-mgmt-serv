// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// AbilitiesCreate is the builder for creating a Abilities entity.
type AbilitiesCreate struct {
	config
	mutation *AbilitiesMutation
	hooks    []Hook
}

// SetPhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field.
func (ac *AbilitiesCreate) SetPhysicalMovePowerCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetPhysicalMovePowerCorrectionValue(i)
	return ac
}

// SetNillablePhysicalMovePowerCorrectionValue sets the "physical_move_power_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillablePhysicalMovePowerCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetPhysicalMovePowerCorrectionValue(*i)
	}
	return ac
}

// SetSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field.
func (ac *AbilitiesCreate) SetSpecialMovePowerCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetSpecialMovePowerCorrectionValue(i)
	return ac
}

// SetNillableSpecialMovePowerCorrectionValue sets the "special_move_power_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableSpecialMovePowerCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetSpecialMovePowerCorrectionValue(*i)
	}
	return ac
}

// SetAttackPowerCorrectionValue sets the "attack_power_correction_value" field.
func (ac *AbilitiesCreate) SetAttackPowerCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetAttackPowerCorrectionValue(i)
	return ac
}

// SetNillableAttackPowerCorrectionValue sets the "attack_power_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableAttackPowerCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetAttackPowerCorrectionValue(*i)
	}
	return ac
}

// SetSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field.
func (ac *AbilitiesCreate) SetSpecialAttackPowerCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetSpecialAttackPowerCorrectionValue(i)
	return ac
}

// SetNillableSpecialAttackPowerCorrectionValue sets the "special_attack_power_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableSpecialAttackPowerCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetSpecialAttackPowerCorrectionValue(*i)
	}
	return ac
}

// SetAttackCorrectionValue sets the "attack_correction_value" field.
func (ac *AbilitiesCreate) SetAttackCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetAttackCorrectionValue(i)
	return ac
}

// SetNillableAttackCorrectionValue sets the "attack_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableAttackCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetAttackCorrectionValue(*i)
	}
	return ac
}

// SetSpecialAttackCorrectionValue sets the "special_attack_correction_value" field.
func (ac *AbilitiesCreate) SetSpecialAttackCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetSpecialAttackCorrectionValue(i)
	return ac
}

// SetNillableSpecialAttackCorrectionValue sets the "special_attack_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableSpecialAttackCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetSpecialAttackCorrectionValue(*i)
	}
	return ac
}

// SetDeffenseCorrectionValue sets the "deffense_correction_value" field.
func (ac *AbilitiesCreate) SetDeffenseCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetDeffenseCorrectionValue(i)
	return ac
}

// SetNillableDeffenseCorrectionValue sets the "deffense_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableDeffenseCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetDeffenseCorrectionValue(*i)
	}
	return ac
}

// SetSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field.
func (ac *AbilitiesCreate) SetSpecialDeffenseCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetSpecialDeffenseCorrectionValue(i)
	return ac
}

// SetNillableSpecialDeffenseCorrectionValue sets the "special_deffense_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableSpecialDeffenseCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetSpecialDeffenseCorrectionValue(*i)
	}
	return ac
}

// SetDamageCorrectionType1 sets the "damage_correction_type1" field.
func (ac *AbilitiesCreate) SetDamageCorrectionType1(pr property.Types) *AbilitiesCreate {
	ac.mutation.SetDamageCorrectionType1(pr)
	return ac
}

// SetDamageCorrectionValue1 sets the "damage_correction_value1" field.
func (ac *AbilitiesCreate) SetDamageCorrectionValue1(i int) *AbilitiesCreate {
	ac.mutation.SetDamageCorrectionValue1(i)
	return ac
}

// SetNillableDamageCorrectionValue1 sets the "damage_correction_value1" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableDamageCorrectionValue1(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetDamageCorrectionValue1(*i)
	}
	return ac
}

// SetDamageCorrectionType2 sets the "damage_correction_type2" field.
func (ac *AbilitiesCreate) SetDamageCorrectionType2(pr property.Types) *AbilitiesCreate {
	ac.mutation.SetDamageCorrectionType2(pr)
	return ac
}

// SetNillableDamageCorrectionType2 sets the "damage_correction_type2" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableDamageCorrectionType2(pr *property.Types) *AbilitiesCreate {
	if pr != nil {
		ac.SetDamageCorrectionType2(*pr)
	}
	return ac
}

// SetDamageCorrectionValue2 sets the "damage_correction_value2" field.
func (ac *AbilitiesCreate) SetDamageCorrectionValue2(i int) *AbilitiesCreate {
	ac.mutation.SetDamageCorrectionValue2(i)
	return ac
}

// SetNillableDamageCorrectionValue2 sets the "damage_correction_value2" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableDamageCorrectionValue2(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetDamageCorrectionValue2(*i)
	}
	return ac
}

// SetWeightCorrectionValue sets the "weight_correction_value" field.
func (ac *AbilitiesCreate) SetWeightCorrectionValue(i int) *AbilitiesCreate {
	ac.mutation.SetWeightCorrectionValue(i)
	return ac
}

// SetNillableWeightCorrectionValue sets the "weight_correction_value" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableWeightCorrectionValue(i *int) *AbilitiesCreate {
	if i != nil {
		ac.SetWeightCorrectionValue(*i)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AbilitiesCreate) SetName(s string) *AbilitiesCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AbilitiesCreate) SetDescription(s string) *AbilitiesCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AbilitiesCreate) SetNillableDescription(s *string) *AbilitiesCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// AddAbilityHolder1IDs adds the "ability_holder1" edge to the Pokemons entity by IDs.
func (ac *AbilitiesCreate) AddAbilityHolder1IDs(ids ...int) *AbilitiesCreate {
	ac.mutation.AddAbilityHolder1IDs(ids...)
	return ac
}

// AddAbilityHolder1 adds the "ability_holder1" edges to the Pokemons entity.
func (ac *AbilitiesCreate) AddAbilityHolder1(p ...*Pokemons) *AbilitiesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddAbilityHolder1IDs(ids...)
}

// AddAbilityHolder2IDs adds the "ability_holder2" edge to the Pokemons entity by IDs.
func (ac *AbilitiesCreate) AddAbilityHolder2IDs(ids ...int) *AbilitiesCreate {
	ac.mutation.AddAbilityHolder2IDs(ids...)
	return ac
}

// AddAbilityHolder2 adds the "ability_holder2" edges to the Pokemons entity.
func (ac *AbilitiesCreate) AddAbilityHolder2(p ...*Pokemons) *AbilitiesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddAbilityHolder2IDs(ids...)
}

// AddHiddenAbilityHolderIDs adds the "hidden_ability_holder" edge to the Pokemons entity by IDs.
func (ac *AbilitiesCreate) AddHiddenAbilityHolderIDs(ids ...int) *AbilitiesCreate {
	ac.mutation.AddHiddenAbilityHolderIDs(ids...)
	return ac
}

// AddHiddenAbilityHolder adds the "hidden_ability_holder" edges to the Pokemons entity.
func (ac *AbilitiesCreate) AddHiddenAbilityHolder(p ...*Pokemons) *AbilitiesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddHiddenAbilityHolderIDs(ids...)
}

// AddToTrainedPokemonAbilityIDs adds the "to_trained_pokemon_ability" edge to the TrainedPokemonDetails entity by IDs.
func (ac *AbilitiesCreate) AddToTrainedPokemonAbilityIDs(ids ...int) *AbilitiesCreate {
	ac.mutation.AddToTrainedPokemonAbilityIDs(ids...)
	return ac
}

// AddToTrainedPokemonAbility adds the "to_trained_pokemon_ability" edges to the TrainedPokemonDetails entity.
func (ac *AbilitiesCreate) AddToTrainedPokemonAbility(t ...*TrainedPokemonDetails) *AbilitiesCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddToTrainedPokemonAbilityIDs(ids...)
}

// Mutation returns the AbilitiesMutation object of the builder.
func (ac *AbilitiesCreate) Mutation() *AbilitiesMutation {
	return ac.mutation
}

// Save creates the Abilities in the database.
func (ac *AbilitiesCreate) Save(ctx context.Context) (*Abilities, error) {
	var (
		err  error
		node *Abilities
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbilitiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AbilitiesCreate) SaveX(ctx context.Context) *Abilities {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AbilitiesCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AbilitiesCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AbilitiesCreate) defaults() {
	if _, ok := ac.mutation.PhysicalMovePowerCorrectionValue(); !ok {
		v := abilities.DefaultPhysicalMovePowerCorrectionValue
		ac.mutation.SetPhysicalMovePowerCorrectionValue(v)
	}
	if _, ok := ac.mutation.SpecialMovePowerCorrectionValue(); !ok {
		v := abilities.DefaultSpecialMovePowerCorrectionValue
		ac.mutation.SetSpecialMovePowerCorrectionValue(v)
	}
	if _, ok := ac.mutation.AttackPowerCorrectionValue(); !ok {
		v := abilities.DefaultAttackPowerCorrectionValue
		ac.mutation.SetAttackPowerCorrectionValue(v)
	}
	if _, ok := ac.mutation.SpecialAttackPowerCorrectionValue(); !ok {
		v := abilities.DefaultSpecialAttackPowerCorrectionValue
		ac.mutation.SetSpecialAttackPowerCorrectionValue(v)
	}
	if _, ok := ac.mutation.AttackCorrectionValue(); !ok {
		v := abilities.DefaultAttackCorrectionValue
		ac.mutation.SetAttackCorrectionValue(v)
	}
	if _, ok := ac.mutation.SpecialAttackCorrectionValue(); !ok {
		v := abilities.DefaultSpecialAttackCorrectionValue
		ac.mutation.SetSpecialAttackCorrectionValue(v)
	}
	if _, ok := ac.mutation.DeffenseCorrectionValue(); !ok {
		v := abilities.DefaultDeffenseCorrectionValue
		ac.mutation.SetDeffenseCorrectionValue(v)
	}
	if _, ok := ac.mutation.SpecialDeffenseCorrectionValue(); !ok {
		v := abilities.DefaultSpecialDeffenseCorrectionValue
		ac.mutation.SetSpecialDeffenseCorrectionValue(v)
	}
	if _, ok := ac.mutation.DamageCorrectionValue1(); !ok {
		v := abilities.DefaultDamageCorrectionValue1
		ac.mutation.SetDamageCorrectionValue1(v)
	}
	if _, ok := ac.mutation.WeightCorrectionValue(); !ok {
		v := abilities.DefaultWeightCorrectionValue
		ac.mutation.SetWeightCorrectionValue(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AbilitiesCreate) check() error {
	if _, ok := ac.mutation.PhysicalMovePowerCorrectionValue(); !ok {
		return &ValidationError{Name: "physical_move_power_correction_value", err: errors.New(`ent: missing required field "physical_move_power_correction_value"`)}
	}
	if _, ok := ac.mutation.SpecialMovePowerCorrectionValue(); !ok {
		return &ValidationError{Name: "special_move_power_correction_value", err: errors.New(`ent: missing required field "special_move_power_correction_value"`)}
	}
	if _, ok := ac.mutation.AttackPowerCorrectionValue(); !ok {
		return &ValidationError{Name: "attack_power_correction_value", err: errors.New(`ent: missing required field "attack_power_correction_value"`)}
	}
	if _, ok := ac.mutation.SpecialAttackPowerCorrectionValue(); !ok {
		return &ValidationError{Name: "special_attack_power_correction_value", err: errors.New(`ent: missing required field "special_attack_power_correction_value"`)}
	}
	if _, ok := ac.mutation.AttackCorrectionValue(); !ok {
		return &ValidationError{Name: "attack_correction_value", err: errors.New(`ent: missing required field "attack_correction_value"`)}
	}
	if _, ok := ac.mutation.SpecialAttackCorrectionValue(); !ok {
		return &ValidationError{Name: "special_attack_correction_value", err: errors.New(`ent: missing required field "special_attack_correction_value"`)}
	}
	if _, ok := ac.mutation.DeffenseCorrectionValue(); !ok {
		return &ValidationError{Name: "deffense_correction_value", err: errors.New(`ent: missing required field "deffense_correction_value"`)}
	}
	if _, ok := ac.mutation.SpecialDeffenseCorrectionValue(); !ok {
		return &ValidationError{Name: "special_deffense_correction_value", err: errors.New(`ent: missing required field "special_deffense_correction_value"`)}
	}
	if _, ok := ac.mutation.DamageCorrectionType1(); !ok {
		return &ValidationError{Name: "damage_correction_type1", err: errors.New(`ent: missing required field "damage_correction_type1"`)}
	}
	if v, ok := ac.mutation.DamageCorrectionType1(); ok {
		if err := abilities.DamageCorrectionType1Validator(string(v)); err != nil {
			return &ValidationError{Name: "damage_correction_type1", err: fmt.Errorf(`ent: validator failed for field "damage_correction_type1": %w`, err)}
		}
	}
	if _, ok := ac.mutation.DamageCorrectionValue1(); !ok {
		return &ValidationError{Name: "damage_correction_value1", err: errors.New(`ent: missing required field "damage_correction_value1"`)}
	}
	if _, ok := ac.mutation.WeightCorrectionValue(); !ok {
		return &ValidationError{Name: "weight_correction_value", err: errors.New(`ent: missing required field "weight_correction_value"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := abilities.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	return nil
}

func (ac *AbilitiesCreate) sqlSave(ctx context.Context) (*Abilities, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AbilitiesCreate) createSpec() (*Abilities, *sqlgraph.CreateSpec) {
	var (
		_node = &Abilities{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: abilities.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abilities.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.PhysicalMovePowerCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldPhysicalMovePowerCorrectionValue,
		})
		_node.PhysicalMovePowerCorrectionValue = value
	}
	if value, ok := ac.mutation.SpecialMovePowerCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialMovePowerCorrectionValue,
		})
		_node.SpecialMovePowerCorrectionValue = value
	}
	if value, ok := ac.mutation.AttackPowerCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackPowerCorrectionValue,
		})
		_node.AttackPowerCorrectionValue = value
	}
	if value, ok := ac.mutation.SpecialAttackPowerCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackPowerCorrectionValue,
		})
		_node.SpecialAttackPowerCorrectionValue = value
	}
	if value, ok := ac.mutation.AttackCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldAttackCorrectionValue,
		})
		_node.AttackCorrectionValue = value
	}
	if value, ok := ac.mutation.SpecialAttackCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialAttackCorrectionValue,
		})
		_node.SpecialAttackCorrectionValue = value
	}
	if value, ok := ac.mutation.DeffenseCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDeffenseCorrectionValue,
		})
		_node.DeffenseCorrectionValue = value
	}
	if value, ok := ac.mutation.SpecialDeffenseCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldSpecialDeffenseCorrectionValue,
		})
		_node.SpecialDeffenseCorrectionValue = value
	}
	if value, ok := ac.mutation.DamageCorrectionType1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDamageCorrectionType1,
		})
		_node.DamageCorrectionType1 = value
	}
	if value, ok := ac.mutation.DamageCorrectionValue1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue1,
		})
		_node.DamageCorrectionValue1 = value
	}
	if value, ok := ac.mutation.DamageCorrectionType2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDamageCorrectionType2,
		})
		_node.DamageCorrectionType2 = value
	}
	if value, ok := ac.mutation.DamageCorrectionValue2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldDamageCorrectionValue2,
		})
		_node.DamageCorrectionValue2 = value
	}
	if value, ok := ac.mutation.WeightCorrectionValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abilities.FieldWeightCorrectionValue,
		})
		_node.WeightCorrectionValue = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abilities.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := ac.mutation.AbilityHolder1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder1Table,
			Columns: []string{abilities.AbilityHolder1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AbilityHolder2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.AbilityHolder2Table,
			Columns: []string{abilities.AbilityHolder2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.HiddenAbilityHolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.HiddenAbilityHolderTable,
			Columns: []string{abilities.HiddenAbilityHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ToTrainedPokemonAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abilities.ToTrainedPokemonAbilityTable,
			Columns: []string{abilities.ToTrainedPokemonAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AbilitiesCreateBulk is the builder for creating many Abilities entities in bulk.
type AbilitiesCreateBulk struct {
	config
	builders []*AbilitiesCreate
}

// Save creates the Abilities entities in the database.
func (acb *AbilitiesCreateBulk) Save(ctx context.Context) ([]*Abilities, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Abilities, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AbilitiesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AbilitiesCreateBulk) SaveX(ctx context.Context) []*Abilities {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AbilitiesCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AbilitiesCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
