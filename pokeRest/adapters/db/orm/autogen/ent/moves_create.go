// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// MovesCreate is the builder for creating a Moves entity.
type MovesCreate struct {
	config
	mutation *MovesMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MovesCreate) SetName(s string) *MovesCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetType sets the "type" field.
func (mc *MovesCreate) SetType(pr property.Types) *MovesCreate {
	mc.mutation.SetType(pr)
	return mc
}

// SetSpecies sets the "species" field.
func (mc *MovesCreate) SetSpecies(ps property.MoveSpecies) *MovesCreate {
	mc.mutation.SetSpecies(ps)
	return mc
}

// SetPower sets the "power" field.
func (mc *MovesCreate) SetPower(i int) *MovesCreate {
	mc.mutation.SetPower(i)
	return mc
}

// SetAccuracy sets the "accuracy" field.
func (mc *MovesCreate) SetAccuracy(i int) *MovesCreate {
	mc.mutation.SetAccuracy(i)
	return mc
}

// SetPp sets the "pp" field.
func (mc *MovesCreate) SetPp(i int) *MovesCreate {
	mc.mutation.SetPp(i)
	return mc
}

// SetIsContact sets the "is_contact" field.
func (mc *MovesCreate) SetIsContact(b bool) *MovesCreate {
	mc.mutation.SetIsContact(b)
	return mc
}

// SetNillableIsContact sets the "is_contact" field if the given value is not nil.
func (mc *MovesCreate) SetNillableIsContact(b *bool) *MovesCreate {
	if b != nil {
		mc.SetIsContact(*b)
	}
	return mc
}

// SetIsCanGuard sets the "is_can_guard" field.
func (mc *MovesCreate) SetIsCanGuard(b bool) *MovesCreate {
	mc.mutation.SetIsCanGuard(b)
	return mc
}

// SetNillableIsCanGuard sets the "is_can_guard" field if the given value is not nil.
func (mc *MovesCreate) SetNillableIsCanGuard(b *bool) *MovesCreate {
	if b != nil {
		mc.SetIsCanGuard(*b)
	}
	return mc
}

// AddToTrainedPokemonMove1IDs adds the "to_trained_pokemon_move1" edge to the TrainedPokemonDetails entity by IDs.
func (mc *MovesCreate) AddToTrainedPokemonMove1IDs(ids ...int) *MovesCreate {
	mc.mutation.AddToTrainedPokemonMove1IDs(ids...)
	return mc
}

// AddToTrainedPokemonMove1 adds the "to_trained_pokemon_move1" edges to the TrainedPokemonDetails entity.
func (mc *MovesCreate) AddToTrainedPokemonMove1(t ...*TrainedPokemonDetails) *MovesCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddToTrainedPokemonMove1IDs(ids...)
}

// AddToTrainedPokemonMove2IDs adds the "to_trained_pokemon_move2" edge to the TrainedPokemonDetails entity by IDs.
func (mc *MovesCreate) AddToTrainedPokemonMove2IDs(ids ...int) *MovesCreate {
	mc.mutation.AddToTrainedPokemonMove2IDs(ids...)
	return mc
}

// AddToTrainedPokemonMove2 adds the "to_trained_pokemon_move2" edges to the TrainedPokemonDetails entity.
func (mc *MovesCreate) AddToTrainedPokemonMove2(t ...*TrainedPokemonDetails) *MovesCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddToTrainedPokemonMove2IDs(ids...)
}

// AddToTrainedPokemonMove3IDs adds the "to_trained_pokemon_move3" edge to the TrainedPokemonDetails entity by IDs.
func (mc *MovesCreate) AddToTrainedPokemonMove3IDs(ids ...int) *MovesCreate {
	mc.mutation.AddToTrainedPokemonMove3IDs(ids...)
	return mc
}

// AddToTrainedPokemonMove3 adds the "to_trained_pokemon_move3" edges to the TrainedPokemonDetails entity.
func (mc *MovesCreate) AddToTrainedPokemonMove3(t ...*TrainedPokemonDetails) *MovesCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddToTrainedPokemonMove3IDs(ids...)
}

// AddToTrainedPokemonMove4IDs adds the "to_trained_pokemon_move4" edge to the TrainedPokemonDetails entity by IDs.
func (mc *MovesCreate) AddToTrainedPokemonMove4IDs(ids ...int) *MovesCreate {
	mc.mutation.AddToTrainedPokemonMove4IDs(ids...)
	return mc
}

// AddToTrainedPokemonMove4 adds the "to_trained_pokemon_move4" edges to the TrainedPokemonDetails entity.
func (mc *MovesCreate) AddToTrainedPokemonMove4(t ...*TrainedPokemonDetails) *MovesCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddToTrainedPokemonMove4IDs(ids...)
}

// AddMoveToPokemonIDs adds the "move_to_pokemon" edge to the Pokemons entity by IDs.
func (mc *MovesCreate) AddMoveToPokemonIDs(ids ...int) *MovesCreate {
	mc.mutation.AddMoveToPokemonIDs(ids...)
	return mc
}

// AddMoveToPokemon adds the "move_to_pokemon" edges to the Pokemons entity.
func (mc *MovesCreate) AddMoveToPokemon(p ...*Pokemons) *MovesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddMoveToPokemonIDs(ids...)
}

// Mutation returns the MovesMutation object of the builder.
func (mc *MovesCreate) Mutation() *MovesMutation {
	return mc.mutation
}

// Save creates the Moves in the database.
func (mc *MovesCreate) Save(ctx context.Context) (*Moves, error) {
	var (
		err  error
		node *Moves
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MovesCreate) SaveX(ctx context.Context) *Moves {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MovesCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MovesCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MovesCreate) defaults() {
	if _, ok := mc.mutation.IsContact(); !ok {
		v := moves.DefaultIsContact
		mc.mutation.SetIsContact(v)
	}
	if _, ok := mc.mutation.IsCanGuard(); !ok {
		v := moves.DefaultIsCanGuard
		mc.mutation.SetIsCanGuard(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MovesCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := moves.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := moves.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Species(); !ok {
		return &ValidationError{Name: "species", err: errors.New(`ent: missing required field "species"`)}
	}
	if _, ok := mc.mutation.Power(); !ok {
		return &ValidationError{Name: "power", err: errors.New(`ent: missing required field "power"`)}
	}
	if v, ok := mc.mutation.Power(); ok {
		if err := moves.PowerValidator(v); err != nil {
			return &ValidationError{Name: "power", err: fmt.Errorf(`ent: validator failed for field "power": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Accuracy(); !ok {
		return &ValidationError{Name: "accuracy", err: errors.New(`ent: missing required field "accuracy"`)}
	}
	if v, ok := mc.mutation.Accuracy(); ok {
		if err := moves.AccuracyValidator(v); err != nil {
			return &ValidationError{Name: "accuracy", err: fmt.Errorf(`ent: validator failed for field "accuracy": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Pp(); !ok {
		return &ValidationError{Name: "pp", err: errors.New(`ent: missing required field "pp"`)}
	}
	if v, ok := mc.mutation.Pp(); ok {
		if err := moves.PpValidator(v); err != nil {
			return &ValidationError{Name: "pp", err: fmt.Errorf(`ent: validator failed for field "pp": %w`, err)}
		}
	}
	if _, ok := mc.mutation.IsContact(); !ok {
		return &ValidationError{Name: "is_contact", err: errors.New(`ent: missing required field "is_contact"`)}
	}
	if _, ok := mc.mutation.IsCanGuard(); !ok {
		return &ValidationError{Name: "is_can_guard", err: errors.New(`ent: missing required field "is_can_guard"`)}
	}
	return nil
}

func (mc *MovesCreate) sqlSave(ctx context.Context) (*Moves, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MovesCreate) createSpec() (*Moves, *sqlgraph.CreateSpec) {
	var (
		_node = &Moves{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: moves.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moves.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moves.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: moves.FieldType,
		})
		_node.Type = value
	}
	if value, ok := mc.mutation.Species(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moves.FieldSpecies,
		})
		_node.Species = value
	}
	if value, ok := mc.mutation.Power(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPower,
		})
		_node.Power = value
	}
	if value, ok := mc.mutation.Accuracy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldAccuracy,
		})
		_node.Accuracy = value
	}
	if value, ok := mc.mutation.Pp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPp,
		})
		_node.Pp = value
	}
	if value, ok := mc.mutation.IsContact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: moves.FieldIsContact,
		})
		_node.IsContact = value
	}
	if value, ok := mc.mutation.IsCanGuard(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: moves.FieldIsCanGuard,
		})
		_node.IsCanGuard = value
	}
	if nodes := mc.mutation.ToTrainedPokemonMove1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove1Table,
			Columns: []string{moves.ToTrainedPokemonMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ToTrainedPokemonMove2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove2Table,
			Columns: []string{moves.ToTrainedPokemonMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ToTrainedPokemonMove3IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove3Table,
			Columns: []string{moves.ToTrainedPokemonMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ToTrainedPokemonMove4IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove4Table,
			Columns: []string{moves.ToTrainedPokemonMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MoveToPokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   moves.MoveToPokemonTable,
			Columns: moves.MoveToPokemonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MovesCreateBulk is the builder for creating many Moves entities in bulk.
type MovesCreateBulk struct {
	config
	builders []*MovesCreate
}

// Save creates the Moves entities in the database.
func (mcb *MovesCreateBulk) Save(ctx context.Context) ([]*Moves, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Moves, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MovesCreateBulk) SaveX(ctx context.Context) []*Moves {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MovesCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MovesCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
