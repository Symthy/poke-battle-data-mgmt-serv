// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/partyresultrecord"
)

// PartyResultRecord is the model entity for the PartyResultRecord schema.
type PartyResultRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PartyID holds the value of the "party_id" field.
	PartyID int `json:"party_id,omitempty"`
	// Generation holds the value of the "generation" field.
	Generation int `json:"generation,omitempty"`
	// Seasen holds the value of the "seasen" field.
	Seasen int `json:"seasen,omitempty"`
	// MaxRate holds the value of the "max_rate" field.
	MaxRate int `json:"max_rate,omitempty"`
	// MaxRanking holds the value of the "max_ranking" field.
	MaxRanking int `json:"max_ranking,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartyResultRecordQuery when eager-loading is set.
	Edges PartyResultRecordEdges `json:"edges"`
}

// PartyResultRecordEdges holds the relations/edges for other nodes in the graph.
type PartyResultRecordEdges struct {
	// ResultToParty holds the value of the result_to_party edge.
	ResultToParty *Party `json:"result_to_party,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResultToPartyOrErr returns the ResultToParty value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartyResultRecordEdges) ResultToPartyOrErr() (*Party, error) {
	if e.loadedTypes[0] {
		if e.ResultToParty == nil {
			// The edge result_to_party was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: party.Label}
		}
		return e.ResultToParty, nil
	}
	return nil, &NotLoadedError{edge: "result_to_party"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PartyResultRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case partyresultrecord.FieldID, partyresultrecord.FieldPartyID, partyresultrecord.FieldGeneration, partyresultrecord.FieldSeasen, partyresultrecord.FieldMaxRate, partyresultrecord.FieldMaxRanking:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PartyResultRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PartyResultRecord fields.
func (prr *PartyResultRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partyresultrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			prr.ID = int(value.Int64)
		case partyresultrecord.FieldPartyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field party_id", values[i])
			} else if value.Valid {
				prr.PartyID = int(value.Int64)
			}
		case partyresultrecord.FieldGeneration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field generation", values[i])
			} else if value.Valid {
				prr.Generation = int(value.Int64)
			}
		case partyresultrecord.FieldSeasen:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seasen", values[i])
			} else if value.Valid {
				prr.Seasen = int(value.Int64)
			}
		case partyresultrecord.FieldMaxRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_rate", values[i])
			} else if value.Valid {
				prr.MaxRate = int(value.Int64)
			}
		case partyresultrecord.FieldMaxRanking:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_ranking", values[i])
			} else if value.Valid {
				prr.MaxRanking = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryResultToParty queries the "result_to_party" edge of the PartyResultRecord entity.
func (prr *PartyResultRecord) QueryResultToParty() *PartyQuery {
	return (&PartyResultRecordClient{config: prr.config}).QueryResultToParty(prr)
}

// Update returns a builder for updating this PartyResultRecord.
// Note that you need to call PartyResultRecord.Unwrap() before calling this method if this PartyResultRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (prr *PartyResultRecord) Update() *PartyResultRecordUpdateOne {
	return (&PartyResultRecordClient{config: prr.config}).UpdateOne(prr)
}

// Unwrap unwraps the PartyResultRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (prr *PartyResultRecord) Unwrap() *PartyResultRecord {
	tx, ok := prr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PartyResultRecord is not a transactional entity")
	}
	prr.config.driver = tx.drv
	return prr
}

// String implements the fmt.Stringer.
func (prr *PartyResultRecord) String() string {
	var builder strings.Builder
	builder.WriteString("PartyResultRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", prr.ID))
	builder.WriteString(", party_id=")
	builder.WriteString(fmt.Sprintf("%v", prr.PartyID))
	builder.WriteString(", generation=")
	builder.WriteString(fmt.Sprintf("%v", prr.Generation))
	builder.WriteString(", seasen=")
	builder.WriteString(fmt.Sprintf("%v", prr.Seasen))
	builder.WriteString(", max_rate=")
	builder.WriteString(fmt.Sprintf("%v", prr.MaxRate))
	builder.WriteString(", max_ranking=")
	builder.WriteString(fmt.Sprintf("%v", prr.MaxRanking))
	builder.WriteByte(')')
	return builder.String()
}

// PartyResultRecords is a parsable slice of PartyResultRecord.
type PartyResultRecords []*PartyResultRecord

func (prr PartyResultRecords) config(cfg config) {
	for _i := range prr {
		prr[_i].config = cfg
	}
}
