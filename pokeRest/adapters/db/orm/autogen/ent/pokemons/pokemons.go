// Code generated by entc, DO NOT EDIT.

package pokemons

import (
	"fmt"

	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

const (
	// Label holds the string label denoting the pokemons type in the database.
	Label = "pokemons"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPokedexNo holds the string denoting the pokedex_no field in the database.
	FieldPokedexNo = "pokedex_no"
	// FieldFormNo holds the string denoting the form_no field in the database.
	FieldFormNo = "form_no"
	// FieldFormName holds the string denoting the form_name field in the database.
	FieldFormName = "form_name"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEnglishName holds the string denoting the english_name field in the database.
	FieldEnglishName = "english_name"
	// FieldType1 holds the string denoting the type1 field in the database.
	FieldType1 = "type1"
	// FieldType2 holds the string denoting the type2 field in the database.
	FieldType2 = "type2"
	// FieldAbilityId1 holds the string denoting the ability_id1 field in the database.
	FieldAbilityId1 = "ability_id1"
	// FieldAbilityId2 holds the string denoting the ability_id2 field in the database.
	FieldAbilityId2 = "ability_id2"
	// FieldHiddenAbilityID holds the string denoting the hidden_ability_id field in the database.
	FieldHiddenAbilityID = "hidden_ability_id"
	// FieldIsFinalEvolution holds the string denoting the is_final_evolution field in the database.
	FieldIsFinalEvolution = "is_final_evolution"
	// FieldBaseStatsH holds the string denoting the base_stats_h field in the database.
	FieldBaseStatsH = "base_stats_h"
	// FieldBaseStatsA holds the string denoting the base_stats_a field in the database.
	FieldBaseStatsA = "base_stats_a"
	// FieldBaseStatsB holds the string denoting the base_stats_b field in the database.
	FieldBaseStatsB = "base_stats_b"
	// FieldBaseStatsC holds the string denoting the base_stats_c field in the database.
	FieldBaseStatsC = "base_stats_c"
	// FieldBaseStatsD holds the string denoting the base_stats_d field in the database.
	FieldBaseStatsD = "base_stats_d"
	// FieldBaseStatsS holds the string denoting the base_stats_s field in the database.
	FieldBaseStatsS = "base_stats_s"
	// EdgeAbility1 holds the string denoting the ability1 edge name in mutations.
	EdgeAbility1 = "ability1"
	// EdgeAbility2 holds the string denoting the ability2 edge name in mutations.
	EdgeAbility2 = "ability2"
	// EdgeHiddenAbility holds the string denoting the hidden_ability edge name in mutations.
	EdgeHiddenAbility = "hidden_ability"
	// EdgeForm holds the string denoting the form edge name in mutations.
	EdgeForm = "form"
	// EdgeToTrainedPokemon holds the string denoting the to_trained_pokemon edge name in mutations.
	EdgeToTrainedPokemon = "to_trained_pokemon"
	// EdgePokemonToMove holds the string denoting the pokemon_to_move edge name in mutations.
	EdgePokemonToMove = "pokemon_to_move"
	// Table holds the table name of the pokemons in the database.
	Table = "pokemons"
	// Ability1Table is the table that holds the ability1 relation/edge.
	Ability1Table = "pokemons"
	// Ability1InverseTable is the table name for the Abilities entity.
	// It exists in this package in order to avoid circular dependency with the "abilities" package.
	Ability1InverseTable = "abilities"
	// Ability1Column is the table column denoting the ability1 relation/edge.
	Ability1Column = "ability_id1"
	// Ability2Table is the table that holds the ability2 relation/edge.
	Ability2Table = "pokemons"
	// Ability2InverseTable is the table name for the Abilities entity.
	// It exists in this package in order to avoid circular dependency with the "abilities" package.
	Ability2InverseTable = "abilities"
	// Ability2Column is the table column denoting the ability2 relation/edge.
	Ability2Column = "ability_id2"
	// HiddenAbilityTable is the table that holds the hidden_ability relation/edge.
	HiddenAbilityTable = "pokemons"
	// HiddenAbilityInverseTable is the table name for the Abilities entity.
	// It exists in this package in order to avoid circular dependency with the "abilities" package.
	HiddenAbilityInverseTable = "abilities"
	// HiddenAbilityColumn is the table column denoting the hidden_ability relation/edge.
	HiddenAbilityColumn = "hidden_ability_id"
	// FormTable is the table that holds the form relation/edge.
	FormTable = "pokemons"
	// FormInverseTable is the table name for the Forms entity.
	// It exists in this package in order to avoid circular dependency with the "forms" package.
	FormInverseTable = "forms"
	// FormColumn is the table column denoting the form relation/edge.
	FormColumn = "form_no"
	// ToTrainedPokemonTable is the table that holds the to_trained_pokemon relation/edge.
	ToTrainedPokemonTable = "trained_pokemons"
	// ToTrainedPokemonInverseTable is the table name for the TrainedPokemons entity.
	// It exists in this package in order to avoid circular dependency with the "trainedpokemons" package.
	ToTrainedPokemonInverseTable = "trained_pokemons"
	// ToTrainedPokemonColumn is the table column denoting the to_trained_pokemon relation/edge.
	ToTrainedPokemonColumn = "pokemon_id"
	// PokemonToMoveTable is the table that holds the pokemon_to_move relation/edge. The primary key declared below.
	PokemonToMoveTable = "moves_move_to_pokemon"
	// PokemonToMoveInverseTable is the table name for the Moves entity.
	// It exists in this package in order to avoid circular dependency with the "moves" package.
	PokemonToMoveInverseTable = "moves"
)

// Columns holds all SQL columns for pokemons fields.
var Columns = []string{
	FieldID,
	FieldPokedexNo,
	FieldFormNo,
	FieldFormName,
	FieldName,
	FieldEnglishName,
	FieldType1,
	FieldType2,
	FieldAbilityId1,
	FieldAbilityId2,
	FieldHiddenAbilityID,
	FieldIsFinalEvolution,
	FieldBaseStatsH,
	FieldBaseStatsA,
	FieldBaseStatsB,
	FieldBaseStatsC,
	FieldBaseStatsD,
	FieldBaseStatsS,
}

var (
	// PokemonToMovePrimaryKey and PokemonToMoveColumn2 are the table columns denoting the
	// primary key for the pokemon_to_move relation (M2M).
	PokemonToMovePrimaryKey = []string{"moves_id", "pokemons_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PokedexNoValidator is a validator for the "pokedex_no" field. It is called by the builders before save.
	PokedexNoValidator func(int) error
	// FormNoValidator is a validator for the "form_no" field. It is called by the builders before save.
	FormNoValidator func(int) error
	// FormNameValidator is a validator for the "form_name" field. It is called by the builders before save.
	FormNameValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EnglishNameValidator is a validator for the "english_name" field. It is called by the builders before save.
	EnglishNameValidator func(string) error
	// AbilityId1Validator is a validator for the "ability_id1" field. It is called by the builders before save.
	AbilityId1Validator func(int) error
	// AbilityId2Validator is a validator for the "ability_id2" field. It is called by the builders before save.
	AbilityId2Validator func(int) error
	// HiddenAbilityIDValidator is a validator for the "hidden_ability_id" field. It is called by the builders before save.
	HiddenAbilityIDValidator func(int) error
	// DefaultIsFinalEvolution holds the default value on creation for the "is_final_evolution" field.
	DefaultIsFinalEvolution bool
	// DefaultBaseStatsH holds the default value on creation for the "base_stats_h" field.
	DefaultBaseStatsH int
	// BaseStatsHValidator is a validator for the "base_stats_h" field. It is called by the builders before save.
	BaseStatsHValidator func(int) error
	// DefaultBaseStatsA holds the default value on creation for the "base_stats_a" field.
	DefaultBaseStatsA int
	// BaseStatsAValidator is a validator for the "base_stats_a" field. It is called by the builders before save.
	BaseStatsAValidator func(int) error
	// DefaultBaseStatsB holds the default value on creation for the "base_stats_b" field.
	DefaultBaseStatsB int
	// BaseStatsBValidator is a validator for the "base_stats_b" field. It is called by the builders before save.
	BaseStatsBValidator func(int) error
	// DefaultBaseStatsC holds the default value on creation for the "base_stats_c" field.
	DefaultBaseStatsC int
	// BaseStatsCValidator is a validator for the "base_stats_c" field. It is called by the builders before save.
	BaseStatsCValidator func(int) error
	// DefaultBaseStatsD holds the default value on creation for the "base_stats_d" field.
	DefaultBaseStatsD int
	// BaseStatsDValidator is a validator for the "base_stats_d" field. It is called by the builders before save.
	BaseStatsDValidator func(int) error
	// DefaultBaseStatsS holds the default value on creation for the "base_stats_s" field.
	DefaultBaseStatsS int
	// BaseStatsSValidator is a validator for the "base_stats_s" field. It is called by the builders before save.
	BaseStatsSValidator func(int) error
)

// Type1Validator is a validator for the "type1" field enum values. It is called by the builders before save.
func Type1Validator(t property.Types) error {
	switch t {
	case "Normal", "Fighting", "Flying", "Poison", "Ground", "Rock", "Bug", "Ghost", "Steel", "Fire", "Water", "Grass", "Electric", "Psychic", "Ice", "Dragon", "Dark", "None":
		return nil
	default:
		return fmt.Errorf("pokemons: invalid enum value for type1 field: %q", t)
	}
}

// Type2Validator is a validator for the "type2" field enum values. It is called by the builders before save.
func Type2Validator(t property.Types) error {
	switch t {
	case "Normal", "Fighting", "Flying", "Poison", "Ground", "Rock", "Bug", "Ghost", "Steel", "Fire", "Water", "Grass", "Electric", "Psychic", "Ice", "Dragon", "Dark", "None":
		return nil
	default:
		return fmt.Errorf("pokemons: invalid enum value for type2 field: %q", t)
	}
}
