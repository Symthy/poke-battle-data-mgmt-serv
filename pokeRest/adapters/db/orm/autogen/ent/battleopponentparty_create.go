// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battleopponentparty"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battlerecords"
)

// BattleOpponentPartyCreate is the builder for creating a BattleOpponentParty entity.
type BattleOpponentPartyCreate struct {
	config
	mutation *BattleOpponentPartyMutation
	hooks    []Hook
}

// SetOpponentPokemonId1 sets the "opponent_pokemon_id1" field.
func (bopc *BattleOpponentPartyCreate) SetOpponentPokemonId1(i int) *BattleOpponentPartyCreate {
	bopc.mutation.SetOpponentPokemonId1(i)
	return bopc
}

// SetOpponentPokemonId2 sets the "opponent_pokemon_id2" field.
func (bopc *BattleOpponentPartyCreate) SetOpponentPokemonId2(i int) *BattleOpponentPartyCreate {
	bopc.mutation.SetOpponentPokemonId2(i)
	return bopc
}

// SetOpponentPokemonId3 sets the "opponent_pokemon_id3" field.
func (bopc *BattleOpponentPartyCreate) SetOpponentPokemonId3(i int) *BattleOpponentPartyCreate {
	bopc.mutation.SetOpponentPokemonId3(i)
	return bopc
}

// SetOpponentPokemonId4 sets the "opponent_pokemon_id4" field.
func (bopc *BattleOpponentPartyCreate) SetOpponentPokemonId4(i int) *BattleOpponentPartyCreate {
	bopc.mutation.SetOpponentPokemonId4(i)
	return bopc
}

// SetNillableOpponentPokemonId4 sets the "opponent_pokemon_id4" field if the given value is not nil.
func (bopc *BattleOpponentPartyCreate) SetNillableOpponentPokemonId4(i *int) *BattleOpponentPartyCreate {
	if i != nil {
		bopc.SetOpponentPokemonId4(*i)
	}
	return bopc
}

// SetOpponentPokemonId5 sets the "opponent_pokemon_id5" field.
func (bopc *BattleOpponentPartyCreate) SetOpponentPokemonId5(i int) *BattleOpponentPartyCreate {
	bopc.mutation.SetOpponentPokemonId5(i)
	return bopc
}

// SetNillableOpponentPokemonId5 sets the "opponent_pokemon_id5" field if the given value is not nil.
func (bopc *BattleOpponentPartyCreate) SetNillableOpponentPokemonId5(i *int) *BattleOpponentPartyCreate {
	if i != nil {
		bopc.SetOpponentPokemonId5(*i)
	}
	return bopc
}

// SetOpponentPokemonId6 sets the "opponent_pokemon_id6" field.
func (bopc *BattleOpponentPartyCreate) SetOpponentPokemonId6(i int) *BattleOpponentPartyCreate {
	bopc.mutation.SetOpponentPokemonId6(i)
	return bopc
}

// SetNillableOpponentPokemonId6 sets the "opponent_pokemon_id6" field if the given value is not nil.
func (bopc *BattleOpponentPartyCreate) SetNillableOpponentPokemonId6(i *int) *BattleOpponentPartyCreate {
	if i != nil {
		bopc.SetOpponentPokemonId6(*i)
	}
	return bopc
}

// AddBattleContentIDs adds the "battle_content" edge to the BattleRecords entity by IDs.
func (bopc *BattleOpponentPartyCreate) AddBattleContentIDs(ids ...int) *BattleOpponentPartyCreate {
	bopc.mutation.AddBattleContentIDs(ids...)
	return bopc
}

// AddBattleContent adds the "battle_content" edges to the BattleRecords entity.
func (bopc *BattleOpponentPartyCreate) AddBattleContent(b ...*BattleRecords) *BattleOpponentPartyCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bopc.AddBattleContentIDs(ids...)
}

// Mutation returns the BattleOpponentPartyMutation object of the builder.
func (bopc *BattleOpponentPartyCreate) Mutation() *BattleOpponentPartyMutation {
	return bopc.mutation
}

// Save creates the BattleOpponentParty in the database.
func (bopc *BattleOpponentPartyCreate) Save(ctx context.Context) (*BattleOpponentParty, error) {
	var (
		err  error
		node *BattleOpponentParty
	)
	if len(bopc.hooks) == 0 {
		if err = bopc.check(); err != nil {
			return nil, err
		}
		node, err = bopc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BattleOpponentPartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bopc.check(); err != nil {
				return nil, err
			}
			bopc.mutation = mutation
			if node, err = bopc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bopc.hooks) - 1; i >= 0; i-- {
			if bopc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bopc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bopc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bopc *BattleOpponentPartyCreate) SaveX(ctx context.Context) *BattleOpponentParty {
	v, err := bopc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bopc *BattleOpponentPartyCreate) Exec(ctx context.Context) error {
	_, err := bopc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bopc *BattleOpponentPartyCreate) ExecX(ctx context.Context) {
	if err := bopc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bopc *BattleOpponentPartyCreate) check() error {
	if _, ok := bopc.mutation.OpponentPokemonId1(); !ok {
		return &ValidationError{Name: "opponent_pokemon_id1", err: errors.New(`ent: missing required field "opponent_pokemon_id1"`)}
	}
	if v, ok := bopc.mutation.OpponentPokemonId1(); ok {
		if err := battleopponentparty.OpponentPokemonId1Validator(v); err != nil {
			return &ValidationError{Name: "opponent_pokemon_id1", err: fmt.Errorf(`ent: validator failed for field "opponent_pokemon_id1": %w`, err)}
		}
	}
	if _, ok := bopc.mutation.OpponentPokemonId2(); !ok {
		return &ValidationError{Name: "opponent_pokemon_id2", err: errors.New(`ent: missing required field "opponent_pokemon_id2"`)}
	}
	if v, ok := bopc.mutation.OpponentPokemonId2(); ok {
		if err := battleopponentparty.OpponentPokemonId2Validator(v); err != nil {
			return &ValidationError{Name: "opponent_pokemon_id2", err: fmt.Errorf(`ent: validator failed for field "opponent_pokemon_id2": %w`, err)}
		}
	}
	if _, ok := bopc.mutation.OpponentPokemonId3(); !ok {
		return &ValidationError{Name: "opponent_pokemon_id3", err: errors.New(`ent: missing required field "opponent_pokemon_id3"`)}
	}
	if v, ok := bopc.mutation.OpponentPokemonId3(); ok {
		if err := battleopponentparty.OpponentPokemonId3Validator(v); err != nil {
			return &ValidationError{Name: "opponent_pokemon_id3", err: fmt.Errorf(`ent: validator failed for field "opponent_pokemon_id3": %w`, err)}
		}
	}
	if v, ok := bopc.mutation.OpponentPokemonId4(); ok {
		if err := battleopponentparty.OpponentPokemonId4Validator(v); err != nil {
			return &ValidationError{Name: "opponent_pokemon_id4", err: fmt.Errorf(`ent: validator failed for field "opponent_pokemon_id4": %w`, err)}
		}
	}
	if v, ok := bopc.mutation.OpponentPokemonId5(); ok {
		if err := battleopponentparty.OpponentPokemonId5Validator(v); err != nil {
			return &ValidationError{Name: "opponent_pokemon_id5", err: fmt.Errorf(`ent: validator failed for field "opponent_pokemon_id5": %w`, err)}
		}
	}
	if v, ok := bopc.mutation.OpponentPokemonId6(); ok {
		if err := battleopponentparty.OpponentPokemonId6Validator(v); err != nil {
			return &ValidationError{Name: "opponent_pokemon_id6", err: fmt.Errorf(`ent: validator failed for field "opponent_pokemon_id6": %w`, err)}
		}
	}
	return nil
}

func (bopc *BattleOpponentPartyCreate) sqlSave(ctx context.Context) (*BattleOpponentParty, error) {
	_node, _spec := bopc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bopc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bopc *BattleOpponentPartyCreate) createSpec() (*BattleOpponentParty, *sqlgraph.CreateSpec) {
	var (
		_node = &BattleOpponentParty{config: bopc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: battleopponentparty.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: battleopponentparty.FieldID,
			},
		}
	)
	if value, ok := bopc.mutation.OpponentPokemonId1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battleopponentparty.FieldOpponentPokemonId1,
		})
		_node.OpponentPokemonId1 = value
	}
	if value, ok := bopc.mutation.OpponentPokemonId2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battleopponentparty.FieldOpponentPokemonId2,
		})
		_node.OpponentPokemonId2 = value
	}
	if value, ok := bopc.mutation.OpponentPokemonId3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battleopponentparty.FieldOpponentPokemonId3,
		})
		_node.OpponentPokemonId3 = value
	}
	if value, ok := bopc.mutation.OpponentPokemonId4(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battleopponentparty.FieldOpponentPokemonId4,
		})
		_node.OpponentPokemonId4 = value
	}
	if value, ok := bopc.mutation.OpponentPokemonId5(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battleopponentparty.FieldOpponentPokemonId5,
		})
		_node.OpponentPokemonId5 = value
	}
	if value, ok := bopc.mutation.OpponentPokemonId6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: battleopponentparty.FieldOpponentPokemonId6,
		})
		_node.OpponentPokemonId6 = value
	}
	if nodes := bopc.mutation.BattleContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   battleopponentparty.BattleContentTable,
			Columns: []string{battleopponentparty.BattleContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battlerecords.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BattleOpponentPartyCreateBulk is the builder for creating many BattleOpponentParty entities in bulk.
type BattleOpponentPartyCreateBulk struct {
	config
	builders []*BattleOpponentPartyCreate
}

// Save creates the BattleOpponentParty entities in the database.
func (bopcb *BattleOpponentPartyCreateBulk) Save(ctx context.Context) ([]*BattleOpponentParty, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bopcb.builders))
	nodes := make([]*BattleOpponentParty, len(bopcb.builders))
	mutators := make([]Mutator, len(bopcb.builders))
	for i := range bopcb.builders {
		func(i int, root context.Context) {
			builder := bopcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BattleOpponentPartyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bopcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bopcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bopcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bopcb *BattleOpponentPartyCreateBulk) SaveX(ctx context.Context) []*BattleOpponentParty {
	v, err := bopcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bopcb *BattleOpponentPartyCreateBulk) Exec(ctx context.Context) error {
	_, err := bopcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bopcb *BattleOpponentPartyCreateBulk) ExecX(ctx context.Context) {
	if err := bopcb.Exec(ctx); err != nil {
		panic(err)
	}
}
