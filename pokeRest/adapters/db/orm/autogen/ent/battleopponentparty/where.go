// Code generated by entc, DO NOT EDIT.

package battleopponentparty

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OpponentPokemonId1 applies equality check predicate on the "opponent_pokemon_id1" field. It's identical to OpponentPokemonId1EQ.
func OpponentPokemonId1(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId1), v))
	})
}

// OpponentPokemonId2 applies equality check predicate on the "opponent_pokemon_id2" field. It's identical to OpponentPokemonId2EQ.
func OpponentPokemonId2(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId2), v))
	})
}

// OpponentPokemonId3 applies equality check predicate on the "opponent_pokemon_id3" field. It's identical to OpponentPokemonId3EQ.
func OpponentPokemonId3(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId3), v))
	})
}

// OpponentPokemonId4 applies equality check predicate on the "opponent_pokemon_id4" field. It's identical to OpponentPokemonId4EQ.
func OpponentPokemonId4(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId4), v))
	})
}

// OpponentPokemonId5 applies equality check predicate on the "opponent_pokemon_id5" field. It's identical to OpponentPokemonId5EQ.
func OpponentPokemonId5(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId5), v))
	})
}

// OpponentPokemonId6 applies equality check predicate on the "opponent_pokemon_id6" field. It's identical to OpponentPokemonId6EQ.
func OpponentPokemonId6(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId6), v))
	})
}

// OpponentPokemonId1EQ applies the EQ predicate on the "opponent_pokemon_id1" field.
func OpponentPokemonId1EQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId1), v))
	})
}

// OpponentPokemonId1NEQ applies the NEQ predicate on the "opponent_pokemon_id1" field.
func OpponentPokemonId1NEQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentPokemonId1), v))
	})
}

// OpponentPokemonId1In applies the In predicate on the "opponent_pokemon_id1" field.
func OpponentPokemonId1In(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentPokemonId1), v...))
	})
}

// OpponentPokemonId1NotIn applies the NotIn predicate on the "opponent_pokemon_id1" field.
func OpponentPokemonId1NotIn(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentPokemonId1), v...))
	})
}

// OpponentPokemonId1GT applies the GT predicate on the "opponent_pokemon_id1" field.
func OpponentPokemonId1GT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentPokemonId1), v))
	})
}

// OpponentPokemonId1GTE applies the GTE predicate on the "opponent_pokemon_id1" field.
func OpponentPokemonId1GTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentPokemonId1), v))
	})
}

// OpponentPokemonId1LT applies the LT predicate on the "opponent_pokemon_id1" field.
func OpponentPokemonId1LT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentPokemonId1), v))
	})
}

// OpponentPokemonId1LTE applies the LTE predicate on the "opponent_pokemon_id1" field.
func OpponentPokemonId1LTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentPokemonId1), v))
	})
}

// OpponentPokemonId2EQ applies the EQ predicate on the "opponent_pokemon_id2" field.
func OpponentPokemonId2EQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId2), v))
	})
}

// OpponentPokemonId2NEQ applies the NEQ predicate on the "opponent_pokemon_id2" field.
func OpponentPokemonId2NEQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentPokemonId2), v))
	})
}

// OpponentPokemonId2In applies the In predicate on the "opponent_pokemon_id2" field.
func OpponentPokemonId2In(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentPokemonId2), v...))
	})
}

// OpponentPokemonId2NotIn applies the NotIn predicate on the "opponent_pokemon_id2" field.
func OpponentPokemonId2NotIn(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentPokemonId2), v...))
	})
}

// OpponentPokemonId2GT applies the GT predicate on the "opponent_pokemon_id2" field.
func OpponentPokemonId2GT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentPokemonId2), v))
	})
}

// OpponentPokemonId2GTE applies the GTE predicate on the "opponent_pokemon_id2" field.
func OpponentPokemonId2GTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentPokemonId2), v))
	})
}

// OpponentPokemonId2LT applies the LT predicate on the "opponent_pokemon_id2" field.
func OpponentPokemonId2LT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentPokemonId2), v))
	})
}

// OpponentPokemonId2LTE applies the LTE predicate on the "opponent_pokemon_id2" field.
func OpponentPokemonId2LTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentPokemonId2), v))
	})
}

// OpponentPokemonId3EQ applies the EQ predicate on the "opponent_pokemon_id3" field.
func OpponentPokemonId3EQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId3), v))
	})
}

// OpponentPokemonId3NEQ applies the NEQ predicate on the "opponent_pokemon_id3" field.
func OpponentPokemonId3NEQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentPokemonId3), v))
	})
}

// OpponentPokemonId3In applies the In predicate on the "opponent_pokemon_id3" field.
func OpponentPokemonId3In(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentPokemonId3), v...))
	})
}

// OpponentPokemonId3NotIn applies the NotIn predicate on the "opponent_pokemon_id3" field.
func OpponentPokemonId3NotIn(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentPokemonId3), v...))
	})
}

// OpponentPokemonId3GT applies the GT predicate on the "opponent_pokemon_id3" field.
func OpponentPokemonId3GT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentPokemonId3), v))
	})
}

// OpponentPokemonId3GTE applies the GTE predicate on the "opponent_pokemon_id3" field.
func OpponentPokemonId3GTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentPokemonId3), v))
	})
}

// OpponentPokemonId3LT applies the LT predicate on the "opponent_pokemon_id3" field.
func OpponentPokemonId3LT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentPokemonId3), v))
	})
}

// OpponentPokemonId3LTE applies the LTE predicate on the "opponent_pokemon_id3" field.
func OpponentPokemonId3LTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentPokemonId3), v))
	})
}

// OpponentPokemonId4EQ applies the EQ predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4EQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId4), v))
	})
}

// OpponentPokemonId4NEQ applies the NEQ predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4NEQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentPokemonId4), v))
	})
}

// OpponentPokemonId4In applies the In predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4In(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentPokemonId4), v...))
	})
}

// OpponentPokemonId4NotIn applies the NotIn predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4NotIn(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentPokemonId4), v...))
	})
}

// OpponentPokemonId4GT applies the GT predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4GT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentPokemonId4), v))
	})
}

// OpponentPokemonId4GTE applies the GTE predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4GTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentPokemonId4), v))
	})
}

// OpponentPokemonId4LT applies the LT predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4LT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentPokemonId4), v))
	})
}

// OpponentPokemonId4LTE applies the LTE predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4LTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentPokemonId4), v))
	})
}

// OpponentPokemonId4IsNil applies the IsNil predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4IsNil() predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOpponentPokemonId4)))
	})
}

// OpponentPokemonId4NotNil applies the NotNil predicate on the "opponent_pokemon_id4" field.
func OpponentPokemonId4NotNil() predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOpponentPokemonId4)))
	})
}

// OpponentPokemonId5EQ applies the EQ predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5EQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId5), v))
	})
}

// OpponentPokemonId5NEQ applies the NEQ predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5NEQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentPokemonId5), v))
	})
}

// OpponentPokemonId5In applies the In predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5In(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentPokemonId5), v...))
	})
}

// OpponentPokemonId5NotIn applies the NotIn predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5NotIn(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentPokemonId5), v...))
	})
}

// OpponentPokemonId5GT applies the GT predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5GT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentPokemonId5), v))
	})
}

// OpponentPokemonId5GTE applies the GTE predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5GTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentPokemonId5), v))
	})
}

// OpponentPokemonId5LT applies the LT predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5LT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentPokemonId5), v))
	})
}

// OpponentPokemonId5LTE applies the LTE predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5LTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentPokemonId5), v))
	})
}

// OpponentPokemonId5IsNil applies the IsNil predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5IsNil() predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOpponentPokemonId5)))
	})
}

// OpponentPokemonId5NotNil applies the NotNil predicate on the "opponent_pokemon_id5" field.
func OpponentPokemonId5NotNil() predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOpponentPokemonId5)))
	})
}

// OpponentPokemonId6EQ applies the EQ predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6EQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpponentPokemonId6), v))
	})
}

// OpponentPokemonId6NEQ applies the NEQ predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6NEQ(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpponentPokemonId6), v))
	})
}

// OpponentPokemonId6In applies the In predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6In(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpponentPokemonId6), v...))
	})
}

// OpponentPokemonId6NotIn applies the NotIn predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6NotIn(vs ...int) predicate.BattleOpponentParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpponentPokemonId6), v...))
	})
}

// OpponentPokemonId6GT applies the GT predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6GT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpponentPokemonId6), v))
	})
}

// OpponentPokemonId6GTE applies the GTE predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6GTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpponentPokemonId6), v))
	})
}

// OpponentPokemonId6LT applies the LT predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6LT(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpponentPokemonId6), v))
	})
}

// OpponentPokemonId6LTE applies the LTE predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6LTE(v int) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpponentPokemonId6), v))
	})
}

// OpponentPokemonId6IsNil applies the IsNil predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6IsNil() predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOpponentPokemonId6)))
	})
}

// OpponentPokemonId6NotNil applies the NotNil predicate on the "opponent_pokemon_id6" field.
func OpponentPokemonId6NotNil() predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOpponentPokemonId6)))
	})
}

// HasBattleContent applies the HasEdge predicate on the "battle_content" edge.
func HasBattleContent() predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BattleContentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BattleContentTable, BattleContentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBattleContentWith applies the HasEdge predicate on the "battle_content" edge with a given conditions (other predicates).
func HasBattleContentWith(preds ...predicate.BattleRecords) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BattleContentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BattleContentTable, BattleContentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BattleOpponentParty) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BattleOpponentParty) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BattleOpponentParty) predicate.BattleOpponentParty {
	return predicate.BattleOpponentParty(func(s *sql.Selector) {
		p(s.Not())
	})
}
