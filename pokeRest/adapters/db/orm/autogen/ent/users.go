// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// Users is the model entity for the Users schema.
type Users struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Role holds the value of the "role" field.
	Role property.Role `json:"role,omitempty"`
	// Profile holds the value of the "profile" field.
	Profile string `json:"profile,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsersQuery when eager-loading is set.
	Edges UsersEdges `json:"edges"`
}

// UsersEdges holds the relations/edges for other nodes in the graph.
type UsersEdges struct {
	// UserTrainedPokemon holds the value of the user_trained_pokemon edge.
	UserTrainedPokemon []*TrainedPokemons `json:"user_trained_pokemon,omitempty"`
	// UserTrainedPokemonDetail holds the value of the user_trained_pokemon_detail edge.
	UserTrainedPokemonDetail []*TrainedPokemonDetails `json:"user_trained_pokemon_detail,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserTrainedPokemonOrErr returns the UserTrainedPokemon value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) UserTrainedPokemonOrErr() ([]*TrainedPokemons, error) {
	if e.loadedTypes[0] {
		return e.UserTrainedPokemon, nil
	}
	return nil, &NotLoadedError{edge: "user_trained_pokemon"}
}

// UserTrainedPokemonDetailOrErr returns the UserTrainedPokemonDetail value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) UserTrainedPokemonDetailOrErr() ([]*TrainedPokemonDetails, error) {
	if e.loadedTypes[1] {
		return e.UserTrainedPokemonDetail, nil
	}
	return nil, &NotLoadedError{edge: "user_trained_pokemon_detail"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Users) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case users.FieldID:
			values[i] = new(sql.NullInt64)
		case users.FieldName, users.FieldDisplayName, users.FieldEmail, users.FieldRole, users.FieldProfile:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Users", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Users fields.
func (u *Users) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case users.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case users.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case users.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case users.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case users.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = property.Role(value.String)
			}
		case users.FieldProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile", values[i])
			} else if value.Valid {
				u.Profile = value.String
			}
		}
	}
	return nil
}

// QueryUserTrainedPokemon queries the "user_trained_pokemon" edge of the Users entity.
func (u *Users) QueryUserTrainedPokemon() *TrainedPokemonsQuery {
	return (&UsersClient{config: u.config}).QueryUserTrainedPokemon(u)
}

// QueryUserTrainedPokemonDetail queries the "user_trained_pokemon_detail" edge of the Users entity.
func (u *Users) QueryUserTrainedPokemonDetail() *TrainedPokemonDetailsQuery {
	return (&UsersClient{config: u.config}).QueryUserTrainedPokemonDetail(u)
}

// Update returns a builder for updating this Users.
// Note that you need to call Users.Unwrap() before calling this method if this Users
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Users) Update() *UsersUpdateOne {
	return (&UsersClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the Users entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Users) Unwrap() *Users {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Users is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Users) String() string {
	var builder strings.Builder
	builder.WriteString("Users(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", display_name=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", profile=")
	builder.WriteString(u.Profile)
	builder.WriteByte(')')
	return builder.String()
}

// UsersSlice is a parsable slice of Users.
type UsersSlice []*Users

func (u UsersSlice) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
