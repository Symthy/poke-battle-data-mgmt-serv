// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/forms"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// PokemonsUpdate is the builder for updating Pokemons entities.
type PokemonsUpdate struct {
	config
	hooks    []Hook
	mutation *PokemonsMutation
}

// Where appends a list predicates to the PokemonsUpdate builder.
func (pu *PokemonsUpdate) Where(ps ...predicate.Pokemons) *PokemonsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPokedexNo sets the "pokedex_no" field.
func (pu *PokemonsUpdate) SetPokedexNo(i int) *PokemonsUpdate {
	pu.mutation.ResetPokedexNo()
	pu.mutation.SetPokedexNo(i)
	return pu
}

// AddPokedexNo adds i to the "pokedex_no" field.
func (pu *PokemonsUpdate) AddPokedexNo(i int) *PokemonsUpdate {
	pu.mutation.AddPokedexNo(i)
	return pu
}

// SetFormNo sets the "form_no" field.
func (pu *PokemonsUpdate) SetFormNo(i int) *PokemonsUpdate {
	pu.mutation.SetFormNo(i)
	return pu
}

// SetFormName sets the "form_name" field.
func (pu *PokemonsUpdate) SetFormName(s string) *PokemonsUpdate {
	pu.mutation.SetFormName(s)
	return pu
}

// SetName sets the "name" field.
func (pu *PokemonsUpdate) SetName(s string) *PokemonsUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetEnglishName sets the "english_name" field.
func (pu *PokemonsUpdate) SetEnglishName(s string) *PokemonsUpdate {
	pu.mutation.SetEnglishName(s)
	return pu
}

// SetType1 sets the "type1" field.
func (pu *PokemonsUpdate) SetType1(pr property.Types) *PokemonsUpdate {
	pu.mutation.SetType1(pr)
	return pu
}

// SetType2 sets the "type2" field.
func (pu *PokemonsUpdate) SetType2(pr property.Types) *PokemonsUpdate {
	pu.mutation.SetType2(pr)
	return pu
}

// SetNillableType2 sets the "type2" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableType2(pr *property.Types) *PokemonsUpdate {
	if pr != nil {
		pu.SetType2(*pr)
	}
	return pu
}

// ClearType2 clears the value of the "type2" field.
func (pu *PokemonsUpdate) ClearType2() *PokemonsUpdate {
	pu.mutation.ClearType2()
	return pu
}

// SetAbilityId1 sets the "ability_id1" field.
func (pu *PokemonsUpdate) SetAbilityId1(i int) *PokemonsUpdate {
	pu.mutation.SetAbilityId1(i)
	return pu
}

// SetAbilityId2 sets the "ability_id2" field.
func (pu *PokemonsUpdate) SetAbilityId2(i int) *PokemonsUpdate {
	pu.mutation.SetAbilityId2(i)
	return pu
}

// SetNillableAbilityId2 sets the "ability_id2" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableAbilityId2(i *int) *PokemonsUpdate {
	if i != nil {
		pu.SetAbilityId2(*i)
	}
	return pu
}

// ClearAbilityId2 clears the value of the "ability_id2" field.
func (pu *PokemonsUpdate) ClearAbilityId2() *PokemonsUpdate {
	pu.mutation.ClearAbilityId2()
	return pu
}

// SetHiddenAbilityID sets the "hidden_ability_id" field.
func (pu *PokemonsUpdate) SetHiddenAbilityID(i int) *PokemonsUpdate {
	pu.mutation.SetHiddenAbilityID(i)
	return pu
}

// SetNillableHiddenAbilityID sets the "hidden_ability_id" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableHiddenAbilityID(i *int) *PokemonsUpdate {
	if i != nil {
		pu.SetHiddenAbilityID(*i)
	}
	return pu
}

// ClearHiddenAbilityID clears the value of the "hidden_ability_id" field.
func (pu *PokemonsUpdate) ClearHiddenAbilityID() *PokemonsUpdate {
	pu.mutation.ClearHiddenAbilityID()
	return pu
}

// SetIsFinalEvolution sets the "is_final_evolution" field.
func (pu *PokemonsUpdate) SetIsFinalEvolution(b bool) *PokemonsUpdate {
	pu.mutation.SetIsFinalEvolution(b)
	return pu
}

// SetNillableIsFinalEvolution sets the "is_final_evolution" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableIsFinalEvolution(b *bool) *PokemonsUpdate {
	if b != nil {
		pu.SetIsFinalEvolution(*b)
	}
	return pu
}

// SetBaseStatsH sets the "base_stats_h" field.
func (pu *PokemonsUpdate) SetBaseStatsH(i int) *PokemonsUpdate {
	pu.mutation.ResetBaseStatsH()
	pu.mutation.SetBaseStatsH(i)
	return pu
}

// SetNillableBaseStatsH sets the "base_stats_h" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableBaseStatsH(i *int) *PokemonsUpdate {
	if i != nil {
		pu.SetBaseStatsH(*i)
	}
	return pu
}

// AddBaseStatsH adds i to the "base_stats_h" field.
func (pu *PokemonsUpdate) AddBaseStatsH(i int) *PokemonsUpdate {
	pu.mutation.AddBaseStatsH(i)
	return pu
}

// SetBaseStatsA sets the "base_stats_a" field.
func (pu *PokemonsUpdate) SetBaseStatsA(i int) *PokemonsUpdate {
	pu.mutation.ResetBaseStatsA()
	pu.mutation.SetBaseStatsA(i)
	return pu
}

// SetNillableBaseStatsA sets the "base_stats_a" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableBaseStatsA(i *int) *PokemonsUpdate {
	if i != nil {
		pu.SetBaseStatsA(*i)
	}
	return pu
}

// AddBaseStatsA adds i to the "base_stats_a" field.
func (pu *PokemonsUpdate) AddBaseStatsA(i int) *PokemonsUpdate {
	pu.mutation.AddBaseStatsA(i)
	return pu
}

// SetBaseStatsB sets the "base_stats_b" field.
func (pu *PokemonsUpdate) SetBaseStatsB(i int) *PokemonsUpdate {
	pu.mutation.ResetBaseStatsB()
	pu.mutation.SetBaseStatsB(i)
	return pu
}

// SetNillableBaseStatsB sets the "base_stats_b" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableBaseStatsB(i *int) *PokemonsUpdate {
	if i != nil {
		pu.SetBaseStatsB(*i)
	}
	return pu
}

// AddBaseStatsB adds i to the "base_stats_b" field.
func (pu *PokemonsUpdate) AddBaseStatsB(i int) *PokemonsUpdate {
	pu.mutation.AddBaseStatsB(i)
	return pu
}

// SetBaseStatsC sets the "base_stats_c" field.
func (pu *PokemonsUpdate) SetBaseStatsC(i int) *PokemonsUpdate {
	pu.mutation.ResetBaseStatsC()
	pu.mutation.SetBaseStatsC(i)
	return pu
}

// SetNillableBaseStatsC sets the "base_stats_c" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableBaseStatsC(i *int) *PokemonsUpdate {
	if i != nil {
		pu.SetBaseStatsC(*i)
	}
	return pu
}

// AddBaseStatsC adds i to the "base_stats_c" field.
func (pu *PokemonsUpdate) AddBaseStatsC(i int) *PokemonsUpdate {
	pu.mutation.AddBaseStatsC(i)
	return pu
}

// SetBaseStatsD sets the "base_stats_d" field.
func (pu *PokemonsUpdate) SetBaseStatsD(i int) *PokemonsUpdate {
	pu.mutation.ResetBaseStatsD()
	pu.mutation.SetBaseStatsD(i)
	return pu
}

// SetNillableBaseStatsD sets the "base_stats_d" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableBaseStatsD(i *int) *PokemonsUpdate {
	if i != nil {
		pu.SetBaseStatsD(*i)
	}
	return pu
}

// AddBaseStatsD adds i to the "base_stats_d" field.
func (pu *PokemonsUpdate) AddBaseStatsD(i int) *PokemonsUpdate {
	pu.mutation.AddBaseStatsD(i)
	return pu
}

// SetBaseStatsS sets the "base_stats_s" field.
func (pu *PokemonsUpdate) SetBaseStatsS(i int) *PokemonsUpdate {
	pu.mutation.ResetBaseStatsS()
	pu.mutation.SetBaseStatsS(i)
	return pu
}

// SetNillableBaseStatsS sets the "base_stats_s" field if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableBaseStatsS(i *int) *PokemonsUpdate {
	if i != nil {
		pu.SetBaseStatsS(*i)
	}
	return pu
}

// AddBaseStatsS adds i to the "base_stats_s" field.
func (pu *PokemonsUpdate) AddBaseStatsS(i int) *PokemonsUpdate {
	pu.mutation.AddBaseStatsS(i)
	return pu
}

// SetAbility1ID sets the "ability1" edge to the Abilities entity by ID.
func (pu *PokemonsUpdate) SetAbility1ID(id int) *PokemonsUpdate {
	pu.mutation.SetAbility1ID(id)
	return pu
}

// SetAbility1 sets the "ability1" edge to the Abilities entity.
func (pu *PokemonsUpdate) SetAbility1(a *Abilities) *PokemonsUpdate {
	return pu.SetAbility1ID(a.ID)
}

// SetAbility2ID sets the "ability2" edge to the Abilities entity by ID.
func (pu *PokemonsUpdate) SetAbility2ID(id int) *PokemonsUpdate {
	pu.mutation.SetAbility2ID(id)
	return pu
}

// SetNillableAbility2ID sets the "ability2" edge to the Abilities entity by ID if the given value is not nil.
func (pu *PokemonsUpdate) SetNillableAbility2ID(id *int) *PokemonsUpdate {
	if id != nil {
		pu = pu.SetAbility2ID(*id)
	}
	return pu
}

// SetAbility2 sets the "ability2" edge to the Abilities entity.
func (pu *PokemonsUpdate) SetAbility2(a *Abilities) *PokemonsUpdate {
	return pu.SetAbility2ID(a.ID)
}

// SetHiddenAbility sets the "hidden_ability" edge to the Abilities entity.
func (pu *PokemonsUpdate) SetHiddenAbility(a *Abilities) *PokemonsUpdate {
	return pu.SetHiddenAbilityID(a.ID)
}

// SetFormID sets the "form" edge to the Forms entity by ID.
func (pu *PokemonsUpdate) SetFormID(id int) *PokemonsUpdate {
	pu.mutation.SetFormID(id)
	return pu
}

// SetForm sets the "form" edge to the Forms entity.
func (pu *PokemonsUpdate) SetForm(f *Forms) *PokemonsUpdate {
	return pu.SetFormID(f.ID)
}

// AddToTrainedPokemonIDs adds the "to_trained_pokemon" edge to the TrainedPokemons entity by IDs.
func (pu *PokemonsUpdate) AddToTrainedPokemonIDs(ids ...int) *PokemonsUpdate {
	pu.mutation.AddToTrainedPokemonIDs(ids...)
	return pu
}

// AddToTrainedPokemon adds the "to_trained_pokemon" edges to the TrainedPokemons entity.
func (pu *PokemonsUpdate) AddToTrainedPokemon(t ...*TrainedPokemons) *PokemonsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddToTrainedPokemonIDs(ids...)
}

// AddPokemonToMoveIDs adds the "pokemon_to_move" edge to the Moves entity by IDs.
func (pu *PokemonsUpdate) AddPokemonToMoveIDs(ids ...int) *PokemonsUpdate {
	pu.mutation.AddPokemonToMoveIDs(ids...)
	return pu
}

// AddPokemonToMove adds the "pokemon_to_move" edges to the Moves entity.
func (pu *PokemonsUpdate) AddPokemonToMove(m ...*Moves) *PokemonsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddPokemonToMoveIDs(ids...)
}

// Mutation returns the PokemonsMutation object of the builder.
func (pu *PokemonsUpdate) Mutation() *PokemonsMutation {
	return pu.mutation
}

// ClearAbility1 clears the "ability1" edge to the Abilities entity.
func (pu *PokemonsUpdate) ClearAbility1() *PokemonsUpdate {
	pu.mutation.ClearAbility1()
	return pu
}

// ClearAbility2 clears the "ability2" edge to the Abilities entity.
func (pu *PokemonsUpdate) ClearAbility2() *PokemonsUpdate {
	pu.mutation.ClearAbility2()
	return pu
}

// ClearHiddenAbility clears the "hidden_ability" edge to the Abilities entity.
func (pu *PokemonsUpdate) ClearHiddenAbility() *PokemonsUpdate {
	pu.mutation.ClearHiddenAbility()
	return pu
}

// ClearForm clears the "form" edge to the Forms entity.
func (pu *PokemonsUpdate) ClearForm() *PokemonsUpdate {
	pu.mutation.ClearForm()
	return pu
}

// ClearToTrainedPokemon clears all "to_trained_pokemon" edges to the TrainedPokemons entity.
func (pu *PokemonsUpdate) ClearToTrainedPokemon() *PokemonsUpdate {
	pu.mutation.ClearToTrainedPokemon()
	return pu
}

// RemoveToTrainedPokemonIDs removes the "to_trained_pokemon" edge to TrainedPokemons entities by IDs.
func (pu *PokemonsUpdate) RemoveToTrainedPokemonIDs(ids ...int) *PokemonsUpdate {
	pu.mutation.RemoveToTrainedPokemonIDs(ids...)
	return pu
}

// RemoveToTrainedPokemon removes "to_trained_pokemon" edges to TrainedPokemons entities.
func (pu *PokemonsUpdate) RemoveToTrainedPokemon(t ...*TrainedPokemons) *PokemonsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveToTrainedPokemonIDs(ids...)
}

// ClearPokemonToMove clears all "pokemon_to_move" edges to the Moves entity.
func (pu *PokemonsUpdate) ClearPokemonToMove() *PokemonsUpdate {
	pu.mutation.ClearPokemonToMove()
	return pu
}

// RemovePokemonToMoveIDs removes the "pokemon_to_move" edge to Moves entities by IDs.
func (pu *PokemonsUpdate) RemovePokemonToMoveIDs(ids ...int) *PokemonsUpdate {
	pu.mutation.RemovePokemonToMoveIDs(ids...)
	return pu
}

// RemovePokemonToMove removes "pokemon_to_move" edges to Moves entities.
func (pu *PokemonsUpdate) RemovePokemonToMove(m ...*Moves) *PokemonsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemovePokemonToMoveIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PokemonsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PokemonsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PokemonsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PokemonsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PokemonsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PokemonsUpdate) check() error {
	if v, ok := pu.mutation.PokedexNo(); ok {
		if err := pokemons.PokedexNoValidator(v); err != nil {
			return &ValidationError{Name: "pokedex_no", err: fmt.Errorf("ent: validator failed for field \"pokedex_no\": %w", err)}
		}
	}
	if v, ok := pu.mutation.FormNo(); ok {
		if err := pokemons.FormNoValidator(v); err != nil {
			return &ValidationError{Name: "form_no", err: fmt.Errorf("ent: validator failed for field \"form_no\": %w", err)}
		}
	}
	if v, ok := pu.mutation.FormName(); ok {
		if err := pokemons.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "form_name", err: fmt.Errorf("ent: validator failed for field \"form_name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := pokemons.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.EnglishName(); ok {
		if err := pokemons.EnglishNameValidator(v); err != nil {
			return &ValidationError{Name: "english_name", err: fmt.Errorf("ent: validator failed for field \"english_name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Type1(); ok {
		if err := pokemons.Type1Validator(v); err != nil {
			return &ValidationError{Name: "type1", err: fmt.Errorf("ent: validator failed for field \"type1\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Type2(); ok {
		if err := pokemons.Type2Validator(v); err != nil {
			return &ValidationError{Name: "type2", err: fmt.Errorf("ent: validator failed for field \"type2\": %w", err)}
		}
	}
	if v, ok := pu.mutation.AbilityId1(); ok {
		if err := pokemons.AbilityId1Validator(v); err != nil {
			return &ValidationError{Name: "ability_id1", err: fmt.Errorf("ent: validator failed for field \"ability_id1\": %w", err)}
		}
	}
	if v, ok := pu.mutation.AbilityId2(); ok {
		if err := pokemons.AbilityId2Validator(v); err != nil {
			return &ValidationError{Name: "ability_id2", err: fmt.Errorf("ent: validator failed for field \"ability_id2\": %w", err)}
		}
	}
	if v, ok := pu.mutation.HiddenAbilityID(); ok {
		if err := pokemons.HiddenAbilityIDValidator(v); err != nil {
			return &ValidationError{Name: "hidden_ability_id", err: fmt.Errorf("ent: validator failed for field \"hidden_ability_id\": %w", err)}
		}
	}
	if v, ok := pu.mutation.BaseStatsH(); ok {
		if err := pokemons.BaseStatsHValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_h", err: fmt.Errorf("ent: validator failed for field \"base_stats_h\": %w", err)}
		}
	}
	if v, ok := pu.mutation.BaseStatsA(); ok {
		if err := pokemons.BaseStatsAValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_a", err: fmt.Errorf("ent: validator failed for field \"base_stats_a\": %w", err)}
		}
	}
	if v, ok := pu.mutation.BaseStatsB(); ok {
		if err := pokemons.BaseStatsBValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_b", err: fmt.Errorf("ent: validator failed for field \"base_stats_b\": %w", err)}
		}
	}
	if v, ok := pu.mutation.BaseStatsC(); ok {
		if err := pokemons.BaseStatsCValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_c", err: fmt.Errorf("ent: validator failed for field \"base_stats_c\": %w", err)}
		}
	}
	if v, ok := pu.mutation.BaseStatsD(); ok {
		if err := pokemons.BaseStatsDValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_d", err: fmt.Errorf("ent: validator failed for field \"base_stats_d\": %w", err)}
		}
	}
	if v, ok := pu.mutation.BaseStatsS(); ok {
		if err := pokemons.BaseStatsSValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_s", err: fmt.Errorf("ent: validator failed for field \"base_stats_s\": %w", err)}
		}
	}
	if _, ok := pu.mutation.Ability1ID(); pu.mutation.Ability1Cleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ability1\"")
	}
	if _, ok := pu.mutation.FormID(); pu.mutation.FormCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"form\"")
	}
	return nil
}

func (pu *PokemonsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pokemons.Table,
			Columns: pokemons.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pokemons.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PokedexNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldPokedexNo,
		})
	}
	if value, ok := pu.mutation.AddedPokedexNo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldPokedexNo,
		})
	}
	if value, ok := pu.mutation.FormName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldFormName,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldName,
		})
	}
	if value, ok := pu.mutation.EnglishName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldEnglishName,
		})
	}
	if value, ok := pu.mutation.Type1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pokemons.FieldType1,
		})
	}
	if value, ok := pu.mutation.Type2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pokemons.FieldType2,
		})
	}
	if pu.mutation.Type2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: pokemons.FieldType2,
		})
	}
	if value, ok := pu.mutation.IsFinalEvolution(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pokemons.FieldIsFinalEvolution,
		})
	}
	if value, ok := pu.mutation.BaseStatsH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsH,
		})
	}
	if value, ok := pu.mutation.AddedBaseStatsH(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsH,
		})
	}
	if value, ok := pu.mutation.BaseStatsA(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsA,
		})
	}
	if value, ok := pu.mutation.AddedBaseStatsA(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsA,
		})
	}
	if value, ok := pu.mutation.BaseStatsB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsB,
		})
	}
	if value, ok := pu.mutation.AddedBaseStatsB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsB,
		})
	}
	if value, ok := pu.mutation.BaseStatsC(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsC,
		})
	}
	if value, ok := pu.mutation.AddedBaseStatsC(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsC,
		})
	}
	if value, ok := pu.mutation.BaseStatsD(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsD,
		})
	}
	if value, ok := pu.mutation.AddedBaseStatsD(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsD,
		})
	}
	if value, ok := pu.mutation.BaseStatsS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsS,
		})
	}
	if value, ok := pu.mutation.AddedBaseStatsS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsS,
		})
	}
	if pu.mutation.Ability1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability1Table,
			Columns: []string{pokemons.Ability1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.Ability1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability1Table,
			Columns: []string{pokemons.Ability1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.Ability2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability2Table,
			Columns: []string{pokemons.Ability2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.Ability2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability2Table,
			Columns: []string{pokemons.Ability2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.HiddenAbilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.HiddenAbilityTable,
			Columns: []string{pokemons.HiddenAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.HiddenAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.HiddenAbilityTable,
			Columns: []string{pokemons.HiddenAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.FormTable,
			Columns: []string{pokemons.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: forms.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.FormTable,
			Columns: []string{pokemons.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: forms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ToTrainedPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pokemons.ToTrainedPokemonTable,
			Columns: []string{pokemons.ToTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedToTrainedPokemonIDs(); len(nodes) > 0 && !pu.mutation.ToTrainedPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pokemons.ToTrainedPokemonTable,
			Columns: []string{pokemons.ToTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ToTrainedPokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pokemons.ToTrainedPokemonTable,
			Columns: []string{pokemons.ToTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PokemonToMoveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pokemons.PokemonToMoveTable,
			Columns: pokemons.PokemonToMovePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPokemonToMoveIDs(); len(nodes) > 0 && !pu.mutation.PokemonToMoveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pokemons.PokemonToMoveTable,
			Columns: pokemons.PokemonToMovePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PokemonToMoveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pokemons.PokemonToMoveTable,
			Columns: pokemons.PokemonToMovePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pokemons.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PokemonsUpdateOne is the builder for updating a single Pokemons entity.
type PokemonsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PokemonsMutation
}

// SetPokedexNo sets the "pokedex_no" field.
func (puo *PokemonsUpdateOne) SetPokedexNo(i int) *PokemonsUpdateOne {
	puo.mutation.ResetPokedexNo()
	puo.mutation.SetPokedexNo(i)
	return puo
}

// AddPokedexNo adds i to the "pokedex_no" field.
func (puo *PokemonsUpdateOne) AddPokedexNo(i int) *PokemonsUpdateOne {
	puo.mutation.AddPokedexNo(i)
	return puo
}

// SetFormNo sets the "form_no" field.
func (puo *PokemonsUpdateOne) SetFormNo(i int) *PokemonsUpdateOne {
	puo.mutation.SetFormNo(i)
	return puo
}

// SetFormName sets the "form_name" field.
func (puo *PokemonsUpdateOne) SetFormName(s string) *PokemonsUpdateOne {
	puo.mutation.SetFormName(s)
	return puo
}

// SetName sets the "name" field.
func (puo *PokemonsUpdateOne) SetName(s string) *PokemonsUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetEnglishName sets the "english_name" field.
func (puo *PokemonsUpdateOne) SetEnglishName(s string) *PokemonsUpdateOne {
	puo.mutation.SetEnglishName(s)
	return puo
}

// SetType1 sets the "type1" field.
func (puo *PokemonsUpdateOne) SetType1(pr property.Types) *PokemonsUpdateOne {
	puo.mutation.SetType1(pr)
	return puo
}

// SetType2 sets the "type2" field.
func (puo *PokemonsUpdateOne) SetType2(pr property.Types) *PokemonsUpdateOne {
	puo.mutation.SetType2(pr)
	return puo
}

// SetNillableType2 sets the "type2" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableType2(pr *property.Types) *PokemonsUpdateOne {
	if pr != nil {
		puo.SetType2(*pr)
	}
	return puo
}

// ClearType2 clears the value of the "type2" field.
func (puo *PokemonsUpdateOne) ClearType2() *PokemonsUpdateOne {
	puo.mutation.ClearType2()
	return puo
}

// SetAbilityId1 sets the "ability_id1" field.
func (puo *PokemonsUpdateOne) SetAbilityId1(i int) *PokemonsUpdateOne {
	puo.mutation.SetAbilityId1(i)
	return puo
}

// SetAbilityId2 sets the "ability_id2" field.
func (puo *PokemonsUpdateOne) SetAbilityId2(i int) *PokemonsUpdateOne {
	puo.mutation.SetAbilityId2(i)
	return puo
}

// SetNillableAbilityId2 sets the "ability_id2" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableAbilityId2(i *int) *PokemonsUpdateOne {
	if i != nil {
		puo.SetAbilityId2(*i)
	}
	return puo
}

// ClearAbilityId2 clears the value of the "ability_id2" field.
func (puo *PokemonsUpdateOne) ClearAbilityId2() *PokemonsUpdateOne {
	puo.mutation.ClearAbilityId2()
	return puo
}

// SetHiddenAbilityID sets the "hidden_ability_id" field.
func (puo *PokemonsUpdateOne) SetHiddenAbilityID(i int) *PokemonsUpdateOne {
	puo.mutation.SetHiddenAbilityID(i)
	return puo
}

// SetNillableHiddenAbilityID sets the "hidden_ability_id" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableHiddenAbilityID(i *int) *PokemonsUpdateOne {
	if i != nil {
		puo.SetHiddenAbilityID(*i)
	}
	return puo
}

// ClearHiddenAbilityID clears the value of the "hidden_ability_id" field.
func (puo *PokemonsUpdateOne) ClearHiddenAbilityID() *PokemonsUpdateOne {
	puo.mutation.ClearHiddenAbilityID()
	return puo
}

// SetIsFinalEvolution sets the "is_final_evolution" field.
func (puo *PokemonsUpdateOne) SetIsFinalEvolution(b bool) *PokemonsUpdateOne {
	puo.mutation.SetIsFinalEvolution(b)
	return puo
}

// SetNillableIsFinalEvolution sets the "is_final_evolution" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableIsFinalEvolution(b *bool) *PokemonsUpdateOne {
	if b != nil {
		puo.SetIsFinalEvolution(*b)
	}
	return puo
}

// SetBaseStatsH sets the "base_stats_h" field.
func (puo *PokemonsUpdateOne) SetBaseStatsH(i int) *PokemonsUpdateOne {
	puo.mutation.ResetBaseStatsH()
	puo.mutation.SetBaseStatsH(i)
	return puo
}

// SetNillableBaseStatsH sets the "base_stats_h" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableBaseStatsH(i *int) *PokemonsUpdateOne {
	if i != nil {
		puo.SetBaseStatsH(*i)
	}
	return puo
}

// AddBaseStatsH adds i to the "base_stats_h" field.
func (puo *PokemonsUpdateOne) AddBaseStatsH(i int) *PokemonsUpdateOne {
	puo.mutation.AddBaseStatsH(i)
	return puo
}

// SetBaseStatsA sets the "base_stats_a" field.
func (puo *PokemonsUpdateOne) SetBaseStatsA(i int) *PokemonsUpdateOne {
	puo.mutation.ResetBaseStatsA()
	puo.mutation.SetBaseStatsA(i)
	return puo
}

// SetNillableBaseStatsA sets the "base_stats_a" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableBaseStatsA(i *int) *PokemonsUpdateOne {
	if i != nil {
		puo.SetBaseStatsA(*i)
	}
	return puo
}

// AddBaseStatsA adds i to the "base_stats_a" field.
func (puo *PokemonsUpdateOne) AddBaseStatsA(i int) *PokemonsUpdateOne {
	puo.mutation.AddBaseStatsA(i)
	return puo
}

// SetBaseStatsB sets the "base_stats_b" field.
func (puo *PokemonsUpdateOne) SetBaseStatsB(i int) *PokemonsUpdateOne {
	puo.mutation.ResetBaseStatsB()
	puo.mutation.SetBaseStatsB(i)
	return puo
}

// SetNillableBaseStatsB sets the "base_stats_b" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableBaseStatsB(i *int) *PokemonsUpdateOne {
	if i != nil {
		puo.SetBaseStatsB(*i)
	}
	return puo
}

// AddBaseStatsB adds i to the "base_stats_b" field.
func (puo *PokemonsUpdateOne) AddBaseStatsB(i int) *PokemonsUpdateOne {
	puo.mutation.AddBaseStatsB(i)
	return puo
}

// SetBaseStatsC sets the "base_stats_c" field.
func (puo *PokemonsUpdateOne) SetBaseStatsC(i int) *PokemonsUpdateOne {
	puo.mutation.ResetBaseStatsC()
	puo.mutation.SetBaseStatsC(i)
	return puo
}

// SetNillableBaseStatsC sets the "base_stats_c" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableBaseStatsC(i *int) *PokemonsUpdateOne {
	if i != nil {
		puo.SetBaseStatsC(*i)
	}
	return puo
}

// AddBaseStatsC adds i to the "base_stats_c" field.
func (puo *PokemonsUpdateOne) AddBaseStatsC(i int) *PokemonsUpdateOne {
	puo.mutation.AddBaseStatsC(i)
	return puo
}

// SetBaseStatsD sets the "base_stats_d" field.
func (puo *PokemonsUpdateOne) SetBaseStatsD(i int) *PokemonsUpdateOne {
	puo.mutation.ResetBaseStatsD()
	puo.mutation.SetBaseStatsD(i)
	return puo
}

// SetNillableBaseStatsD sets the "base_stats_d" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableBaseStatsD(i *int) *PokemonsUpdateOne {
	if i != nil {
		puo.SetBaseStatsD(*i)
	}
	return puo
}

// AddBaseStatsD adds i to the "base_stats_d" field.
func (puo *PokemonsUpdateOne) AddBaseStatsD(i int) *PokemonsUpdateOne {
	puo.mutation.AddBaseStatsD(i)
	return puo
}

// SetBaseStatsS sets the "base_stats_s" field.
func (puo *PokemonsUpdateOne) SetBaseStatsS(i int) *PokemonsUpdateOne {
	puo.mutation.ResetBaseStatsS()
	puo.mutation.SetBaseStatsS(i)
	return puo
}

// SetNillableBaseStatsS sets the "base_stats_s" field if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableBaseStatsS(i *int) *PokemonsUpdateOne {
	if i != nil {
		puo.SetBaseStatsS(*i)
	}
	return puo
}

// AddBaseStatsS adds i to the "base_stats_s" field.
func (puo *PokemonsUpdateOne) AddBaseStatsS(i int) *PokemonsUpdateOne {
	puo.mutation.AddBaseStatsS(i)
	return puo
}

// SetAbility1ID sets the "ability1" edge to the Abilities entity by ID.
func (puo *PokemonsUpdateOne) SetAbility1ID(id int) *PokemonsUpdateOne {
	puo.mutation.SetAbility1ID(id)
	return puo
}

// SetAbility1 sets the "ability1" edge to the Abilities entity.
func (puo *PokemonsUpdateOne) SetAbility1(a *Abilities) *PokemonsUpdateOne {
	return puo.SetAbility1ID(a.ID)
}

// SetAbility2ID sets the "ability2" edge to the Abilities entity by ID.
func (puo *PokemonsUpdateOne) SetAbility2ID(id int) *PokemonsUpdateOne {
	puo.mutation.SetAbility2ID(id)
	return puo
}

// SetNillableAbility2ID sets the "ability2" edge to the Abilities entity by ID if the given value is not nil.
func (puo *PokemonsUpdateOne) SetNillableAbility2ID(id *int) *PokemonsUpdateOne {
	if id != nil {
		puo = puo.SetAbility2ID(*id)
	}
	return puo
}

// SetAbility2 sets the "ability2" edge to the Abilities entity.
func (puo *PokemonsUpdateOne) SetAbility2(a *Abilities) *PokemonsUpdateOne {
	return puo.SetAbility2ID(a.ID)
}

// SetHiddenAbility sets the "hidden_ability" edge to the Abilities entity.
func (puo *PokemonsUpdateOne) SetHiddenAbility(a *Abilities) *PokemonsUpdateOne {
	return puo.SetHiddenAbilityID(a.ID)
}

// SetFormID sets the "form" edge to the Forms entity by ID.
func (puo *PokemonsUpdateOne) SetFormID(id int) *PokemonsUpdateOne {
	puo.mutation.SetFormID(id)
	return puo
}

// SetForm sets the "form" edge to the Forms entity.
func (puo *PokemonsUpdateOne) SetForm(f *Forms) *PokemonsUpdateOne {
	return puo.SetFormID(f.ID)
}

// AddToTrainedPokemonIDs adds the "to_trained_pokemon" edge to the TrainedPokemons entity by IDs.
func (puo *PokemonsUpdateOne) AddToTrainedPokemonIDs(ids ...int) *PokemonsUpdateOne {
	puo.mutation.AddToTrainedPokemonIDs(ids...)
	return puo
}

// AddToTrainedPokemon adds the "to_trained_pokemon" edges to the TrainedPokemons entity.
func (puo *PokemonsUpdateOne) AddToTrainedPokemon(t ...*TrainedPokemons) *PokemonsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddToTrainedPokemonIDs(ids...)
}

// AddPokemonToMoveIDs adds the "pokemon_to_move" edge to the Moves entity by IDs.
func (puo *PokemonsUpdateOne) AddPokemonToMoveIDs(ids ...int) *PokemonsUpdateOne {
	puo.mutation.AddPokemonToMoveIDs(ids...)
	return puo
}

// AddPokemonToMove adds the "pokemon_to_move" edges to the Moves entity.
func (puo *PokemonsUpdateOne) AddPokemonToMove(m ...*Moves) *PokemonsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddPokemonToMoveIDs(ids...)
}

// Mutation returns the PokemonsMutation object of the builder.
func (puo *PokemonsUpdateOne) Mutation() *PokemonsMutation {
	return puo.mutation
}

// ClearAbility1 clears the "ability1" edge to the Abilities entity.
func (puo *PokemonsUpdateOne) ClearAbility1() *PokemonsUpdateOne {
	puo.mutation.ClearAbility1()
	return puo
}

// ClearAbility2 clears the "ability2" edge to the Abilities entity.
func (puo *PokemonsUpdateOne) ClearAbility2() *PokemonsUpdateOne {
	puo.mutation.ClearAbility2()
	return puo
}

// ClearHiddenAbility clears the "hidden_ability" edge to the Abilities entity.
func (puo *PokemonsUpdateOne) ClearHiddenAbility() *PokemonsUpdateOne {
	puo.mutation.ClearHiddenAbility()
	return puo
}

// ClearForm clears the "form" edge to the Forms entity.
func (puo *PokemonsUpdateOne) ClearForm() *PokemonsUpdateOne {
	puo.mutation.ClearForm()
	return puo
}

// ClearToTrainedPokemon clears all "to_trained_pokemon" edges to the TrainedPokemons entity.
func (puo *PokemonsUpdateOne) ClearToTrainedPokemon() *PokemonsUpdateOne {
	puo.mutation.ClearToTrainedPokemon()
	return puo
}

// RemoveToTrainedPokemonIDs removes the "to_trained_pokemon" edge to TrainedPokemons entities by IDs.
func (puo *PokemonsUpdateOne) RemoveToTrainedPokemonIDs(ids ...int) *PokemonsUpdateOne {
	puo.mutation.RemoveToTrainedPokemonIDs(ids...)
	return puo
}

// RemoveToTrainedPokemon removes "to_trained_pokemon" edges to TrainedPokemons entities.
func (puo *PokemonsUpdateOne) RemoveToTrainedPokemon(t ...*TrainedPokemons) *PokemonsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveToTrainedPokemonIDs(ids...)
}

// ClearPokemonToMove clears all "pokemon_to_move" edges to the Moves entity.
func (puo *PokemonsUpdateOne) ClearPokemonToMove() *PokemonsUpdateOne {
	puo.mutation.ClearPokemonToMove()
	return puo
}

// RemovePokemonToMoveIDs removes the "pokemon_to_move" edge to Moves entities by IDs.
func (puo *PokemonsUpdateOne) RemovePokemonToMoveIDs(ids ...int) *PokemonsUpdateOne {
	puo.mutation.RemovePokemonToMoveIDs(ids...)
	return puo
}

// RemovePokemonToMove removes "pokemon_to_move" edges to Moves entities.
func (puo *PokemonsUpdateOne) RemovePokemonToMove(m ...*Moves) *PokemonsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemovePokemonToMoveIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PokemonsUpdateOne) Select(field string, fields ...string) *PokemonsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pokemons entity.
func (puo *PokemonsUpdateOne) Save(ctx context.Context) (*Pokemons, error) {
	var (
		err  error
		node *Pokemons
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PokemonsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PokemonsUpdateOne) SaveX(ctx context.Context) *Pokemons {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PokemonsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PokemonsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PokemonsUpdateOne) check() error {
	if v, ok := puo.mutation.PokedexNo(); ok {
		if err := pokemons.PokedexNoValidator(v); err != nil {
			return &ValidationError{Name: "pokedex_no", err: fmt.Errorf("ent: validator failed for field \"pokedex_no\": %w", err)}
		}
	}
	if v, ok := puo.mutation.FormNo(); ok {
		if err := pokemons.FormNoValidator(v); err != nil {
			return &ValidationError{Name: "form_no", err: fmt.Errorf("ent: validator failed for field \"form_no\": %w", err)}
		}
	}
	if v, ok := puo.mutation.FormName(); ok {
		if err := pokemons.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "form_name", err: fmt.Errorf("ent: validator failed for field \"form_name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := pokemons.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.EnglishName(); ok {
		if err := pokemons.EnglishNameValidator(v); err != nil {
			return &ValidationError{Name: "english_name", err: fmt.Errorf("ent: validator failed for field \"english_name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Type1(); ok {
		if err := pokemons.Type1Validator(v); err != nil {
			return &ValidationError{Name: "type1", err: fmt.Errorf("ent: validator failed for field \"type1\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Type2(); ok {
		if err := pokemons.Type2Validator(v); err != nil {
			return &ValidationError{Name: "type2", err: fmt.Errorf("ent: validator failed for field \"type2\": %w", err)}
		}
	}
	if v, ok := puo.mutation.AbilityId1(); ok {
		if err := pokemons.AbilityId1Validator(v); err != nil {
			return &ValidationError{Name: "ability_id1", err: fmt.Errorf("ent: validator failed for field \"ability_id1\": %w", err)}
		}
	}
	if v, ok := puo.mutation.AbilityId2(); ok {
		if err := pokemons.AbilityId2Validator(v); err != nil {
			return &ValidationError{Name: "ability_id2", err: fmt.Errorf("ent: validator failed for field \"ability_id2\": %w", err)}
		}
	}
	if v, ok := puo.mutation.HiddenAbilityID(); ok {
		if err := pokemons.HiddenAbilityIDValidator(v); err != nil {
			return &ValidationError{Name: "hidden_ability_id", err: fmt.Errorf("ent: validator failed for field \"hidden_ability_id\": %w", err)}
		}
	}
	if v, ok := puo.mutation.BaseStatsH(); ok {
		if err := pokemons.BaseStatsHValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_h", err: fmt.Errorf("ent: validator failed for field \"base_stats_h\": %w", err)}
		}
	}
	if v, ok := puo.mutation.BaseStatsA(); ok {
		if err := pokemons.BaseStatsAValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_a", err: fmt.Errorf("ent: validator failed for field \"base_stats_a\": %w", err)}
		}
	}
	if v, ok := puo.mutation.BaseStatsB(); ok {
		if err := pokemons.BaseStatsBValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_b", err: fmt.Errorf("ent: validator failed for field \"base_stats_b\": %w", err)}
		}
	}
	if v, ok := puo.mutation.BaseStatsC(); ok {
		if err := pokemons.BaseStatsCValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_c", err: fmt.Errorf("ent: validator failed for field \"base_stats_c\": %w", err)}
		}
	}
	if v, ok := puo.mutation.BaseStatsD(); ok {
		if err := pokemons.BaseStatsDValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_d", err: fmt.Errorf("ent: validator failed for field \"base_stats_d\": %w", err)}
		}
	}
	if v, ok := puo.mutation.BaseStatsS(); ok {
		if err := pokemons.BaseStatsSValidator(v); err != nil {
			return &ValidationError{Name: "base_stats_s", err: fmt.Errorf("ent: validator failed for field \"base_stats_s\": %w", err)}
		}
	}
	if _, ok := puo.mutation.Ability1ID(); puo.mutation.Ability1Cleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ability1\"")
	}
	if _, ok := puo.mutation.FormID(); puo.mutation.FormCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"form\"")
	}
	return nil
}

func (puo *PokemonsUpdateOne) sqlSave(ctx context.Context) (_node *Pokemons, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pokemons.Table,
			Columns: pokemons.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pokemons.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pokemons.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pokemons.FieldID)
		for _, f := range fields {
			if !pokemons.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pokemons.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PokedexNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldPokedexNo,
		})
	}
	if value, ok := puo.mutation.AddedPokedexNo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldPokedexNo,
		})
	}
	if value, ok := puo.mutation.FormName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldFormName,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldName,
		})
	}
	if value, ok := puo.mutation.EnglishName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemons.FieldEnglishName,
		})
	}
	if value, ok := puo.mutation.Type1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pokemons.FieldType1,
		})
	}
	if value, ok := puo.mutation.Type2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pokemons.FieldType2,
		})
	}
	if puo.mutation.Type2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: pokemons.FieldType2,
		})
	}
	if value, ok := puo.mutation.IsFinalEvolution(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pokemons.FieldIsFinalEvolution,
		})
	}
	if value, ok := puo.mutation.BaseStatsH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsH,
		})
	}
	if value, ok := puo.mutation.AddedBaseStatsH(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsH,
		})
	}
	if value, ok := puo.mutation.BaseStatsA(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsA,
		})
	}
	if value, ok := puo.mutation.AddedBaseStatsA(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsA,
		})
	}
	if value, ok := puo.mutation.BaseStatsB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsB,
		})
	}
	if value, ok := puo.mutation.AddedBaseStatsB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsB,
		})
	}
	if value, ok := puo.mutation.BaseStatsC(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsC,
		})
	}
	if value, ok := puo.mutation.AddedBaseStatsC(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsC,
		})
	}
	if value, ok := puo.mutation.BaseStatsD(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsD,
		})
	}
	if value, ok := puo.mutation.AddedBaseStatsD(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsD,
		})
	}
	if value, ok := puo.mutation.BaseStatsS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsS,
		})
	}
	if value, ok := puo.mutation.AddedBaseStatsS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pokemons.FieldBaseStatsS,
		})
	}
	if puo.mutation.Ability1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability1Table,
			Columns: []string{pokemons.Ability1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.Ability1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability1Table,
			Columns: []string{pokemons.Ability1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.Ability2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability2Table,
			Columns: []string{pokemons.Ability2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.Ability2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.Ability2Table,
			Columns: []string{pokemons.Ability2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.HiddenAbilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.HiddenAbilityTable,
			Columns: []string{pokemons.HiddenAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.HiddenAbilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.HiddenAbilityTable,
			Columns: []string{pokemons.HiddenAbilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.FormTable,
			Columns: []string{pokemons.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: forms.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pokemons.FormTable,
			Columns: []string{pokemons.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: forms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ToTrainedPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pokemons.ToTrainedPokemonTable,
			Columns: []string{pokemons.ToTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedToTrainedPokemonIDs(); len(nodes) > 0 && !puo.mutation.ToTrainedPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pokemons.ToTrainedPokemonTable,
			Columns: []string{pokemons.ToTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ToTrainedPokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pokemons.ToTrainedPokemonTable,
			Columns: []string{pokemons.ToTrainedPokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PokemonToMoveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pokemons.PokemonToMoveTable,
			Columns: pokemons.PokemonToMovePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPokemonToMoveIDs(); len(nodes) > 0 && !puo.mutation.PokemonToMoveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pokemons.PokemonToMoveTable,
			Columns: pokemons.PokemonToMovePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PokemonToMoveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pokemons.PokemonToMoveTable,
			Columns: pokemons.PokemonToMovePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moves.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pokemons{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pokemons.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
