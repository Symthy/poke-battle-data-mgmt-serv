// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/tags"
)

// TagsUpdate is the builder for updating Tags entities.
type TagsUpdate struct {
	config
	hooks    []Hook
	mutation *TagsMutation
}

// Where appends a list predicates to the TagsUpdate builder.
func (tu *TagsUpdate) Where(ps ...predicate.Tags) *TagsUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TagsUpdate) SetName(s string) *TagsUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetIsGenerationTag sets the "is_generation_tag" field.
func (tu *TagsUpdate) SetIsGenerationTag(b bool) *TagsUpdate {
	tu.mutation.SetIsGenerationTag(b)
	return tu
}

// SetNillableIsGenerationTag sets the "is_generation_tag" field if the given value is not nil.
func (tu *TagsUpdate) SetNillableIsGenerationTag(b *bool) *TagsUpdate {
	if b != nil {
		tu.SetIsGenerationTag(*b)
	}
	return tu
}

// SetIsSeasonTag sets the "is_season_tag" field.
func (tu *TagsUpdate) SetIsSeasonTag(b bool) *TagsUpdate {
	tu.mutation.SetIsSeasonTag(b)
	return tu
}

// SetNillableIsSeasonTag sets the "is_season_tag" field if the given value is not nil.
func (tu *TagsUpdate) SetNillableIsSeasonTag(b *bool) *TagsUpdate {
	if b != nil {
		tu.SetIsSeasonTag(*b)
	}
	return tu
}

// AddTagToPartyIDs adds the "tag_to_party" edge to the Party entity by IDs.
func (tu *TagsUpdate) AddTagToPartyIDs(ids ...int) *TagsUpdate {
	tu.mutation.AddTagToPartyIDs(ids...)
	return tu
}

// AddTagToParty adds the "tag_to_party" edges to the Party entity.
func (tu *TagsUpdate) AddTagToParty(p ...*Party) *TagsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddTagToPartyIDs(ids...)
}

// Mutation returns the TagsMutation object of the builder.
func (tu *TagsUpdate) Mutation() *TagsMutation {
	return tu.mutation
}

// ClearTagToParty clears all "tag_to_party" edges to the Party entity.
func (tu *TagsUpdate) ClearTagToParty() *TagsUpdate {
	tu.mutation.ClearTagToParty()
	return tu
}

// RemoveTagToPartyIDs removes the "tag_to_party" edge to Party entities by IDs.
func (tu *TagsUpdate) RemoveTagToPartyIDs(ids ...int) *TagsUpdate {
	tu.mutation.RemoveTagToPartyIDs(ids...)
	return tu
}

// RemoveTagToParty removes "tag_to_party" edges to Party entities.
func (tu *TagsUpdate) RemoveTagToParty(p ...*Party) *TagsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveTagToPartyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TagsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TagsUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TagsUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TagsUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TagsUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tags.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tu *TagsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tags.Table,
			Columns: tags.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tags.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tags.FieldName,
		})
	}
	if value, ok := tu.mutation.IsGenerationTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tags.FieldIsGenerationTag,
		})
	}
	if value, ok := tu.mutation.IsSeasonTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tags.FieldIsSeasonTag,
		})
	}
	if tu.mutation.TagToPartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tags.TagToPartyTable,
			Columns: tags.TagToPartyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagToPartyIDs(); len(nodes) > 0 && !tu.mutation.TagToPartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tags.TagToPartyTable,
			Columns: tags.TagToPartyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagToPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tags.TagToPartyTable,
			Columns: tags.TagToPartyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tags.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TagsUpdateOne is the builder for updating a single Tags entity.
type TagsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TagsMutation
}

// SetName sets the "name" field.
func (tuo *TagsUpdateOne) SetName(s string) *TagsUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetIsGenerationTag sets the "is_generation_tag" field.
func (tuo *TagsUpdateOne) SetIsGenerationTag(b bool) *TagsUpdateOne {
	tuo.mutation.SetIsGenerationTag(b)
	return tuo
}

// SetNillableIsGenerationTag sets the "is_generation_tag" field if the given value is not nil.
func (tuo *TagsUpdateOne) SetNillableIsGenerationTag(b *bool) *TagsUpdateOne {
	if b != nil {
		tuo.SetIsGenerationTag(*b)
	}
	return tuo
}

// SetIsSeasonTag sets the "is_season_tag" field.
func (tuo *TagsUpdateOne) SetIsSeasonTag(b bool) *TagsUpdateOne {
	tuo.mutation.SetIsSeasonTag(b)
	return tuo
}

// SetNillableIsSeasonTag sets the "is_season_tag" field if the given value is not nil.
func (tuo *TagsUpdateOne) SetNillableIsSeasonTag(b *bool) *TagsUpdateOne {
	if b != nil {
		tuo.SetIsSeasonTag(*b)
	}
	return tuo
}

// AddTagToPartyIDs adds the "tag_to_party" edge to the Party entity by IDs.
func (tuo *TagsUpdateOne) AddTagToPartyIDs(ids ...int) *TagsUpdateOne {
	tuo.mutation.AddTagToPartyIDs(ids...)
	return tuo
}

// AddTagToParty adds the "tag_to_party" edges to the Party entity.
func (tuo *TagsUpdateOne) AddTagToParty(p ...*Party) *TagsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddTagToPartyIDs(ids...)
}

// Mutation returns the TagsMutation object of the builder.
func (tuo *TagsUpdateOne) Mutation() *TagsMutation {
	return tuo.mutation
}

// ClearTagToParty clears all "tag_to_party" edges to the Party entity.
func (tuo *TagsUpdateOne) ClearTagToParty() *TagsUpdateOne {
	tuo.mutation.ClearTagToParty()
	return tuo
}

// RemoveTagToPartyIDs removes the "tag_to_party" edge to Party entities by IDs.
func (tuo *TagsUpdateOne) RemoveTagToPartyIDs(ids ...int) *TagsUpdateOne {
	tuo.mutation.RemoveTagToPartyIDs(ids...)
	return tuo
}

// RemoveTagToParty removes "tag_to_party" edges to Party entities.
func (tuo *TagsUpdateOne) RemoveTagToParty(p ...*Party) *TagsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveTagToPartyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TagsUpdateOne) Select(field string, fields ...string) *TagsUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tags entity.
func (tuo *TagsUpdateOne) Save(ctx context.Context) (*Tags, error) {
	var (
		err  error
		node *Tags
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TagsUpdateOne) SaveX(ctx context.Context) *Tags {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TagsUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TagsUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TagsUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tags.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tuo *TagsUpdateOne) sqlSave(ctx context.Context) (_node *Tags, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tags.Table,
			Columns: tags.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tags.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Tags.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tags.FieldID)
		for _, f := range fields {
			if !tags.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tags.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tags.FieldName,
		})
	}
	if value, ok := tuo.mutation.IsGenerationTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tags.FieldIsGenerationTag,
		})
	}
	if value, ok := tuo.mutation.IsSeasonTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tags.FieldIsSeasonTag,
		})
	}
	if tuo.mutation.TagToPartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tags.TagToPartyTable,
			Columns: tags.TagToPartyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagToPartyIDs(); len(nodes) > 0 && !tuo.mutation.TagToPartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tags.TagToPartyTable,
			Columns: tags.TagToPartyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagToPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tags.TagToPartyTable,
			Columns: tags.TagToPartyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tags{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tags.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
