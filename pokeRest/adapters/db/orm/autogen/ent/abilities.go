// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// Abilities is the model entity for the Abilities schema.
type Abilities struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PhysicalMovePowerCorrectionValue holds the value of the "physical_move_power_correction_value" field.
	PhysicalMovePowerCorrectionValue int `json:"physical_move_power_correction_value,omitempty"`
	// SpecialMovePowerCorrectionValue holds the value of the "special_move_power_correction_value" field.
	SpecialMovePowerCorrectionValue int `json:"special_move_power_correction_value,omitempty"`
	// AttackPowerCorrectionValue holds the value of the "attack_power_correction_value" field.
	AttackPowerCorrectionValue int `json:"attack_power_correction_value,omitempty"`
	// SpecialAttackPowerCorrectionValue holds the value of the "special_attack_power_correction_value" field.
	SpecialAttackPowerCorrectionValue int `json:"special_attack_power_correction_value,omitempty"`
	// AttackCorrectionValue holds the value of the "attack_correction_value" field.
	AttackCorrectionValue int `json:"attack_correction_value,omitempty"`
	// SpecialAttackCorrectionValue holds the value of the "special_attack_correction_value" field.
	SpecialAttackCorrectionValue int `json:"special_attack_correction_value,omitempty"`
	// DeffenseCorrectionValue holds the value of the "deffense_correction_value" field.
	DeffenseCorrectionValue int `json:"deffense_correction_value,omitempty"`
	// SpecialDeffenseCorrectionValue holds the value of the "special_deffense_correction_value" field.
	SpecialDeffenseCorrectionValue int `json:"special_deffense_correction_value,omitempty"`
	// DamageCorrectionType1 holds the value of the "damage_correction_type1" field.
	DamageCorrectionType1 property.Types `json:"damage_correction_type1,omitempty"`
	// DamageCorrectionValue1 holds the value of the "damage_correction_value1" field.
	DamageCorrectionValue1 int `json:"damage_correction_value1,omitempty"`
	// DamageCorrectionType2 holds the value of the "damage_correction_type2" field.
	DamageCorrectionType2 property.Types `json:"damage_correction_type2,omitempty"`
	// DamageCorrectionValue2 holds the value of the "damage_correction_value2" field.
	DamageCorrectionValue2 int `json:"damage_correction_value2,omitempty"`
	// WeightCorrectionValue holds the value of the "weight_correction_value" field.
	WeightCorrectionValue int `json:"weight_correction_value,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AbilitiesQuery when eager-loading is set.
	Edges AbilitiesEdges `json:"edges"`
}

// AbilitiesEdges holds the relations/edges for other nodes in the graph.
type AbilitiesEdges struct {
	// AbilityHolder1 holds the value of the ability_holder1 edge.
	AbilityHolder1 []*Pokemons `json:"ability_holder1,omitempty"`
	// AbilityHolder2 holds the value of the ability_holder2 edge.
	AbilityHolder2 []*Pokemons `json:"ability_holder2,omitempty"`
	// HiddenAbilityHolder holds the value of the hidden_ability_holder edge.
	HiddenAbilityHolder []*Pokemons `json:"hidden_ability_holder,omitempty"`
	// ToTrainedPokemonAbility holds the value of the to_trained_pokemon_ability edge.
	ToTrainedPokemonAbility []*TrainedPokemonDetails `json:"to_trained_pokemon_ability,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AbilityHolder1OrErr returns the AbilityHolder1 value or an error if the edge
// was not loaded in eager-loading.
func (e AbilitiesEdges) AbilityHolder1OrErr() ([]*Pokemons, error) {
	if e.loadedTypes[0] {
		return e.AbilityHolder1, nil
	}
	return nil, &NotLoadedError{edge: "ability_holder1"}
}

// AbilityHolder2OrErr returns the AbilityHolder2 value or an error if the edge
// was not loaded in eager-loading.
func (e AbilitiesEdges) AbilityHolder2OrErr() ([]*Pokemons, error) {
	if e.loadedTypes[1] {
		return e.AbilityHolder2, nil
	}
	return nil, &NotLoadedError{edge: "ability_holder2"}
}

// HiddenAbilityHolderOrErr returns the HiddenAbilityHolder value or an error if the edge
// was not loaded in eager-loading.
func (e AbilitiesEdges) HiddenAbilityHolderOrErr() ([]*Pokemons, error) {
	if e.loadedTypes[2] {
		return e.HiddenAbilityHolder, nil
	}
	return nil, &NotLoadedError{edge: "hidden_ability_holder"}
}

// ToTrainedPokemonAbilityOrErr returns the ToTrainedPokemonAbility value or an error if the edge
// was not loaded in eager-loading.
func (e AbilitiesEdges) ToTrainedPokemonAbilityOrErr() ([]*TrainedPokemonDetails, error) {
	if e.loadedTypes[3] {
		return e.ToTrainedPokemonAbility, nil
	}
	return nil, &NotLoadedError{edge: "to_trained_pokemon_ability"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Abilities) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case abilities.FieldID, abilities.FieldPhysicalMovePowerCorrectionValue, abilities.FieldSpecialMovePowerCorrectionValue, abilities.FieldAttackPowerCorrectionValue, abilities.FieldSpecialAttackPowerCorrectionValue, abilities.FieldAttackCorrectionValue, abilities.FieldSpecialAttackCorrectionValue, abilities.FieldDeffenseCorrectionValue, abilities.FieldSpecialDeffenseCorrectionValue, abilities.FieldDamageCorrectionValue1, abilities.FieldDamageCorrectionValue2, abilities.FieldWeightCorrectionValue:
			values[i] = new(sql.NullInt64)
		case abilities.FieldDamageCorrectionType1, abilities.FieldDamageCorrectionType2, abilities.FieldName, abilities.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Abilities", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Abilities fields.
func (a *Abilities) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case abilities.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case abilities.FieldPhysicalMovePowerCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field physical_move_power_correction_value", values[i])
			} else if value.Valid {
				a.PhysicalMovePowerCorrectionValue = int(value.Int64)
			}
		case abilities.FieldSpecialMovePowerCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_move_power_correction_value", values[i])
			} else if value.Valid {
				a.SpecialMovePowerCorrectionValue = int(value.Int64)
			}
		case abilities.FieldAttackPowerCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attack_power_correction_value", values[i])
			} else if value.Valid {
				a.AttackPowerCorrectionValue = int(value.Int64)
			}
		case abilities.FieldSpecialAttackPowerCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_attack_power_correction_value", values[i])
			} else if value.Valid {
				a.SpecialAttackPowerCorrectionValue = int(value.Int64)
			}
		case abilities.FieldAttackCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attack_correction_value", values[i])
			} else if value.Valid {
				a.AttackCorrectionValue = int(value.Int64)
			}
		case abilities.FieldSpecialAttackCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_attack_correction_value", values[i])
			} else if value.Valid {
				a.SpecialAttackCorrectionValue = int(value.Int64)
			}
		case abilities.FieldDeffenseCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deffense_correction_value", values[i])
			} else if value.Valid {
				a.DeffenseCorrectionValue = int(value.Int64)
			}
		case abilities.FieldSpecialDeffenseCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_deffense_correction_value", values[i])
			} else if value.Valid {
				a.SpecialDeffenseCorrectionValue = int(value.Int64)
			}
		case abilities.FieldDamageCorrectionType1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field damage_correction_type1", values[i])
			} else if value.Valid {
				a.DamageCorrectionType1 = property.Types(value.String)
			}
		case abilities.FieldDamageCorrectionValue1:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field damage_correction_value1", values[i])
			} else if value.Valid {
				a.DamageCorrectionValue1 = int(value.Int64)
			}
		case abilities.FieldDamageCorrectionType2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field damage_correction_type2", values[i])
			} else if value.Valid {
				a.DamageCorrectionType2 = property.Types(value.String)
			}
		case abilities.FieldDamageCorrectionValue2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field damage_correction_value2", values[i])
			} else if value.Valid {
				a.DamageCorrectionValue2 = int(value.Int64)
			}
		case abilities.FieldWeightCorrectionValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_correction_value", values[i])
			} else if value.Valid {
				a.WeightCorrectionValue = int(value.Int64)
			}
		case abilities.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case abilities.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		}
	}
	return nil
}

// QueryAbilityHolder1 queries the "ability_holder1" edge of the Abilities entity.
func (a *Abilities) QueryAbilityHolder1() *PokemonsQuery {
	return (&AbilitiesClient{config: a.config}).QueryAbilityHolder1(a)
}

// QueryAbilityHolder2 queries the "ability_holder2" edge of the Abilities entity.
func (a *Abilities) QueryAbilityHolder2() *PokemonsQuery {
	return (&AbilitiesClient{config: a.config}).QueryAbilityHolder2(a)
}

// QueryHiddenAbilityHolder queries the "hidden_ability_holder" edge of the Abilities entity.
func (a *Abilities) QueryHiddenAbilityHolder() *PokemonsQuery {
	return (&AbilitiesClient{config: a.config}).QueryHiddenAbilityHolder(a)
}

// QueryToTrainedPokemonAbility queries the "to_trained_pokemon_ability" edge of the Abilities entity.
func (a *Abilities) QueryToTrainedPokemonAbility() *TrainedPokemonDetailsQuery {
	return (&AbilitiesClient{config: a.config}).QueryToTrainedPokemonAbility(a)
}

// Update returns a builder for updating this Abilities.
// Note that you need to call Abilities.Unwrap() before calling this method if this Abilities
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Abilities) Update() *AbilitiesUpdateOne {
	return (&AbilitiesClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Abilities entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Abilities) Unwrap() *Abilities {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Abilities is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Abilities) String() string {
	var builder strings.Builder
	builder.WriteString("Abilities(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", physical_move_power_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.PhysicalMovePowerCorrectionValue))
	builder.WriteString(", special_move_power_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.SpecialMovePowerCorrectionValue))
	builder.WriteString(", attack_power_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.AttackPowerCorrectionValue))
	builder.WriteString(", special_attack_power_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.SpecialAttackPowerCorrectionValue))
	builder.WriteString(", attack_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.AttackCorrectionValue))
	builder.WriteString(", special_attack_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.SpecialAttackCorrectionValue))
	builder.WriteString(", deffense_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.DeffenseCorrectionValue))
	builder.WriteString(", special_deffense_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.SpecialDeffenseCorrectionValue))
	builder.WriteString(", damage_correction_type1=")
	builder.WriteString(fmt.Sprintf("%v", a.DamageCorrectionType1))
	builder.WriteString(", damage_correction_value1=")
	builder.WriteString(fmt.Sprintf("%v", a.DamageCorrectionValue1))
	builder.WriteString(", damage_correction_type2=")
	builder.WriteString(fmt.Sprintf("%v", a.DamageCorrectionType2))
	builder.WriteString(", damage_correction_value2=")
	builder.WriteString(fmt.Sprintf("%v", a.DamageCorrectionValue2))
	builder.WriteString(", weight_correction_value=")
	builder.WriteString(fmt.Sprintf("%v", a.WeightCorrectionValue))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", description=")
	builder.WriteString(a.Description)
	builder.WriteByte(')')
	return builder.String()
}

// AbilitiesSlice is a parsable slice of Abilities.
type AbilitiesSlice []*Abilities

func (a AbilitiesSlice) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
