// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// TrainedPokemonsUpdate is the builder for updating TrainedPokemons entities.
type TrainedPokemonsUpdate struct {
	config
	hooks    []Hook
	mutation *TrainedPokemonsMutation
}

// Where appends a list predicates to the TrainedPokemonsUpdate builder.
func (tpu *TrainedPokemonsUpdate) Where(ps ...predicate.TrainedPokemons) *TrainedPokemonsUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetPokemonID sets the "pokemon_id" field.
func (tpu *TrainedPokemonsUpdate) SetPokemonID(i int) *TrainedPokemonsUpdate {
	tpu.mutation.SetPokemonID(i)
	return tpu
}

// SetCreateUserID sets the "create_user_id" field.
func (tpu *TrainedPokemonsUpdate) SetCreateUserID(i int) *TrainedPokemonsUpdate {
	tpu.mutation.SetCreateUserID(i)
	return tpu
}

// SetNillableCreateUserID sets the "create_user_id" field if the given value is not nil.
func (tpu *TrainedPokemonsUpdate) SetNillableCreateUserID(i *int) *TrainedPokemonsUpdate {
	if i != nil {
		tpu.SetCreateUserID(*i)
	}
	return tpu
}

// ClearCreateUserID clears the value of the "create_user_id" field.
func (tpu *TrainedPokemonsUpdate) ClearCreateUserID() *TrainedPokemonsUpdate {
	tpu.mutation.ClearCreateUserID()
	return tpu
}

// SetNature sets the "nature" field.
func (tpu *TrainedPokemonsUpdate) SetNature(pr property.Nature) *TrainedPokemonsUpdate {
	tpu.mutation.SetNature(pr)
	return tpu
}

// SetEffortValueH sets the "effort_value_h" field.
func (tpu *TrainedPokemonsUpdate) SetEffortValueH(i int) *TrainedPokemonsUpdate {
	tpu.mutation.ResetEffortValueH()
	tpu.mutation.SetEffortValueH(i)
	return tpu
}

// SetNillableEffortValueH sets the "effort_value_h" field if the given value is not nil.
func (tpu *TrainedPokemonsUpdate) SetNillableEffortValueH(i *int) *TrainedPokemonsUpdate {
	if i != nil {
		tpu.SetEffortValueH(*i)
	}
	return tpu
}

// AddEffortValueH adds i to the "effort_value_h" field.
func (tpu *TrainedPokemonsUpdate) AddEffortValueH(i int) *TrainedPokemonsUpdate {
	tpu.mutation.AddEffortValueH(i)
	return tpu
}

// SetEffortValueA sets the "effort_value_a" field.
func (tpu *TrainedPokemonsUpdate) SetEffortValueA(i int) *TrainedPokemonsUpdate {
	tpu.mutation.ResetEffortValueA()
	tpu.mutation.SetEffortValueA(i)
	return tpu
}

// SetNillableEffortValueA sets the "effort_value_a" field if the given value is not nil.
func (tpu *TrainedPokemonsUpdate) SetNillableEffortValueA(i *int) *TrainedPokemonsUpdate {
	if i != nil {
		tpu.SetEffortValueA(*i)
	}
	return tpu
}

// AddEffortValueA adds i to the "effort_value_a" field.
func (tpu *TrainedPokemonsUpdate) AddEffortValueA(i int) *TrainedPokemonsUpdate {
	tpu.mutation.AddEffortValueA(i)
	return tpu
}

// SetEffortValueB sets the "effort_value_b" field.
func (tpu *TrainedPokemonsUpdate) SetEffortValueB(i int) *TrainedPokemonsUpdate {
	tpu.mutation.ResetEffortValueB()
	tpu.mutation.SetEffortValueB(i)
	return tpu
}

// SetNillableEffortValueB sets the "effort_value_b" field if the given value is not nil.
func (tpu *TrainedPokemonsUpdate) SetNillableEffortValueB(i *int) *TrainedPokemonsUpdate {
	if i != nil {
		tpu.SetEffortValueB(*i)
	}
	return tpu
}

// AddEffortValueB adds i to the "effort_value_b" field.
func (tpu *TrainedPokemonsUpdate) AddEffortValueB(i int) *TrainedPokemonsUpdate {
	tpu.mutation.AddEffortValueB(i)
	return tpu
}

// SetEffortValueC sets the "effort_value_c" field.
func (tpu *TrainedPokemonsUpdate) SetEffortValueC(i int) *TrainedPokemonsUpdate {
	tpu.mutation.ResetEffortValueC()
	tpu.mutation.SetEffortValueC(i)
	return tpu
}

// SetNillableEffortValueC sets the "effort_value_c" field if the given value is not nil.
func (tpu *TrainedPokemonsUpdate) SetNillableEffortValueC(i *int) *TrainedPokemonsUpdate {
	if i != nil {
		tpu.SetEffortValueC(*i)
	}
	return tpu
}

// AddEffortValueC adds i to the "effort_value_c" field.
func (tpu *TrainedPokemonsUpdate) AddEffortValueC(i int) *TrainedPokemonsUpdate {
	tpu.mutation.AddEffortValueC(i)
	return tpu
}

// SetEffortValueD sets the "effort_value_d" field.
func (tpu *TrainedPokemonsUpdate) SetEffortValueD(i int) *TrainedPokemonsUpdate {
	tpu.mutation.ResetEffortValueD()
	tpu.mutation.SetEffortValueD(i)
	return tpu
}

// SetNillableEffortValueD sets the "effort_value_d" field if the given value is not nil.
func (tpu *TrainedPokemonsUpdate) SetNillableEffortValueD(i *int) *TrainedPokemonsUpdate {
	if i != nil {
		tpu.SetEffortValueD(*i)
	}
	return tpu
}

// AddEffortValueD adds i to the "effort_value_d" field.
func (tpu *TrainedPokemonsUpdate) AddEffortValueD(i int) *TrainedPokemonsUpdate {
	tpu.mutation.AddEffortValueD(i)
	return tpu
}

// SetEffortValueS sets the "effort_value_s" field.
func (tpu *TrainedPokemonsUpdate) SetEffortValueS(i int) *TrainedPokemonsUpdate {
	tpu.mutation.ResetEffortValueS()
	tpu.mutation.SetEffortValueS(i)
	return tpu
}

// SetNillableEffortValueS sets the "effort_value_s" field if the given value is not nil.
func (tpu *TrainedPokemonsUpdate) SetNillableEffortValueS(i *int) *TrainedPokemonsUpdate {
	if i != nil {
		tpu.SetEffortValueS(*i)
	}
	return tpu
}

// AddEffortValueS adds i to the "effort_value_s" field.
func (tpu *TrainedPokemonsUpdate) AddEffortValueS(i int) *TrainedPokemonsUpdate {
	tpu.mutation.AddEffortValueS(i)
	return tpu
}

// SetUsePokemonID sets the "use_pokemon" edge to the Pokemons entity by ID.
func (tpu *TrainedPokemonsUpdate) SetUsePokemonID(id int) *TrainedPokemonsUpdate {
	tpu.mutation.SetUsePokemonID(id)
	return tpu
}

// SetUsePokemon sets the "use_pokemon" edge to the Pokemons entity.
func (tpu *TrainedPokemonsUpdate) SetUsePokemon(p *Pokemons) *TrainedPokemonsUpdate {
	return tpu.SetUsePokemonID(p.ID)
}

// SetTrainingUserID sets the "training_user" edge to the Users entity by ID.
func (tpu *TrainedPokemonsUpdate) SetTrainingUserID(id int) *TrainedPokemonsUpdate {
	tpu.mutation.SetTrainingUserID(id)
	return tpu
}

// SetNillableTrainingUserID sets the "training_user" edge to the Users entity by ID if the given value is not nil.
func (tpu *TrainedPokemonsUpdate) SetNillableTrainingUserID(id *int) *TrainedPokemonsUpdate {
	if id != nil {
		tpu = tpu.SetTrainingUserID(*id)
	}
	return tpu
}

// SetTrainingUser sets the "training_user" edge to the Users entity.
func (tpu *TrainedPokemonsUpdate) SetTrainingUser(u *Users) *TrainedPokemonsUpdate {
	return tpu.SetTrainingUserID(u.ID)
}

// Mutation returns the TrainedPokemonsMutation object of the builder.
func (tpu *TrainedPokemonsUpdate) Mutation() *TrainedPokemonsMutation {
	return tpu.mutation
}

// ClearUsePokemon clears the "use_pokemon" edge to the Pokemons entity.
func (tpu *TrainedPokemonsUpdate) ClearUsePokemon() *TrainedPokemonsUpdate {
	tpu.mutation.ClearUsePokemon()
	return tpu
}

// ClearTrainingUser clears the "training_user" edge to the Users entity.
func (tpu *TrainedPokemonsUpdate) ClearTrainingUser() *TrainedPokemonsUpdate {
	tpu.mutation.ClearTrainingUser()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TrainedPokemonsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tpu.defaults()
	if len(tpu.hooks) == 0 {
		if err = tpu.check(); err != nil {
			return 0, err
		}
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrainedPokemonsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpu.check(); err != nil {
				return 0, err
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			if tpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TrainedPokemonsUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TrainedPokemonsUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TrainedPokemonsUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpu *TrainedPokemonsUpdate) defaults() {
	if _, ok := tpu.mutation.UpdateTime(); !ok {
		v := trainedpokemons.UpdateDefaultUpdateTime()
		tpu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TrainedPokemonsUpdate) check() error {
	if v, ok := tpu.mutation.PokemonID(); ok {
		if err := trainedpokemons.PokemonIDValidator(v); err != nil {
			return &ValidationError{Name: "pokemon_id", err: fmt.Errorf("ent: validator failed for field \"pokemon_id\": %w", err)}
		}
	}
	if v, ok := tpu.mutation.CreateUserID(); ok {
		if err := trainedpokemons.CreateUserIDValidator(v); err != nil {
			return &ValidationError{Name: "create_user_id", err: fmt.Errorf("ent: validator failed for field \"create_user_id\": %w", err)}
		}
	}
	if v, ok := tpu.mutation.Nature(); ok {
		if err := trainedpokemons.NatureValidator(string(v)); err != nil {
			return &ValidationError{Name: "nature", err: fmt.Errorf("ent: validator failed for field \"nature\": %w", err)}
		}
	}
	if _, ok := tpu.mutation.UsePokemonID(); tpu.mutation.UsePokemonCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"use_pokemon\"")
	}
	return nil
}

func (tpu *TrainedPokemonsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   trainedpokemons.Table,
			Columns: trainedpokemons.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trainedpokemons.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: trainedpokemons.FieldUpdateTime,
		})
	}
	if value, ok := tpu.mutation.Nature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemons.FieldNature,
		})
	}
	if value, ok := tpu.mutation.EffortValueH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueH,
		})
	}
	if value, ok := tpu.mutation.AddedEffortValueH(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueH,
		})
	}
	if value, ok := tpu.mutation.EffortValueA(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueA,
		})
	}
	if value, ok := tpu.mutation.AddedEffortValueA(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueA,
		})
	}
	if value, ok := tpu.mutation.EffortValueB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueB,
		})
	}
	if value, ok := tpu.mutation.AddedEffortValueB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueB,
		})
	}
	if value, ok := tpu.mutation.EffortValueC(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueC,
		})
	}
	if value, ok := tpu.mutation.AddedEffortValueC(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueC,
		})
	}
	if value, ok := tpu.mutation.EffortValueD(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueD,
		})
	}
	if value, ok := tpu.mutation.AddedEffortValueD(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueD,
		})
	}
	if value, ok := tpu.mutation.EffortValueS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueS,
		})
	}
	if value, ok := tpu.mutation.AddedEffortValueS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueS,
		})
	}
	if tpu.mutation.UsePokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.UsePokemonTable,
			Columns: []string{trainedpokemons.UsePokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.UsePokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.UsePokemonTable,
			Columns: []string{trainedpokemons.UsePokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.TrainingUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.TrainingUserTable,
			Columns: []string{trainedpokemons.TrainingUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.TrainingUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.TrainingUserTable,
			Columns: []string{trainedpokemons.TrainingUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trainedpokemons.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TrainedPokemonsUpdateOne is the builder for updating a single TrainedPokemons entity.
type TrainedPokemonsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrainedPokemonsMutation
}

// SetPokemonID sets the "pokemon_id" field.
func (tpuo *TrainedPokemonsUpdateOne) SetPokemonID(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.SetPokemonID(i)
	return tpuo
}

// SetCreateUserID sets the "create_user_id" field.
func (tpuo *TrainedPokemonsUpdateOne) SetCreateUserID(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.SetCreateUserID(i)
	return tpuo
}

// SetNillableCreateUserID sets the "create_user_id" field if the given value is not nil.
func (tpuo *TrainedPokemonsUpdateOne) SetNillableCreateUserID(i *int) *TrainedPokemonsUpdateOne {
	if i != nil {
		tpuo.SetCreateUserID(*i)
	}
	return tpuo
}

// ClearCreateUserID clears the value of the "create_user_id" field.
func (tpuo *TrainedPokemonsUpdateOne) ClearCreateUserID() *TrainedPokemonsUpdateOne {
	tpuo.mutation.ClearCreateUserID()
	return tpuo
}

// SetNature sets the "nature" field.
func (tpuo *TrainedPokemonsUpdateOne) SetNature(pr property.Nature) *TrainedPokemonsUpdateOne {
	tpuo.mutation.SetNature(pr)
	return tpuo
}

// SetEffortValueH sets the "effort_value_h" field.
func (tpuo *TrainedPokemonsUpdateOne) SetEffortValueH(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.ResetEffortValueH()
	tpuo.mutation.SetEffortValueH(i)
	return tpuo
}

// SetNillableEffortValueH sets the "effort_value_h" field if the given value is not nil.
func (tpuo *TrainedPokemonsUpdateOne) SetNillableEffortValueH(i *int) *TrainedPokemonsUpdateOne {
	if i != nil {
		tpuo.SetEffortValueH(*i)
	}
	return tpuo
}

// AddEffortValueH adds i to the "effort_value_h" field.
func (tpuo *TrainedPokemonsUpdateOne) AddEffortValueH(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.AddEffortValueH(i)
	return tpuo
}

// SetEffortValueA sets the "effort_value_a" field.
func (tpuo *TrainedPokemonsUpdateOne) SetEffortValueA(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.ResetEffortValueA()
	tpuo.mutation.SetEffortValueA(i)
	return tpuo
}

// SetNillableEffortValueA sets the "effort_value_a" field if the given value is not nil.
func (tpuo *TrainedPokemonsUpdateOne) SetNillableEffortValueA(i *int) *TrainedPokemonsUpdateOne {
	if i != nil {
		tpuo.SetEffortValueA(*i)
	}
	return tpuo
}

// AddEffortValueA adds i to the "effort_value_a" field.
func (tpuo *TrainedPokemonsUpdateOne) AddEffortValueA(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.AddEffortValueA(i)
	return tpuo
}

// SetEffortValueB sets the "effort_value_b" field.
func (tpuo *TrainedPokemonsUpdateOne) SetEffortValueB(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.ResetEffortValueB()
	tpuo.mutation.SetEffortValueB(i)
	return tpuo
}

// SetNillableEffortValueB sets the "effort_value_b" field if the given value is not nil.
func (tpuo *TrainedPokemonsUpdateOne) SetNillableEffortValueB(i *int) *TrainedPokemonsUpdateOne {
	if i != nil {
		tpuo.SetEffortValueB(*i)
	}
	return tpuo
}

// AddEffortValueB adds i to the "effort_value_b" field.
func (tpuo *TrainedPokemonsUpdateOne) AddEffortValueB(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.AddEffortValueB(i)
	return tpuo
}

// SetEffortValueC sets the "effort_value_c" field.
func (tpuo *TrainedPokemonsUpdateOne) SetEffortValueC(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.ResetEffortValueC()
	tpuo.mutation.SetEffortValueC(i)
	return tpuo
}

// SetNillableEffortValueC sets the "effort_value_c" field if the given value is not nil.
func (tpuo *TrainedPokemonsUpdateOne) SetNillableEffortValueC(i *int) *TrainedPokemonsUpdateOne {
	if i != nil {
		tpuo.SetEffortValueC(*i)
	}
	return tpuo
}

// AddEffortValueC adds i to the "effort_value_c" field.
func (tpuo *TrainedPokemonsUpdateOne) AddEffortValueC(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.AddEffortValueC(i)
	return tpuo
}

// SetEffortValueD sets the "effort_value_d" field.
func (tpuo *TrainedPokemonsUpdateOne) SetEffortValueD(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.ResetEffortValueD()
	tpuo.mutation.SetEffortValueD(i)
	return tpuo
}

// SetNillableEffortValueD sets the "effort_value_d" field if the given value is not nil.
func (tpuo *TrainedPokemonsUpdateOne) SetNillableEffortValueD(i *int) *TrainedPokemonsUpdateOne {
	if i != nil {
		tpuo.SetEffortValueD(*i)
	}
	return tpuo
}

// AddEffortValueD adds i to the "effort_value_d" field.
func (tpuo *TrainedPokemonsUpdateOne) AddEffortValueD(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.AddEffortValueD(i)
	return tpuo
}

// SetEffortValueS sets the "effort_value_s" field.
func (tpuo *TrainedPokemonsUpdateOne) SetEffortValueS(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.ResetEffortValueS()
	tpuo.mutation.SetEffortValueS(i)
	return tpuo
}

// SetNillableEffortValueS sets the "effort_value_s" field if the given value is not nil.
func (tpuo *TrainedPokemonsUpdateOne) SetNillableEffortValueS(i *int) *TrainedPokemonsUpdateOne {
	if i != nil {
		tpuo.SetEffortValueS(*i)
	}
	return tpuo
}

// AddEffortValueS adds i to the "effort_value_s" field.
func (tpuo *TrainedPokemonsUpdateOne) AddEffortValueS(i int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.AddEffortValueS(i)
	return tpuo
}

// SetUsePokemonID sets the "use_pokemon" edge to the Pokemons entity by ID.
func (tpuo *TrainedPokemonsUpdateOne) SetUsePokemonID(id int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.SetUsePokemonID(id)
	return tpuo
}

// SetUsePokemon sets the "use_pokemon" edge to the Pokemons entity.
func (tpuo *TrainedPokemonsUpdateOne) SetUsePokemon(p *Pokemons) *TrainedPokemonsUpdateOne {
	return tpuo.SetUsePokemonID(p.ID)
}

// SetTrainingUserID sets the "training_user" edge to the Users entity by ID.
func (tpuo *TrainedPokemonsUpdateOne) SetTrainingUserID(id int) *TrainedPokemonsUpdateOne {
	tpuo.mutation.SetTrainingUserID(id)
	return tpuo
}

// SetNillableTrainingUserID sets the "training_user" edge to the Users entity by ID if the given value is not nil.
func (tpuo *TrainedPokemonsUpdateOne) SetNillableTrainingUserID(id *int) *TrainedPokemonsUpdateOne {
	if id != nil {
		tpuo = tpuo.SetTrainingUserID(*id)
	}
	return tpuo
}

// SetTrainingUser sets the "training_user" edge to the Users entity.
func (tpuo *TrainedPokemonsUpdateOne) SetTrainingUser(u *Users) *TrainedPokemonsUpdateOne {
	return tpuo.SetTrainingUserID(u.ID)
}

// Mutation returns the TrainedPokemonsMutation object of the builder.
func (tpuo *TrainedPokemonsUpdateOne) Mutation() *TrainedPokemonsMutation {
	return tpuo.mutation
}

// ClearUsePokemon clears the "use_pokemon" edge to the Pokemons entity.
func (tpuo *TrainedPokemonsUpdateOne) ClearUsePokemon() *TrainedPokemonsUpdateOne {
	tpuo.mutation.ClearUsePokemon()
	return tpuo
}

// ClearTrainingUser clears the "training_user" edge to the Users entity.
func (tpuo *TrainedPokemonsUpdateOne) ClearTrainingUser() *TrainedPokemonsUpdateOne {
	tpuo.mutation.ClearTrainingUser()
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TrainedPokemonsUpdateOne) Select(field string, fields ...string) *TrainedPokemonsUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TrainedPokemons entity.
func (tpuo *TrainedPokemonsUpdateOne) Save(ctx context.Context) (*TrainedPokemons, error) {
	var (
		err  error
		node *TrainedPokemons
	)
	tpuo.defaults()
	if len(tpuo.hooks) == 0 {
		if err = tpuo.check(); err != nil {
			return nil, err
		}
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrainedPokemonsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpuo.check(); err != nil {
				return nil, err
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			if tpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TrainedPokemonsUpdateOne) SaveX(ctx context.Context) *TrainedPokemons {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TrainedPokemonsUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TrainedPokemonsUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpuo *TrainedPokemonsUpdateOne) defaults() {
	if _, ok := tpuo.mutation.UpdateTime(); !ok {
		v := trainedpokemons.UpdateDefaultUpdateTime()
		tpuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TrainedPokemonsUpdateOne) check() error {
	if v, ok := tpuo.mutation.PokemonID(); ok {
		if err := trainedpokemons.PokemonIDValidator(v); err != nil {
			return &ValidationError{Name: "pokemon_id", err: fmt.Errorf("ent: validator failed for field \"pokemon_id\": %w", err)}
		}
	}
	if v, ok := tpuo.mutation.CreateUserID(); ok {
		if err := trainedpokemons.CreateUserIDValidator(v); err != nil {
			return &ValidationError{Name: "create_user_id", err: fmt.Errorf("ent: validator failed for field \"create_user_id\": %w", err)}
		}
	}
	if v, ok := tpuo.mutation.Nature(); ok {
		if err := trainedpokemons.NatureValidator(string(v)); err != nil {
			return &ValidationError{Name: "nature", err: fmt.Errorf("ent: validator failed for field \"nature\": %w", err)}
		}
	}
	if _, ok := tpuo.mutation.UsePokemonID(); tpuo.mutation.UsePokemonCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"use_pokemon\"")
	}
	return nil
}

func (tpuo *TrainedPokemonsUpdateOne) sqlSave(ctx context.Context) (_node *TrainedPokemons, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   trainedpokemons.Table,
			Columns: trainedpokemons.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trainedpokemons.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TrainedPokemons.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trainedpokemons.FieldID)
		for _, f := range fields {
			if !trainedpokemons.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trainedpokemons.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: trainedpokemons.FieldUpdateTime,
		})
	}
	if value, ok := tpuo.mutation.Nature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: trainedpokemons.FieldNature,
		})
	}
	if value, ok := tpuo.mutation.EffortValueH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueH,
		})
	}
	if value, ok := tpuo.mutation.AddedEffortValueH(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueH,
		})
	}
	if value, ok := tpuo.mutation.EffortValueA(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueA,
		})
	}
	if value, ok := tpuo.mutation.AddedEffortValueA(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueA,
		})
	}
	if value, ok := tpuo.mutation.EffortValueB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueB,
		})
	}
	if value, ok := tpuo.mutation.AddedEffortValueB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueB,
		})
	}
	if value, ok := tpuo.mutation.EffortValueC(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueC,
		})
	}
	if value, ok := tpuo.mutation.AddedEffortValueC(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueC,
		})
	}
	if value, ok := tpuo.mutation.EffortValueD(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueD,
		})
	}
	if value, ok := tpuo.mutation.AddedEffortValueD(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueD,
		})
	}
	if value, ok := tpuo.mutation.EffortValueS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueS,
		})
	}
	if value, ok := tpuo.mutation.AddedEffortValueS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: trainedpokemons.FieldEffortValueS,
		})
	}
	if tpuo.mutation.UsePokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.UsePokemonTable,
			Columns: []string{trainedpokemons.UsePokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.UsePokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.UsePokemonTable,
			Columns: []string{trainedpokemons.UsePokemonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.TrainingUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.TrainingUserTable,
			Columns: []string{trainedpokemons.TrainingUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.TrainingUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trainedpokemons.TrainingUserTable,
			Columns: []string{trainedpokemons.TrainingUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TrainedPokemons{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trainedpokemons.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
