// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/migrate"

	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/abilities"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battleopponentparty"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/battlerecords"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/forms"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/helditems"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/party"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/partyresultrecord"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/tags"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/typecompatibility"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/users"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Abilities is the client for interacting with the Abilities builders.
	Abilities *AbilitiesClient
	// BattleOpponentParty is the client for interacting with the BattleOpponentParty builders.
	BattleOpponentParty *BattleOpponentPartyClient
	// BattleRecords is the client for interacting with the BattleRecords builders.
	BattleRecords *BattleRecordsClient
	// Forms is the client for interacting with the Forms builders.
	Forms *FormsClient
	// HeldItems is the client for interacting with the HeldItems builders.
	HeldItems *HeldItemsClient
	// Moves is the client for interacting with the Moves builders.
	Moves *MovesClient
	// Party is the client for interacting with the Party builders.
	Party *PartyClient
	// PartyResultRecord is the client for interacting with the PartyResultRecord builders.
	PartyResultRecord *PartyResultRecordClient
	// Pokemons is the client for interacting with the Pokemons builders.
	Pokemons *PokemonsClient
	// Tags is the client for interacting with the Tags builders.
	Tags *TagsClient
	// TrainedPokemonDetails is the client for interacting with the TrainedPokemonDetails builders.
	TrainedPokemonDetails *TrainedPokemonDetailsClient
	// TrainedPokemons is the client for interacting with the TrainedPokemons builders.
	TrainedPokemons *TrainedPokemonsClient
	// TypeCompatibility is the client for interacting with the TypeCompatibility builders.
	TypeCompatibility *TypeCompatibilityClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Abilities = NewAbilitiesClient(c.config)
	c.BattleOpponentParty = NewBattleOpponentPartyClient(c.config)
	c.BattleRecords = NewBattleRecordsClient(c.config)
	c.Forms = NewFormsClient(c.config)
	c.HeldItems = NewHeldItemsClient(c.config)
	c.Moves = NewMovesClient(c.config)
	c.Party = NewPartyClient(c.config)
	c.PartyResultRecord = NewPartyResultRecordClient(c.config)
	c.Pokemons = NewPokemonsClient(c.config)
	c.Tags = NewTagsClient(c.config)
	c.TrainedPokemonDetails = NewTrainedPokemonDetailsClient(c.config)
	c.TrainedPokemons = NewTrainedPokemonsClient(c.config)
	c.TypeCompatibility = NewTypeCompatibilityClient(c.config)
	c.Users = NewUsersClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Abilities:             NewAbilitiesClient(cfg),
		BattleOpponentParty:   NewBattleOpponentPartyClient(cfg),
		BattleRecords:         NewBattleRecordsClient(cfg),
		Forms:                 NewFormsClient(cfg),
		HeldItems:             NewHeldItemsClient(cfg),
		Moves:                 NewMovesClient(cfg),
		Party:                 NewPartyClient(cfg),
		PartyResultRecord:     NewPartyResultRecordClient(cfg),
		Pokemons:              NewPokemonsClient(cfg),
		Tags:                  NewTagsClient(cfg),
		TrainedPokemonDetails: NewTrainedPokemonDetailsClient(cfg),
		TrainedPokemons:       NewTrainedPokemonsClient(cfg),
		TypeCompatibility:     NewTypeCompatibilityClient(cfg),
		Users:                 NewUsersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                cfg,
		Abilities:             NewAbilitiesClient(cfg),
		BattleOpponentParty:   NewBattleOpponentPartyClient(cfg),
		BattleRecords:         NewBattleRecordsClient(cfg),
		Forms:                 NewFormsClient(cfg),
		HeldItems:             NewHeldItemsClient(cfg),
		Moves:                 NewMovesClient(cfg),
		Party:                 NewPartyClient(cfg),
		PartyResultRecord:     NewPartyResultRecordClient(cfg),
		Pokemons:              NewPokemonsClient(cfg),
		Tags:                  NewTagsClient(cfg),
		TrainedPokemonDetails: NewTrainedPokemonDetailsClient(cfg),
		TrainedPokemons:       NewTrainedPokemonsClient(cfg),
		TypeCompatibility:     NewTypeCompatibilityClient(cfg),
		Users:                 NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Abilities.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Abilities.Use(hooks...)
	c.BattleOpponentParty.Use(hooks...)
	c.BattleRecords.Use(hooks...)
	c.Forms.Use(hooks...)
	c.HeldItems.Use(hooks...)
	c.Moves.Use(hooks...)
	c.Party.Use(hooks...)
	c.PartyResultRecord.Use(hooks...)
	c.Pokemons.Use(hooks...)
	c.Tags.Use(hooks...)
	c.TrainedPokemonDetails.Use(hooks...)
	c.TrainedPokemons.Use(hooks...)
	c.TypeCompatibility.Use(hooks...)
	c.Users.Use(hooks...)
}

// AbilitiesClient is a client for the Abilities schema.
type AbilitiesClient struct {
	config
}

// NewAbilitiesClient returns a client for the Abilities from the given config.
func NewAbilitiesClient(c config) *AbilitiesClient {
	return &AbilitiesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilities.Hooks(f(g(h())))`.
func (c *AbilitiesClient) Use(hooks ...Hook) {
	c.hooks.Abilities = append(c.hooks.Abilities, hooks...)
}

// Create returns a create builder for Abilities.
func (c *AbilitiesClient) Create() *AbilitiesCreate {
	mutation := newAbilitiesMutation(c.config, OpCreate)
	return &AbilitiesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Abilities entities.
func (c *AbilitiesClient) CreateBulk(builders ...*AbilitiesCreate) *AbilitiesCreateBulk {
	return &AbilitiesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Abilities.
func (c *AbilitiesClient) Update() *AbilitiesUpdate {
	mutation := newAbilitiesMutation(c.config, OpUpdate)
	return &AbilitiesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilitiesClient) UpdateOne(a *Abilities) *AbilitiesUpdateOne {
	mutation := newAbilitiesMutation(c.config, OpUpdateOne, withAbilities(a))
	return &AbilitiesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilitiesClient) UpdateOneID(id int) *AbilitiesUpdateOne {
	mutation := newAbilitiesMutation(c.config, OpUpdateOne, withAbilitiesID(id))
	return &AbilitiesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Abilities.
func (c *AbilitiesClient) Delete() *AbilitiesDelete {
	mutation := newAbilitiesMutation(c.config, OpDelete)
	return &AbilitiesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AbilitiesClient) DeleteOne(a *Abilities) *AbilitiesDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AbilitiesClient) DeleteOneID(id int) *AbilitiesDeleteOne {
	builder := c.Delete().Where(abilities.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilitiesDeleteOne{builder}
}

// Query returns a query builder for Abilities.
func (c *AbilitiesClient) Query() *AbilitiesQuery {
	return &AbilitiesQuery{
		config: c.config,
	}
}

// Get returns a Abilities entity by its id.
func (c *AbilitiesClient) Get(ctx context.Context, id int) (*Abilities, error) {
	return c.Query().Where(abilities.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilitiesClient) GetX(ctx context.Context, id int) *Abilities {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbilityHolder1 queries the ability_holder1 edge of a Abilities.
func (c *AbilitiesClient) QueryAbilityHolder1(a *Abilities) *PokemonsQuery {
	query := &PokemonsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilities.Table, abilities.FieldID, id),
			sqlgraph.To(pokemons.Table, pokemons.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, abilities.AbilityHolder1Table, abilities.AbilityHolder1Column),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbilityHolder2 queries the ability_holder2 edge of a Abilities.
func (c *AbilitiesClient) QueryAbilityHolder2(a *Abilities) *PokemonsQuery {
	query := &PokemonsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilities.Table, abilities.FieldID, id),
			sqlgraph.To(pokemons.Table, pokemons.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, abilities.AbilityHolder2Table, abilities.AbilityHolder2Column),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiddenAbilityHolder queries the hidden_ability_holder edge of a Abilities.
func (c *AbilitiesClient) QueryHiddenAbilityHolder(a *Abilities) *PokemonsQuery {
	query := &PokemonsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilities.Table, abilities.FieldID, id),
			sqlgraph.To(pokemons.Table, pokemons.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, abilities.HiddenAbilityHolderTable, abilities.HiddenAbilityHolderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTrainedPokemonAbility queries the to_trained_pokemon_ability edge of a Abilities.
func (c *AbilitiesClient) QueryToTrainedPokemonAbility(a *Abilities) *TrainedPokemonDetailsQuery {
	query := &TrainedPokemonDetailsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilities.Table, abilities.FieldID, id),
			sqlgraph.To(trainedpokemondetails.Table, trainedpokemondetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, abilities.ToTrainedPokemonAbilityTable, abilities.ToTrainedPokemonAbilityColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilitiesClient) Hooks() []Hook {
	return c.hooks.Abilities
}

// BattleOpponentPartyClient is a client for the BattleOpponentParty schema.
type BattleOpponentPartyClient struct {
	config
}

// NewBattleOpponentPartyClient returns a client for the BattleOpponentParty from the given config.
func NewBattleOpponentPartyClient(c config) *BattleOpponentPartyClient {
	return &BattleOpponentPartyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `battleopponentparty.Hooks(f(g(h())))`.
func (c *BattleOpponentPartyClient) Use(hooks ...Hook) {
	c.hooks.BattleOpponentParty = append(c.hooks.BattleOpponentParty, hooks...)
}

// Create returns a create builder for BattleOpponentParty.
func (c *BattleOpponentPartyClient) Create() *BattleOpponentPartyCreate {
	mutation := newBattleOpponentPartyMutation(c.config, OpCreate)
	return &BattleOpponentPartyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BattleOpponentParty entities.
func (c *BattleOpponentPartyClient) CreateBulk(builders ...*BattleOpponentPartyCreate) *BattleOpponentPartyCreateBulk {
	return &BattleOpponentPartyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BattleOpponentParty.
func (c *BattleOpponentPartyClient) Update() *BattleOpponentPartyUpdate {
	mutation := newBattleOpponentPartyMutation(c.config, OpUpdate)
	return &BattleOpponentPartyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BattleOpponentPartyClient) UpdateOne(bop *BattleOpponentParty) *BattleOpponentPartyUpdateOne {
	mutation := newBattleOpponentPartyMutation(c.config, OpUpdateOne, withBattleOpponentParty(bop))
	return &BattleOpponentPartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BattleOpponentPartyClient) UpdateOneID(id int) *BattleOpponentPartyUpdateOne {
	mutation := newBattleOpponentPartyMutation(c.config, OpUpdateOne, withBattleOpponentPartyID(id))
	return &BattleOpponentPartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BattleOpponentParty.
func (c *BattleOpponentPartyClient) Delete() *BattleOpponentPartyDelete {
	mutation := newBattleOpponentPartyMutation(c.config, OpDelete)
	return &BattleOpponentPartyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BattleOpponentPartyClient) DeleteOne(bop *BattleOpponentParty) *BattleOpponentPartyDeleteOne {
	return c.DeleteOneID(bop.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BattleOpponentPartyClient) DeleteOneID(id int) *BattleOpponentPartyDeleteOne {
	builder := c.Delete().Where(battleopponentparty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BattleOpponentPartyDeleteOne{builder}
}

// Query returns a query builder for BattleOpponentParty.
func (c *BattleOpponentPartyClient) Query() *BattleOpponentPartyQuery {
	return &BattleOpponentPartyQuery{
		config: c.config,
	}
}

// Get returns a BattleOpponentParty entity by its id.
func (c *BattleOpponentPartyClient) Get(ctx context.Context, id int) (*BattleOpponentParty, error) {
	return c.Query().Where(battleopponentparty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BattleOpponentPartyClient) GetX(ctx context.Context, id int) *BattleOpponentParty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBattleContent queries the battle_content edge of a BattleOpponentParty.
func (c *BattleOpponentPartyClient) QueryBattleContent(bop *BattleOpponentParty) *BattleRecordsQuery {
	query := &BattleRecordsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bop.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battleopponentparty.Table, battleopponentparty.FieldID, id),
			sqlgraph.To(battlerecords.Table, battlerecords.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, battleopponentparty.BattleContentTable, battleopponentparty.BattleContentColumn),
		)
		fromV = sqlgraph.Neighbors(bop.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BattleOpponentPartyClient) Hooks() []Hook {
	return c.hooks.BattleOpponentParty
}

// BattleRecordsClient is a client for the BattleRecords schema.
type BattleRecordsClient struct {
	config
}

// NewBattleRecordsClient returns a client for the BattleRecords from the given config.
func NewBattleRecordsClient(c config) *BattleRecordsClient {
	return &BattleRecordsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `battlerecords.Hooks(f(g(h())))`.
func (c *BattleRecordsClient) Use(hooks ...Hook) {
	c.hooks.BattleRecords = append(c.hooks.BattleRecords, hooks...)
}

// Create returns a create builder for BattleRecords.
func (c *BattleRecordsClient) Create() *BattleRecordsCreate {
	mutation := newBattleRecordsMutation(c.config, OpCreate)
	return &BattleRecordsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BattleRecords entities.
func (c *BattleRecordsClient) CreateBulk(builders ...*BattleRecordsCreate) *BattleRecordsCreateBulk {
	return &BattleRecordsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BattleRecords.
func (c *BattleRecordsClient) Update() *BattleRecordsUpdate {
	mutation := newBattleRecordsMutation(c.config, OpUpdate)
	return &BattleRecordsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BattleRecordsClient) UpdateOne(br *BattleRecords) *BattleRecordsUpdateOne {
	mutation := newBattleRecordsMutation(c.config, OpUpdateOne, withBattleRecords(br))
	return &BattleRecordsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BattleRecordsClient) UpdateOneID(id int) *BattleRecordsUpdateOne {
	mutation := newBattleRecordsMutation(c.config, OpUpdateOne, withBattleRecordsID(id))
	return &BattleRecordsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BattleRecords.
func (c *BattleRecordsClient) Delete() *BattleRecordsDelete {
	mutation := newBattleRecordsMutation(c.config, OpDelete)
	return &BattleRecordsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BattleRecordsClient) DeleteOne(br *BattleRecords) *BattleRecordsDeleteOne {
	return c.DeleteOneID(br.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BattleRecordsClient) DeleteOneID(id int) *BattleRecordsDeleteOne {
	builder := c.Delete().Where(battlerecords.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BattleRecordsDeleteOne{builder}
}

// Query returns a query builder for BattleRecords.
func (c *BattleRecordsClient) Query() *BattleRecordsQuery {
	return &BattleRecordsQuery{
		config: c.config,
	}
}

// Get returns a BattleRecords entity by its id.
func (c *BattleRecordsClient) Get(ctx context.Context, id int) (*BattleRecords, error) {
	return c.Query().Where(battlerecords.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BattleRecordsClient) GetX(ctx context.Context, id int) *BattleRecords {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUseParty queries the use_party edge of a BattleRecords.
func (c *BattleRecordsClient) QueryUseParty(br *BattleRecords) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battlerecords.Table, battlerecords.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, battlerecords.UsePartyTable, battlerecords.UsePartyColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOpponentParty queries the opponent_party edge of a BattleRecords.
func (c *BattleRecordsClient) QueryOpponentParty(br *BattleRecords) *BattleOpponentPartyQuery {
	query := &BattleOpponentPartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battlerecords.Table, battlerecords.FieldID, id),
			sqlgraph.To(battleopponentparty.Table, battleopponentparty.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, battlerecords.OpponentPartyTable, battlerecords.OpponentPartyColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BattleRecordsClient) Hooks() []Hook {
	return c.hooks.BattleRecords
}

// FormsClient is a client for the Forms schema.
type FormsClient struct {
	config
}

// NewFormsClient returns a client for the Forms from the given config.
func NewFormsClient(c config) *FormsClient {
	return &FormsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `forms.Hooks(f(g(h())))`.
func (c *FormsClient) Use(hooks ...Hook) {
	c.hooks.Forms = append(c.hooks.Forms, hooks...)
}

// Create returns a create builder for Forms.
func (c *FormsClient) Create() *FormsCreate {
	mutation := newFormsMutation(c.config, OpCreate)
	return &FormsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Forms entities.
func (c *FormsClient) CreateBulk(builders ...*FormsCreate) *FormsCreateBulk {
	return &FormsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Forms.
func (c *FormsClient) Update() *FormsUpdate {
	mutation := newFormsMutation(c.config, OpUpdate)
	return &FormsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormsClient) UpdateOne(f *Forms) *FormsUpdateOne {
	mutation := newFormsMutation(c.config, OpUpdateOne, withForms(f))
	return &FormsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormsClient) UpdateOneID(id int) *FormsUpdateOne {
	mutation := newFormsMutation(c.config, OpUpdateOne, withFormsID(id))
	return &FormsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Forms.
func (c *FormsClient) Delete() *FormsDelete {
	mutation := newFormsMutation(c.config, OpDelete)
	return &FormsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FormsClient) DeleteOne(f *Forms) *FormsDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FormsClient) DeleteOneID(id int) *FormsDeleteOne {
	builder := c.Delete().Where(forms.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormsDeleteOne{builder}
}

// Query returns a query builder for Forms.
func (c *FormsClient) Query() *FormsQuery {
	return &FormsQuery{
		config: c.config,
	}
}

// Get returns a Forms entity by its id.
func (c *FormsClient) Get(ctx context.Context, id int) (*Forms, error) {
	return c.Query().Where(forms.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormsClient) GetX(ctx context.Context, id int) *Forms {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFormHolder queries the form_holder edge of a Forms.
func (c *FormsClient) QueryFormHolder(f *Forms) *PokemonsQuery {
	query := &PokemonsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(forms.Table, forms.FieldID, id),
			sqlgraph.To(pokemons.Table, pokemons.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, forms.FormHolderTable, forms.FormHolderColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FormsClient) Hooks() []Hook {
	return c.hooks.Forms
}

// HeldItemsClient is a client for the HeldItems schema.
type HeldItemsClient struct {
	config
}

// NewHeldItemsClient returns a client for the HeldItems from the given config.
func NewHeldItemsClient(c config) *HeldItemsClient {
	return &HeldItemsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `helditems.Hooks(f(g(h())))`.
func (c *HeldItemsClient) Use(hooks ...Hook) {
	c.hooks.HeldItems = append(c.hooks.HeldItems, hooks...)
}

// Create returns a create builder for HeldItems.
func (c *HeldItemsClient) Create() *HeldItemsCreate {
	mutation := newHeldItemsMutation(c.config, OpCreate)
	return &HeldItemsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HeldItems entities.
func (c *HeldItemsClient) CreateBulk(builders ...*HeldItemsCreate) *HeldItemsCreateBulk {
	return &HeldItemsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HeldItems.
func (c *HeldItemsClient) Update() *HeldItemsUpdate {
	mutation := newHeldItemsMutation(c.config, OpUpdate)
	return &HeldItemsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HeldItemsClient) UpdateOne(hi *HeldItems) *HeldItemsUpdateOne {
	mutation := newHeldItemsMutation(c.config, OpUpdateOne, withHeldItems(hi))
	return &HeldItemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HeldItemsClient) UpdateOneID(id int) *HeldItemsUpdateOne {
	mutation := newHeldItemsMutation(c.config, OpUpdateOne, withHeldItemsID(id))
	return &HeldItemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HeldItems.
func (c *HeldItemsClient) Delete() *HeldItemsDelete {
	mutation := newHeldItemsMutation(c.config, OpDelete)
	return &HeldItemsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HeldItemsClient) DeleteOne(hi *HeldItems) *HeldItemsDeleteOne {
	return c.DeleteOneID(hi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HeldItemsClient) DeleteOneID(id int) *HeldItemsDeleteOne {
	builder := c.Delete().Where(helditems.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HeldItemsDeleteOne{builder}
}

// Query returns a query builder for HeldItems.
func (c *HeldItemsClient) Query() *HeldItemsQuery {
	return &HeldItemsQuery{
		config: c.config,
	}
}

// Get returns a HeldItems entity by its id.
func (c *HeldItemsClient) Get(ctx context.Context, id int) (*HeldItems, error) {
	return c.Query().Where(helditems.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HeldItemsClient) GetX(ctx context.Context, id int) *HeldItems {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryToTrainedPokemonItem queries the to_trained_pokemon_item edge of a HeldItems.
func (c *HeldItemsClient) QueryToTrainedPokemonItem(hi *HeldItems) *TrainedPokemonDetailsQuery {
	query := &TrainedPokemonDetailsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := hi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(helditems.Table, helditems.FieldID, id),
			sqlgraph.To(trainedpokemondetails.Table, trainedpokemondetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, helditems.ToTrainedPokemonItemTable, helditems.ToTrainedPokemonItemColumn),
		)
		fromV = sqlgraph.Neighbors(hi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HeldItemsClient) Hooks() []Hook {
	return c.hooks.HeldItems
}

// MovesClient is a client for the Moves schema.
type MovesClient struct {
	config
}

// NewMovesClient returns a client for the Moves from the given config.
func NewMovesClient(c config) *MovesClient {
	return &MovesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `moves.Hooks(f(g(h())))`.
func (c *MovesClient) Use(hooks ...Hook) {
	c.hooks.Moves = append(c.hooks.Moves, hooks...)
}

// Create returns a create builder for Moves.
func (c *MovesClient) Create() *MovesCreate {
	mutation := newMovesMutation(c.config, OpCreate)
	return &MovesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Moves entities.
func (c *MovesClient) CreateBulk(builders ...*MovesCreate) *MovesCreateBulk {
	return &MovesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Moves.
func (c *MovesClient) Update() *MovesUpdate {
	mutation := newMovesMutation(c.config, OpUpdate)
	return &MovesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MovesClient) UpdateOne(m *Moves) *MovesUpdateOne {
	mutation := newMovesMutation(c.config, OpUpdateOne, withMoves(m))
	return &MovesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MovesClient) UpdateOneID(id int) *MovesUpdateOne {
	mutation := newMovesMutation(c.config, OpUpdateOne, withMovesID(id))
	return &MovesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Moves.
func (c *MovesClient) Delete() *MovesDelete {
	mutation := newMovesMutation(c.config, OpDelete)
	return &MovesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MovesClient) DeleteOne(m *Moves) *MovesDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MovesClient) DeleteOneID(id int) *MovesDeleteOne {
	builder := c.Delete().Where(moves.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MovesDeleteOne{builder}
}

// Query returns a query builder for Moves.
func (c *MovesClient) Query() *MovesQuery {
	return &MovesQuery{
		config: c.config,
	}
}

// Get returns a Moves entity by its id.
func (c *MovesClient) Get(ctx context.Context, id int) (*Moves, error) {
	return c.Query().Where(moves.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MovesClient) GetX(ctx context.Context, id int) *Moves {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryToTrainedPokemonMove1 queries the to_trained_pokemon_move1 edge of a Moves.
func (c *MovesClient) QueryToTrainedPokemonMove1(m *Moves) *TrainedPokemonDetailsQuery {
	query := &TrainedPokemonDetailsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moves.Table, moves.FieldID, id),
			sqlgraph.To(trainedpokemondetails.Table, trainedpokemondetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, moves.ToTrainedPokemonMove1Table, moves.ToTrainedPokemonMove1Column),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTrainedPokemonMove2 queries the to_trained_pokemon_move2 edge of a Moves.
func (c *MovesClient) QueryToTrainedPokemonMove2(m *Moves) *TrainedPokemonDetailsQuery {
	query := &TrainedPokemonDetailsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moves.Table, moves.FieldID, id),
			sqlgraph.To(trainedpokemondetails.Table, trainedpokemondetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, moves.ToTrainedPokemonMove2Table, moves.ToTrainedPokemonMove2Column),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTrainedPokemonMove3 queries the to_trained_pokemon_move3 edge of a Moves.
func (c *MovesClient) QueryToTrainedPokemonMove3(m *Moves) *TrainedPokemonDetailsQuery {
	query := &TrainedPokemonDetailsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moves.Table, moves.FieldID, id),
			sqlgraph.To(trainedpokemondetails.Table, trainedpokemondetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, moves.ToTrainedPokemonMove3Table, moves.ToTrainedPokemonMove3Column),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTrainedPokemonMove4 queries the to_trained_pokemon_move4 edge of a Moves.
func (c *MovesClient) QueryToTrainedPokemonMove4(m *Moves) *TrainedPokemonDetailsQuery {
	query := &TrainedPokemonDetailsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moves.Table, moves.FieldID, id),
			sqlgraph.To(trainedpokemondetails.Table, trainedpokemondetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, moves.ToTrainedPokemonMove4Table, moves.ToTrainedPokemonMove4Column),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMoveToPokemon queries the move_to_pokemon edge of a Moves.
func (c *MovesClient) QueryMoveToPokemon(m *Moves) *PokemonsQuery {
	query := &PokemonsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moves.Table, moves.FieldID, id),
			sqlgraph.To(pokemons.Table, pokemons.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, moves.MoveToPokemonTable, moves.MoveToPokemonPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MovesClient) Hooks() []Hook {
	return c.hooks.Moves
}

// PartyClient is a client for the Party schema.
type PartyClient struct {
	config
}

// NewPartyClient returns a client for the Party from the given config.
func NewPartyClient(c config) *PartyClient {
	return &PartyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `party.Hooks(f(g(h())))`.
func (c *PartyClient) Use(hooks ...Hook) {
	c.hooks.Party = append(c.hooks.Party, hooks...)
}

// Create returns a create builder for Party.
func (c *PartyClient) Create() *PartyCreate {
	mutation := newPartyMutation(c.config, OpCreate)
	return &PartyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Party entities.
func (c *PartyClient) CreateBulk(builders ...*PartyCreate) *PartyCreateBulk {
	return &PartyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Party.
func (c *PartyClient) Update() *PartyUpdate {
	mutation := newPartyMutation(c.config, OpUpdate)
	return &PartyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyClient) UpdateOne(pa *Party) *PartyUpdateOne {
	mutation := newPartyMutation(c.config, OpUpdateOne, withParty(pa))
	return &PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyClient) UpdateOneID(id int) *PartyUpdateOne {
	mutation := newPartyMutation(c.config, OpUpdateOne, withPartyID(id))
	return &PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Party.
func (c *PartyClient) Delete() *PartyDelete {
	mutation := newPartyMutation(c.config, OpDelete)
	return &PartyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyClient) DeleteOne(pa *Party) *PartyDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyClient) DeleteOneID(id int) *PartyDeleteOne {
	builder := c.Delete().Where(party.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyDeleteOne{builder}
}

// Query returns a query builder for Party.
func (c *PartyClient) Query() *PartyQuery {
	return &PartyQuery{
		config: c.config,
	}
}

// Get returns a Party entity by its id.
func (c *PartyClient) Get(ctx context.Context, id int) (*Party, error) {
	return c.Query().Where(party.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyClient) GetX(ctx context.Context, id int) *Party {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPartyBattleRecord queries the party_battle_record edge of a Party.
func (c *PartyClient) QueryPartyBattleRecord(pa *Party) *BattleRecordsQuery {
	query := &BattleRecordsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(battlerecords.Table, battlerecords.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, party.PartyBattleRecordTable, party.PartyBattleRecordColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyToTag queries the party_to_tag edge of a Party.
func (c *PartyClient) QueryPartyToTag(pa *Party) *TagsQuery {
	query := &TagsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(tags.Table, tags.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, party.PartyToTagTable, party.PartyToTagPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResultRecord queries the result_record edge of a Party.
func (c *PartyClient) QueryResultRecord(pa *Party) *PartyResultRecordQuery {
	query := &PartyResultRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(partyresultrecord.Table, partyresultrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, party.ResultRecordTable, party.ResultRecordColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyClient) Hooks() []Hook {
	return c.hooks.Party
}

// PartyResultRecordClient is a client for the PartyResultRecord schema.
type PartyResultRecordClient struct {
	config
}

// NewPartyResultRecordClient returns a client for the PartyResultRecord from the given config.
func NewPartyResultRecordClient(c config) *PartyResultRecordClient {
	return &PartyResultRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partyresultrecord.Hooks(f(g(h())))`.
func (c *PartyResultRecordClient) Use(hooks ...Hook) {
	c.hooks.PartyResultRecord = append(c.hooks.PartyResultRecord, hooks...)
}

// Create returns a create builder for PartyResultRecord.
func (c *PartyResultRecordClient) Create() *PartyResultRecordCreate {
	mutation := newPartyResultRecordMutation(c.config, OpCreate)
	return &PartyResultRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyResultRecord entities.
func (c *PartyResultRecordClient) CreateBulk(builders ...*PartyResultRecordCreate) *PartyResultRecordCreateBulk {
	return &PartyResultRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyResultRecord.
func (c *PartyResultRecordClient) Update() *PartyResultRecordUpdate {
	mutation := newPartyResultRecordMutation(c.config, OpUpdate)
	return &PartyResultRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyResultRecordClient) UpdateOne(prr *PartyResultRecord) *PartyResultRecordUpdateOne {
	mutation := newPartyResultRecordMutation(c.config, OpUpdateOne, withPartyResultRecord(prr))
	return &PartyResultRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyResultRecordClient) UpdateOneID(id int) *PartyResultRecordUpdateOne {
	mutation := newPartyResultRecordMutation(c.config, OpUpdateOne, withPartyResultRecordID(id))
	return &PartyResultRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyResultRecord.
func (c *PartyResultRecordClient) Delete() *PartyResultRecordDelete {
	mutation := newPartyResultRecordMutation(c.config, OpDelete)
	return &PartyResultRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyResultRecordClient) DeleteOne(prr *PartyResultRecord) *PartyResultRecordDeleteOne {
	return c.DeleteOneID(prr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyResultRecordClient) DeleteOneID(id int) *PartyResultRecordDeleteOne {
	builder := c.Delete().Where(partyresultrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyResultRecordDeleteOne{builder}
}

// Query returns a query builder for PartyResultRecord.
func (c *PartyResultRecordClient) Query() *PartyResultRecordQuery {
	return &PartyResultRecordQuery{
		config: c.config,
	}
}

// Get returns a PartyResultRecord entity by its id.
func (c *PartyResultRecordClient) Get(ctx context.Context, id int) (*PartyResultRecord, error) {
	return c.Query().Where(partyresultrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyResultRecordClient) GetX(ctx context.Context, id int) *PartyResultRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResultToParty queries the result_to_party edge of a PartyResultRecord.
func (c *PartyResultRecordClient) QueryResultToParty(prr *PartyResultRecord) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := prr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyresultrecord.Table, partyresultrecord.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, partyresultrecord.ResultToPartyTable, partyresultrecord.ResultToPartyColumn),
		)
		fromV = sqlgraph.Neighbors(prr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyResultRecordClient) Hooks() []Hook {
	return c.hooks.PartyResultRecord
}

// PokemonsClient is a client for the Pokemons schema.
type PokemonsClient struct {
	config
}

// NewPokemonsClient returns a client for the Pokemons from the given config.
func NewPokemonsClient(c config) *PokemonsClient {
	return &PokemonsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pokemons.Hooks(f(g(h())))`.
func (c *PokemonsClient) Use(hooks ...Hook) {
	c.hooks.Pokemons = append(c.hooks.Pokemons, hooks...)
}

// Create returns a create builder for Pokemons.
func (c *PokemonsClient) Create() *PokemonsCreate {
	mutation := newPokemonsMutation(c.config, OpCreate)
	return &PokemonsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pokemons entities.
func (c *PokemonsClient) CreateBulk(builders ...*PokemonsCreate) *PokemonsCreateBulk {
	return &PokemonsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pokemons.
func (c *PokemonsClient) Update() *PokemonsUpdate {
	mutation := newPokemonsMutation(c.config, OpUpdate)
	return &PokemonsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PokemonsClient) UpdateOne(po *Pokemons) *PokemonsUpdateOne {
	mutation := newPokemonsMutation(c.config, OpUpdateOne, withPokemons(po))
	return &PokemonsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PokemonsClient) UpdateOneID(id int) *PokemonsUpdateOne {
	mutation := newPokemonsMutation(c.config, OpUpdateOne, withPokemonsID(id))
	return &PokemonsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pokemons.
func (c *PokemonsClient) Delete() *PokemonsDelete {
	mutation := newPokemonsMutation(c.config, OpDelete)
	return &PokemonsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PokemonsClient) DeleteOne(po *Pokemons) *PokemonsDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PokemonsClient) DeleteOneID(id int) *PokemonsDeleteOne {
	builder := c.Delete().Where(pokemons.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PokemonsDeleteOne{builder}
}

// Query returns a query builder for Pokemons.
func (c *PokemonsClient) Query() *PokemonsQuery {
	return &PokemonsQuery{
		config: c.config,
	}
}

// Get returns a Pokemons entity by its id.
func (c *PokemonsClient) Get(ctx context.Context, id int) (*Pokemons, error) {
	return c.Query().Where(pokemons.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PokemonsClient) GetX(ctx context.Context, id int) *Pokemons {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbility1 queries the ability1 edge of a Pokemons.
func (c *PokemonsClient) QueryAbility1(po *Pokemons) *AbilitiesQuery {
	query := &AbilitiesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pokemons.Table, pokemons.FieldID, id),
			sqlgraph.To(abilities.Table, abilities.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pokemons.Ability1Table, pokemons.Ability1Column),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbility2 queries the ability2 edge of a Pokemons.
func (c *PokemonsClient) QueryAbility2(po *Pokemons) *AbilitiesQuery {
	query := &AbilitiesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pokemons.Table, pokemons.FieldID, id),
			sqlgraph.To(abilities.Table, abilities.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pokemons.Ability2Table, pokemons.Ability2Column),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiddenAbility queries the hidden_ability edge of a Pokemons.
func (c *PokemonsClient) QueryHiddenAbility(po *Pokemons) *AbilitiesQuery {
	query := &AbilitiesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pokemons.Table, pokemons.FieldID, id),
			sqlgraph.To(abilities.Table, abilities.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pokemons.HiddenAbilityTable, pokemons.HiddenAbilityColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryForm queries the form edge of a Pokemons.
func (c *PokemonsClient) QueryForm(po *Pokemons) *FormsQuery {
	query := &FormsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pokemons.Table, pokemons.FieldID, id),
			sqlgraph.To(forms.Table, forms.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pokemons.FormTable, pokemons.FormColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTrainedPokemon queries the to_trained_pokemon edge of a Pokemons.
func (c *PokemonsClient) QueryToTrainedPokemon(po *Pokemons) *TrainedPokemonsQuery {
	query := &TrainedPokemonsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pokemons.Table, pokemons.FieldID, id),
			sqlgraph.To(trainedpokemons.Table, trainedpokemons.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, pokemons.ToTrainedPokemonTable, pokemons.ToTrainedPokemonColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPokemonToMove queries the pokemon_to_move edge of a Pokemons.
func (c *PokemonsClient) QueryPokemonToMove(po *Pokemons) *MovesQuery {
	query := &MovesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pokemons.Table, pokemons.FieldID, id),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, pokemons.PokemonToMoveTable, pokemons.PokemonToMovePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PokemonsClient) Hooks() []Hook {
	return c.hooks.Pokemons
}

// TagsClient is a client for the Tags schema.
type TagsClient struct {
	config
}

// NewTagsClient returns a client for the Tags from the given config.
func NewTagsClient(c config) *TagsClient {
	return &TagsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tags.Hooks(f(g(h())))`.
func (c *TagsClient) Use(hooks ...Hook) {
	c.hooks.Tags = append(c.hooks.Tags, hooks...)
}

// Create returns a create builder for Tags.
func (c *TagsClient) Create() *TagsCreate {
	mutation := newTagsMutation(c.config, OpCreate)
	return &TagsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tags entities.
func (c *TagsClient) CreateBulk(builders ...*TagsCreate) *TagsCreateBulk {
	return &TagsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tags.
func (c *TagsClient) Update() *TagsUpdate {
	mutation := newTagsMutation(c.config, OpUpdate)
	return &TagsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagsClient) UpdateOne(t *Tags) *TagsUpdateOne {
	mutation := newTagsMutation(c.config, OpUpdateOne, withTags(t))
	return &TagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagsClient) UpdateOneID(id int) *TagsUpdateOne {
	mutation := newTagsMutation(c.config, OpUpdateOne, withTagsID(id))
	return &TagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tags.
func (c *TagsClient) Delete() *TagsDelete {
	mutation := newTagsMutation(c.config, OpDelete)
	return &TagsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagsClient) DeleteOne(t *Tags) *TagsDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagsClient) DeleteOneID(id int) *TagsDeleteOne {
	builder := c.Delete().Where(tags.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagsDeleteOne{builder}
}

// Query returns a query builder for Tags.
func (c *TagsClient) Query() *TagsQuery {
	return &TagsQuery{
		config: c.config,
	}
}

// Get returns a Tags entity by its id.
func (c *TagsClient) Get(ctx context.Context, id int) (*Tags, error) {
	return c.Query().Where(tags.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagsClient) GetX(ctx context.Context, id int) *Tags {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTagToParty queries the tag_to_party edge of a Tags.
func (c *TagsClient) QueryTagToParty(t *Tags) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tags.Table, tags.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tags.TagToPartyTable, tags.TagToPartyPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagsClient) Hooks() []Hook {
	return c.hooks.Tags
}

// TrainedPokemonDetailsClient is a client for the TrainedPokemonDetails schema.
type TrainedPokemonDetailsClient struct {
	config
}

// NewTrainedPokemonDetailsClient returns a client for the TrainedPokemonDetails from the given config.
func NewTrainedPokemonDetailsClient(c config) *TrainedPokemonDetailsClient {
	return &TrainedPokemonDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trainedpokemondetails.Hooks(f(g(h())))`.
func (c *TrainedPokemonDetailsClient) Use(hooks ...Hook) {
	c.hooks.TrainedPokemonDetails = append(c.hooks.TrainedPokemonDetails, hooks...)
}

// Create returns a create builder for TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) Create() *TrainedPokemonDetailsCreate {
	mutation := newTrainedPokemonDetailsMutation(c.config, OpCreate)
	return &TrainedPokemonDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrainedPokemonDetails entities.
func (c *TrainedPokemonDetailsClient) CreateBulk(builders ...*TrainedPokemonDetailsCreate) *TrainedPokemonDetailsCreateBulk {
	return &TrainedPokemonDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) Update() *TrainedPokemonDetailsUpdate {
	mutation := newTrainedPokemonDetailsMutation(c.config, OpUpdate)
	return &TrainedPokemonDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrainedPokemonDetailsClient) UpdateOne(tpd *TrainedPokemonDetails) *TrainedPokemonDetailsUpdateOne {
	mutation := newTrainedPokemonDetailsMutation(c.config, OpUpdateOne, withTrainedPokemonDetails(tpd))
	return &TrainedPokemonDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrainedPokemonDetailsClient) UpdateOneID(id int) *TrainedPokemonDetailsUpdateOne {
	mutation := newTrainedPokemonDetailsMutation(c.config, OpUpdateOne, withTrainedPokemonDetailsID(id))
	return &TrainedPokemonDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) Delete() *TrainedPokemonDetailsDelete {
	mutation := newTrainedPokemonDetailsMutation(c.config, OpDelete)
	return &TrainedPokemonDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TrainedPokemonDetailsClient) DeleteOne(tpd *TrainedPokemonDetails) *TrainedPokemonDetailsDeleteOne {
	return c.DeleteOneID(tpd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TrainedPokemonDetailsClient) DeleteOneID(id int) *TrainedPokemonDetailsDeleteOne {
	builder := c.Delete().Where(trainedpokemondetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrainedPokemonDetailsDeleteOne{builder}
}

// Query returns a query builder for TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) Query() *TrainedPokemonDetailsQuery {
	return &TrainedPokemonDetailsQuery{
		config: c.config,
	}
}

// Get returns a TrainedPokemonDetails entity by its id.
func (c *TrainedPokemonDetailsClient) Get(ctx context.Context, id int) (*TrainedPokemonDetails, error) {
	return c.Query().Where(trainedpokemondetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrainedPokemonDetailsClient) GetX(ctx context.Context, id int) *TrainedPokemonDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUseAbility queries the use_ability edge of a TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) QueryUseAbility(tpd *TrainedPokemonDetails) *AbilitiesQuery {
	query := &AbilitiesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, id),
			sqlgraph.To(abilities.Table, abilities.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseAbilityTable, trainedpokemondetails.UseAbilityColumn),
		)
		fromV = sqlgraph.Neighbors(tpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUseHeldItem queries the use_held_item edge of a TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) QueryUseHeldItem(tpd *TrainedPokemonDetails) *HeldItemsQuery {
	query := &HeldItemsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, id),
			sqlgraph.To(helditems.Table, helditems.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseHeldItemTable, trainedpokemondetails.UseHeldItemColumn),
		)
		fromV = sqlgraph.Neighbors(tpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUseMove1 queries the use_move1 edge of a TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) QueryUseMove1(tpd *TrainedPokemonDetails) *MovesQuery {
	query := &MovesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, id),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseMove1Table, trainedpokemondetails.UseMove1Column),
		)
		fromV = sqlgraph.Neighbors(tpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUseMove2 queries the use_move2 edge of a TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) QueryUseMove2(tpd *TrainedPokemonDetails) *MovesQuery {
	query := &MovesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, id),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseMove2Table, trainedpokemondetails.UseMove2Column),
		)
		fromV = sqlgraph.Neighbors(tpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUseMove3 queries the use_move3 edge of a TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) QueryUseMove3(tpd *TrainedPokemonDetails) *MovesQuery {
	query := &MovesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, id),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseMove3Table, trainedpokemondetails.UseMove3Column),
		)
		fromV = sqlgraph.Neighbors(tpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUseMove4 queries the use_move4 edge of a TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) QueryUseMove4(tpd *TrainedPokemonDetails) *MovesQuery {
	query := &MovesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, id),
			sqlgraph.To(moves.Table, moves.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.UseMove4Table, trainedpokemondetails.UseMove4Column),
		)
		fromV = sqlgraph.Neighbors(tpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrainingDetailUser queries the training_detail_user edge of a TrainedPokemonDetails.
func (c *TrainedPokemonDetailsClient) QueryTrainingDetailUser(tpd *TrainedPokemonDetails) *UsersQuery {
	query := &UsersQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemondetails.Table, trainedpokemondetails.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemondetails.TrainingDetailUserTable, trainedpokemondetails.TrainingDetailUserColumn),
		)
		fromV = sqlgraph.Neighbors(tpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrainedPokemonDetailsClient) Hooks() []Hook {
	return c.hooks.TrainedPokemonDetails
}

// TrainedPokemonsClient is a client for the TrainedPokemons schema.
type TrainedPokemonsClient struct {
	config
}

// NewTrainedPokemonsClient returns a client for the TrainedPokemons from the given config.
func NewTrainedPokemonsClient(c config) *TrainedPokemonsClient {
	return &TrainedPokemonsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trainedpokemons.Hooks(f(g(h())))`.
func (c *TrainedPokemonsClient) Use(hooks ...Hook) {
	c.hooks.TrainedPokemons = append(c.hooks.TrainedPokemons, hooks...)
}

// Create returns a create builder for TrainedPokemons.
func (c *TrainedPokemonsClient) Create() *TrainedPokemonsCreate {
	mutation := newTrainedPokemonsMutation(c.config, OpCreate)
	return &TrainedPokemonsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrainedPokemons entities.
func (c *TrainedPokemonsClient) CreateBulk(builders ...*TrainedPokemonsCreate) *TrainedPokemonsCreateBulk {
	return &TrainedPokemonsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrainedPokemons.
func (c *TrainedPokemonsClient) Update() *TrainedPokemonsUpdate {
	mutation := newTrainedPokemonsMutation(c.config, OpUpdate)
	return &TrainedPokemonsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrainedPokemonsClient) UpdateOne(tp *TrainedPokemons) *TrainedPokemonsUpdateOne {
	mutation := newTrainedPokemonsMutation(c.config, OpUpdateOne, withTrainedPokemons(tp))
	return &TrainedPokemonsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrainedPokemonsClient) UpdateOneID(id int) *TrainedPokemonsUpdateOne {
	mutation := newTrainedPokemonsMutation(c.config, OpUpdateOne, withTrainedPokemonsID(id))
	return &TrainedPokemonsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrainedPokemons.
func (c *TrainedPokemonsClient) Delete() *TrainedPokemonsDelete {
	mutation := newTrainedPokemonsMutation(c.config, OpDelete)
	return &TrainedPokemonsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TrainedPokemonsClient) DeleteOne(tp *TrainedPokemons) *TrainedPokemonsDeleteOne {
	return c.DeleteOneID(tp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TrainedPokemonsClient) DeleteOneID(id int) *TrainedPokemonsDeleteOne {
	builder := c.Delete().Where(trainedpokemons.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrainedPokemonsDeleteOne{builder}
}

// Query returns a query builder for TrainedPokemons.
func (c *TrainedPokemonsClient) Query() *TrainedPokemonsQuery {
	return &TrainedPokemonsQuery{
		config: c.config,
	}
}

// Get returns a TrainedPokemons entity by its id.
func (c *TrainedPokemonsClient) Get(ctx context.Context, id int) (*TrainedPokemons, error) {
	return c.Query().Where(trainedpokemons.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrainedPokemonsClient) GetX(ctx context.Context, id int) *TrainedPokemons {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsePokemon queries the use_pokemon edge of a TrainedPokemons.
func (c *TrainedPokemonsClient) QueryUsePokemon(tp *TrainedPokemons) *PokemonsQuery {
	query := &PokemonsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemons.Table, trainedpokemons.FieldID, id),
			sqlgraph.To(pokemons.Table, pokemons.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemons.UsePokemonTable, trainedpokemons.UsePokemonColumn),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrainingUser queries the training_user edge of a TrainedPokemons.
func (c *TrainedPokemonsClient) QueryTrainingUser(tp *TrainedPokemons) *UsersQuery {
	query := &UsersQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trainedpokemons.Table, trainedpokemons.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trainedpokemons.TrainingUserTable, trainedpokemons.TrainingUserColumn),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrainedPokemonsClient) Hooks() []Hook {
	return c.hooks.TrainedPokemons
}

// TypeCompatibilityClient is a client for the TypeCompatibility schema.
type TypeCompatibilityClient struct {
	config
}

// NewTypeCompatibilityClient returns a client for the TypeCompatibility from the given config.
func NewTypeCompatibilityClient(c config) *TypeCompatibilityClient {
	return &TypeCompatibilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `typecompatibility.Hooks(f(g(h())))`.
func (c *TypeCompatibilityClient) Use(hooks ...Hook) {
	c.hooks.TypeCompatibility = append(c.hooks.TypeCompatibility, hooks...)
}

// Create returns a create builder for TypeCompatibility.
func (c *TypeCompatibilityClient) Create() *TypeCompatibilityCreate {
	mutation := newTypeCompatibilityMutation(c.config, OpCreate)
	return &TypeCompatibilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TypeCompatibility entities.
func (c *TypeCompatibilityClient) CreateBulk(builders ...*TypeCompatibilityCreate) *TypeCompatibilityCreateBulk {
	return &TypeCompatibilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TypeCompatibility.
func (c *TypeCompatibilityClient) Update() *TypeCompatibilityUpdate {
	mutation := newTypeCompatibilityMutation(c.config, OpUpdate)
	return &TypeCompatibilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypeCompatibilityClient) UpdateOne(tc *TypeCompatibility) *TypeCompatibilityUpdateOne {
	mutation := newTypeCompatibilityMutation(c.config, OpUpdateOne, withTypeCompatibility(tc))
	return &TypeCompatibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypeCompatibilityClient) UpdateOneID(id int) *TypeCompatibilityUpdateOne {
	mutation := newTypeCompatibilityMutation(c.config, OpUpdateOne, withTypeCompatibilityID(id))
	return &TypeCompatibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TypeCompatibility.
func (c *TypeCompatibilityClient) Delete() *TypeCompatibilityDelete {
	mutation := newTypeCompatibilityMutation(c.config, OpDelete)
	return &TypeCompatibilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TypeCompatibilityClient) DeleteOne(tc *TypeCompatibility) *TypeCompatibilityDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TypeCompatibilityClient) DeleteOneID(id int) *TypeCompatibilityDeleteOne {
	builder := c.Delete().Where(typecompatibility.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypeCompatibilityDeleteOne{builder}
}

// Query returns a query builder for TypeCompatibility.
func (c *TypeCompatibilityClient) Query() *TypeCompatibilityQuery {
	return &TypeCompatibilityQuery{
		config: c.config,
	}
}

// Get returns a TypeCompatibility entity by its id.
func (c *TypeCompatibilityClient) Get(ctx context.Context, id int) (*TypeCompatibility, error) {
	return c.Query().Where(typecompatibility.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypeCompatibilityClient) GetX(ctx context.Context, id int) *TypeCompatibility {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TypeCompatibilityClient) Hooks() []Hook {
	return c.hooks.TypeCompatibility
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Create returns a create builder for Users.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id int) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UsersClient) DeleteOneID(id int) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id int) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id int) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserTrainedPokemon queries the user_trained_pokemon edge of a Users.
func (c *UsersClient) QueryUserTrainedPokemon(u *Users) *TrainedPokemonsQuery {
	query := &TrainedPokemonsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(trainedpokemons.Table, trainedpokemons.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, users.UserTrainedPokemonTable, users.UserTrainedPokemonColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTrainedPokemonDetail queries the user_trained_pokemon_detail edge of a Users.
func (c *UsersClient) QueryUserTrainedPokemonDetail(u *Users) *TrainedPokemonDetailsQuery {
	query := &TrainedPokemonDetailsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(trainedpokemondetails.Table, trainedpokemondetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, users.UserTrainedPokemonDetailTable, users.UserTrainedPokemonDetailColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}
