// Code generated by entc, DO NOT EDIT.

package typecompatibility

import (
	"fmt"

	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

const (
	// Label holds the string label denoting the typecompatibility type in the database.
	Label = "type_compatibility"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAttackType holds the string denoting the attack_type field in the database.
	FieldAttackType = "attack_type"
	// FieldDefenceType holds the string denoting the defence_type field in the database.
	FieldDefenceType = "defence_type"
	// FieldCompatibility holds the string denoting the compatibility field in the database.
	FieldCompatibility = "compatibility"
	// Table holds the table name of the typecompatibility in the database.
	Table = "type_compatibilities"
)

// Columns holds all SQL columns for typecompatibility fields.
var Columns = []string{
	FieldID,
	FieldAttackType,
	FieldDefenceType,
	FieldCompatibility,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCompatibility holds the default value on creation for the "compatibility" field.
	DefaultCompatibility int
)

// AttackTypeValidator is a validator for the "attack_type" field enum values. It is called by the builders before save.
func AttackTypeValidator(at property.Types) error {
	switch at {
	case "Normal", "Fighting", "Flying", "Poison", "Ground", "Rock", "Bug", "Ghost", "Steel", "Fire", "Water", "Grass", "Electric", "Psychic", "Ice", "Dragon", "Dark", "None":
		return nil
	default:
		return fmt.Errorf("typecompatibility: invalid enum value for attack_type field: %q", at)
	}
}

// DefenceTypeValidator is a validator for the "defence_type" field enum values. It is called by the builders before save.
func DefenceTypeValidator(dt property.Types) error {
	switch dt {
	case "Normal", "Fighting", "Flying", "Poison", "Ground", "Rock", "Bug", "Ghost", "Steel", "Fire", "Water", "Grass", "Electric", "Psychic", "Ice", "Dragon", "Dark", "None":
		return nil
	default:
		return fmt.Errorf("typecompatibility: invalid enum value for defence_type field: %q", dt)
	}
}
