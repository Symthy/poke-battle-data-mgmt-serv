// Code generated by entc, DO NOT EDIT.

package abilities

const (
	// Label holds the string label denoting the abilities type in the database.
	Label = "abilities"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPhysicalMovePowerCorrectionValue holds the string denoting the physical_move_power_correction_value field in the database.
	FieldPhysicalMovePowerCorrectionValue = "physical_move_power_correction_value"
	// FieldSpecialMovePowerCorrectionValue holds the string denoting the special_move_power_correction_value field in the database.
	FieldSpecialMovePowerCorrectionValue = "special_move_power_correction_value"
	// FieldAttackPowerCorrectionValue holds the string denoting the attack_power_correction_value field in the database.
	FieldAttackPowerCorrectionValue = "attack_power_correction_value"
	// FieldSpecialAttackPowerCorrectionValue holds the string denoting the special_attack_power_correction_value field in the database.
	FieldSpecialAttackPowerCorrectionValue = "special_attack_power_correction_value"
	// FieldAttackCorrectionValue holds the string denoting the attack_correction_value field in the database.
	FieldAttackCorrectionValue = "attack_correction_value"
	// FieldSpecialAttackCorrectionValue holds the string denoting the special_attack_correction_value field in the database.
	FieldSpecialAttackCorrectionValue = "special_attack_correction_value"
	// FieldDeffenseCorrectionValue holds the string denoting the deffense_correction_value field in the database.
	FieldDeffenseCorrectionValue = "deffense_correction_value"
	// FieldSpecialDeffenseCorrectionValue holds the string denoting the special_deffense_correction_value field in the database.
	FieldSpecialDeffenseCorrectionValue = "special_deffense_correction_value"
	// FieldDamageCorrectionType1 holds the string denoting the damage_correction_type1 field in the database.
	FieldDamageCorrectionType1 = "damage_correction_type1"
	// FieldDamageCorrectionValue1 holds the string denoting the damage_correction_value1 field in the database.
	FieldDamageCorrectionValue1 = "damage_correction_value1"
	// FieldDamageCorrectionType2 holds the string denoting the damage_correction_type2 field in the database.
	FieldDamageCorrectionType2 = "damage_correction_type2"
	// FieldDamageCorrectionValue2 holds the string denoting the damage_correction_value2 field in the database.
	FieldDamageCorrectionValue2 = "damage_correction_value2"
	// FieldWeightCorrectionValue holds the string denoting the weight_correction_value field in the database.
	FieldWeightCorrectionValue = "weight_correction_value"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeAbilityHolder1 holds the string denoting the ability_holder1 edge name in mutations.
	EdgeAbilityHolder1 = "ability_holder1"
	// EdgeAbilityHolder2 holds the string denoting the ability_holder2 edge name in mutations.
	EdgeAbilityHolder2 = "ability_holder2"
	// EdgeHiddenAbilityHolder holds the string denoting the hidden_ability_holder edge name in mutations.
	EdgeHiddenAbilityHolder = "hidden_ability_holder"
	// EdgeToTrainedPokemonAbility holds the string denoting the to_trained_pokemon_ability edge name in mutations.
	EdgeToTrainedPokemonAbility = "to_trained_pokemon_ability"
	// Table holds the table name of the abilities in the database.
	Table = "abilities"
	// AbilityHolder1Table is the table that holds the ability_holder1 relation/edge.
	AbilityHolder1Table = "pokemons"
	// AbilityHolder1InverseTable is the table name for the Pokemons entity.
	// It exists in this package in order to avoid circular dependency with the "pokemons" package.
	AbilityHolder1InverseTable = "pokemons"
	// AbilityHolder1Column is the table column denoting the ability_holder1 relation/edge.
	AbilityHolder1Column = "ability_id1"
	// AbilityHolder2Table is the table that holds the ability_holder2 relation/edge.
	AbilityHolder2Table = "pokemons"
	// AbilityHolder2InverseTable is the table name for the Pokemons entity.
	// It exists in this package in order to avoid circular dependency with the "pokemons" package.
	AbilityHolder2InverseTable = "pokemons"
	// AbilityHolder2Column is the table column denoting the ability_holder2 relation/edge.
	AbilityHolder2Column = "ability_id2"
	// HiddenAbilityHolderTable is the table that holds the hidden_ability_holder relation/edge.
	HiddenAbilityHolderTable = "pokemons"
	// HiddenAbilityHolderInverseTable is the table name for the Pokemons entity.
	// It exists in this package in order to avoid circular dependency with the "pokemons" package.
	HiddenAbilityHolderInverseTable = "pokemons"
	// HiddenAbilityHolderColumn is the table column denoting the hidden_ability_holder relation/edge.
	HiddenAbilityHolderColumn = "hidden_ability_id"
	// ToTrainedPokemonAbilityTable is the table that holds the to_trained_pokemon_ability relation/edge.
	ToTrainedPokemonAbilityTable = "trained_pokemon_details"
	// ToTrainedPokemonAbilityInverseTable is the table name for the TrainedPokemonDetails entity.
	// It exists in this package in order to avoid circular dependency with the "trainedpokemondetails" package.
	ToTrainedPokemonAbilityInverseTable = "trained_pokemon_details"
	// ToTrainedPokemonAbilityColumn is the table column denoting the to_trained_pokemon_ability relation/edge.
	ToTrainedPokemonAbilityColumn = "ability_id"
)

// Columns holds all SQL columns for abilities fields.
var Columns = []string{
	FieldID,
	FieldPhysicalMovePowerCorrectionValue,
	FieldSpecialMovePowerCorrectionValue,
	FieldAttackPowerCorrectionValue,
	FieldSpecialAttackPowerCorrectionValue,
	FieldAttackCorrectionValue,
	FieldSpecialAttackCorrectionValue,
	FieldDeffenseCorrectionValue,
	FieldSpecialDeffenseCorrectionValue,
	FieldDamageCorrectionType1,
	FieldDamageCorrectionValue1,
	FieldDamageCorrectionType2,
	FieldDamageCorrectionValue2,
	FieldWeightCorrectionValue,
	FieldName,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPhysicalMovePowerCorrectionValue holds the default value on creation for the "physical_move_power_correction_value" field.
	DefaultPhysicalMovePowerCorrectionValue int
	// DefaultSpecialMovePowerCorrectionValue holds the default value on creation for the "special_move_power_correction_value" field.
	DefaultSpecialMovePowerCorrectionValue int
	// DefaultAttackPowerCorrectionValue holds the default value on creation for the "attack_power_correction_value" field.
	DefaultAttackPowerCorrectionValue int
	// DefaultSpecialAttackPowerCorrectionValue holds the default value on creation for the "special_attack_power_correction_value" field.
	DefaultSpecialAttackPowerCorrectionValue int
	// DefaultAttackCorrectionValue holds the default value on creation for the "attack_correction_value" field.
	DefaultAttackCorrectionValue int
	// DefaultSpecialAttackCorrectionValue holds the default value on creation for the "special_attack_correction_value" field.
	DefaultSpecialAttackCorrectionValue int
	// DefaultDeffenseCorrectionValue holds the default value on creation for the "deffense_correction_value" field.
	DefaultDeffenseCorrectionValue int
	// DefaultSpecialDeffenseCorrectionValue holds the default value on creation for the "special_deffense_correction_value" field.
	DefaultSpecialDeffenseCorrectionValue int
	// DamageCorrectionType1Validator is a validator for the "damage_correction_type1" field. It is called by the builders before save.
	DamageCorrectionType1Validator func(string) error
	// DefaultDamageCorrectionValue1 holds the default value on creation for the "damage_correction_value1" field.
	DefaultDamageCorrectionValue1 int
	// DefaultWeightCorrectionValue holds the default value on creation for the "weight_correction_value" field.
	DefaultWeightCorrectionValue int
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
