// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/typecompatibility"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// TypeCompatibilityCreate is the builder for creating a TypeCompatibility entity.
type TypeCompatibilityCreate struct {
	config
	mutation *TypeCompatibilityMutation
	hooks    []Hook
}

// SetAttackType sets the "attack_type" field.
func (tcc *TypeCompatibilityCreate) SetAttackType(pr property.Types) *TypeCompatibilityCreate {
	tcc.mutation.SetAttackType(pr)
	return tcc
}

// SetDefenceType sets the "defence_type" field.
func (tcc *TypeCompatibilityCreate) SetDefenceType(pr property.Types) *TypeCompatibilityCreate {
	tcc.mutation.SetDefenceType(pr)
	return tcc
}

// SetCompatibility sets the "compatibility" field.
func (tcc *TypeCompatibilityCreate) SetCompatibility(i int) *TypeCompatibilityCreate {
	tcc.mutation.SetCompatibility(i)
	return tcc
}

// SetNillableCompatibility sets the "compatibility" field if the given value is not nil.
func (tcc *TypeCompatibilityCreate) SetNillableCompatibility(i *int) *TypeCompatibilityCreate {
	if i != nil {
		tcc.SetCompatibility(*i)
	}
	return tcc
}

// Mutation returns the TypeCompatibilityMutation object of the builder.
func (tcc *TypeCompatibilityCreate) Mutation() *TypeCompatibilityMutation {
	return tcc.mutation
}

// Save creates the TypeCompatibility in the database.
func (tcc *TypeCompatibilityCreate) Save(ctx context.Context) (*TypeCompatibility, error) {
	var (
		err  error
		node *TypeCompatibility
	)
	tcc.defaults()
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TypeCompatibilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			if node, err = tcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			if tcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TypeCompatibilityCreate) SaveX(ctx context.Context) *TypeCompatibility {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TypeCompatibilityCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TypeCompatibilityCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TypeCompatibilityCreate) defaults() {
	if _, ok := tcc.mutation.Compatibility(); !ok {
		v := typecompatibility.DefaultCompatibility
		tcc.mutation.SetCompatibility(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TypeCompatibilityCreate) check() error {
	if _, ok := tcc.mutation.AttackType(); !ok {
		return &ValidationError{Name: "attack_type", err: errors.New(`ent: missing required field "attack_type"`)}
	}
	if v, ok := tcc.mutation.AttackType(); ok {
		if err := typecompatibility.AttackTypeValidator(v); err != nil {
			return &ValidationError{Name: "attack_type", err: fmt.Errorf(`ent: validator failed for field "attack_type": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.DefenceType(); !ok {
		return &ValidationError{Name: "defence_type", err: errors.New(`ent: missing required field "defence_type"`)}
	}
	if v, ok := tcc.mutation.DefenceType(); ok {
		if err := typecompatibility.DefenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "defence_type", err: fmt.Errorf(`ent: validator failed for field "defence_type": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Compatibility(); !ok {
		return &ValidationError{Name: "compatibility", err: errors.New(`ent: missing required field "compatibility"`)}
	}
	return nil
}

func (tcc *TypeCompatibilityCreate) sqlSave(ctx context.Context) (*TypeCompatibility, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tcc *TypeCompatibilityCreate) createSpec() (*TypeCompatibility, *sqlgraph.CreateSpec) {
	var (
		_node = &TypeCompatibility{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: typecompatibility.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: typecompatibility.FieldID,
			},
		}
	)
	if value, ok := tcc.mutation.AttackType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: typecompatibility.FieldAttackType,
		})
		_node.AttackType = value
	}
	if value, ok := tcc.mutation.DefenceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: typecompatibility.FieldDefenceType,
		})
		_node.DefenceType = value
	}
	if value, ok := tcc.mutation.Compatibility(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: typecompatibility.FieldCompatibility,
		})
		_node.Compatibility = value
	}
	return _node, _spec
}

// TypeCompatibilityCreateBulk is the builder for creating many TypeCompatibility entities in bulk.
type TypeCompatibilityCreateBulk struct {
	config
	builders []*TypeCompatibilityCreate
}

// Save creates the TypeCompatibility entities in the database.
func (tccb *TypeCompatibilityCreateBulk) Save(ctx context.Context) ([]*TypeCompatibility, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TypeCompatibility, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TypeCompatibilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TypeCompatibilityCreateBulk) SaveX(ctx context.Context) []*TypeCompatibility {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TypeCompatibilityCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TypeCompatibilityCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
