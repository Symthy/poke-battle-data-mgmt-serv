// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/moves"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/trainedpokemondetails"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/property"
)

// MovesUpdate is the builder for updating Moves entities.
type MovesUpdate struct {
	config
	hooks    []Hook
	mutation *MovesMutation
}

// Where appends a list predicates to the MovesUpdate builder.
func (mu *MovesUpdate) Where(ps ...predicate.Moves) *MovesUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MovesUpdate) SetName(s string) *MovesUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetType sets the "type" field.
func (mu *MovesUpdate) SetType(pr property.Types) *MovesUpdate {
	mu.mutation.SetType(pr)
	return mu
}

// SetSpecies sets the "species" field.
func (mu *MovesUpdate) SetSpecies(ps property.MoveSpecies) *MovesUpdate {
	mu.mutation.SetSpecies(ps)
	return mu
}

// SetPower sets the "power" field.
func (mu *MovesUpdate) SetPower(i int) *MovesUpdate {
	mu.mutation.ResetPower()
	mu.mutation.SetPower(i)
	return mu
}

// AddPower adds i to the "power" field.
func (mu *MovesUpdate) AddPower(i int) *MovesUpdate {
	mu.mutation.AddPower(i)
	return mu
}

// SetAccuracy sets the "accuracy" field.
func (mu *MovesUpdate) SetAccuracy(i int) *MovesUpdate {
	mu.mutation.ResetAccuracy()
	mu.mutation.SetAccuracy(i)
	return mu
}

// AddAccuracy adds i to the "accuracy" field.
func (mu *MovesUpdate) AddAccuracy(i int) *MovesUpdate {
	mu.mutation.AddAccuracy(i)
	return mu
}

// SetPp sets the "pp" field.
func (mu *MovesUpdate) SetPp(i int) *MovesUpdate {
	mu.mutation.ResetPp()
	mu.mutation.SetPp(i)
	return mu
}

// AddPp adds i to the "pp" field.
func (mu *MovesUpdate) AddPp(i int) *MovesUpdate {
	mu.mutation.AddPp(i)
	return mu
}

// SetIsContact sets the "is_contact" field.
func (mu *MovesUpdate) SetIsContact(b bool) *MovesUpdate {
	mu.mutation.SetIsContact(b)
	return mu
}

// SetNillableIsContact sets the "is_contact" field if the given value is not nil.
func (mu *MovesUpdate) SetNillableIsContact(b *bool) *MovesUpdate {
	if b != nil {
		mu.SetIsContact(*b)
	}
	return mu
}

// SetIsCanGuard sets the "is_can_guard" field.
func (mu *MovesUpdate) SetIsCanGuard(b bool) *MovesUpdate {
	mu.mutation.SetIsCanGuard(b)
	return mu
}

// SetNillableIsCanGuard sets the "is_can_guard" field if the given value is not nil.
func (mu *MovesUpdate) SetNillableIsCanGuard(b *bool) *MovesUpdate {
	if b != nil {
		mu.SetIsCanGuard(*b)
	}
	return mu
}

// AddToTrainedPokemonMove1IDs adds the "to_trained_pokemon_move1" edge to the TrainedPokemonDetails entity by IDs.
func (mu *MovesUpdate) AddToTrainedPokemonMove1IDs(ids ...int) *MovesUpdate {
	mu.mutation.AddToTrainedPokemonMove1IDs(ids...)
	return mu
}

// AddToTrainedPokemonMove1 adds the "to_trained_pokemon_move1" edges to the TrainedPokemonDetails entity.
func (mu *MovesUpdate) AddToTrainedPokemonMove1(t ...*TrainedPokemonDetails) *MovesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddToTrainedPokemonMove1IDs(ids...)
}

// AddToTrainedPokemonMove2IDs adds the "to_trained_pokemon_move2" edge to the TrainedPokemonDetails entity by IDs.
func (mu *MovesUpdate) AddToTrainedPokemonMove2IDs(ids ...int) *MovesUpdate {
	mu.mutation.AddToTrainedPokemonMove2IDs(ids...)
	return mu
}

// AddToTrainedPokemonMove2 adds the "to_trained_pokemon_move2" edges to the TrainedPokemonDetails entity.
func (mu *MovesUpdate) AddToTrainedPokemonMove2(t ...*TrainedPokemonDetails) *MovesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddToTrainedPokemonMove2IDs(ids...)
}

// AddToTrainedPokemonMove3IDs adds the "to_trained_pokemon_move3" edge to the TrainedPokemonDetails entity by IDs.
func (mu *MovesUpdate) AddToTrainedPokemonMove3IDs(ids ...int) *MovesUpdate {
	mu.mutation.AddToTrainedPokemonMove3IDs(ids...)
	return mu
}

// AddToTrainedPokemonMove3 adds the "to_trained_pokemon_move3" edges to the TrainedPokemonDetails entity.
func (mu *MovesUpdate) AddToTrainedPokemonMove3(t ...*TrainedPokemonDetails) *MovesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddToTrainedPokemonMove3IDs(ids...)
}

// AddToTrainedPokemonMove4IDs adds the "to_trained_pokemon_move4" edge to the TrainedPokemonDetails entity by IDs.
func (mu *MovesUpdate) AddToTrainedPokemonMove4IDs(ids ...int) *MovesUpdate {
	mu.mutation.AddToTrainedPokemonMove4IDs(ids...)
	return mu
}

// AddToTrainedPokemonMove4 adds the "to_trained_pokemon_move4" edges to the TrainedPokemonDetails entity.
func (mu *MovesUpdate) AddToTrainedPokemonMove4(t ...*TrainedPokemonDetails) *MovesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddToTrainedPokemonMove4IDs(ids...)
}

// AddMoveToPokemonIDs adds the "move_to_pokemon" edge to the Pokemons entity by IDs.
func (mu *MovesUpdate) AddMoveToPokemonIDs(ids ...int) *MovesUpdate {
	mu.mutation.AddMoveToPokemonIDs(ids...)
	return mu
}

// AddMoveToPokemon adds the "move_to_pokemon" edges to the Pokemons entity.
func (mu *MovesUpdate) AddMoveToPokemon(p ...*Pokemons) *MovesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddMoveToPokemonIDs(ids...)
}

// Mutation returns the MovesMutation object of the builder.
func (mu *MovesUpdate) Mutation() *MovesMutation {
	return mu.mutation
}

// ClearToTrainedPokemonMove1 clears all "to_trained_pokemon_move1" edges to the TrainedPokemonDetails entity.
func (mu *MovesUpdate) ClearToTrainedPokemonMove1() *MovesUpdate {
	mu.mutation.ClearToTrainedPokemonMove1()
	return mu
}

// RemoveToTrainedPokemonMove1IDs removes the "to_trained_pokemon_move1" edge to TrainedPokemonDetails entities by IDs.
func (mu *MovesUpdate) RemoveToTrainedPokemonMove1IDs(ids ...int) *MovesUpdate {
	mu.mutation.RemoveToTrainedPokemonMove1IDs(ids...)
	return mu
}

// RemoveToTrainedPokemonMove1 removes "to_trained_pokemon_move1" edges to TrainedPokemonDetails entities.
func (mu *MovesUpdate) RemoveToTrainedPokemonMove1(t ...*TrainedPokemonDetails) *MovesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveToTrainedPokemonMove1IDs(ids...)
}

// ClearToTrainedPokemonMove2 clears all "to_trained_pokemon_move2" edges to the TrainedPokemonDetails entity.
func (mu *MovesUpdate) ClearToTrainedPokemonMove2() *MovesUpdate {
	mu.mutation.ClearToTrainedPokemonMove2()
	return mu
}

// RemoveToTrainedPokemonMove2IDs removes the "to_trained_pokemon_move2" edge to TrainedPokemonDetails entities by IDs.
func (mu *MovesUpdate) RemoveToTrainedPokemonMove2IDs(ids ...int) *MovesUpdate {
	mu.mutation.RemoveToTrainedPokemonMove2IDs(ids...)
	return mu
}

// RemoveToTrainedPokemonMove2 removes "to_trained_pokemon_move2" edges to TrainedPokemonDetails entities.
func (mu *MovesUpdate) RemoveToTrainedPokemonMove2(t ...*TrainedPokemonDetails) *MovesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveToTrainedPokemonMove2IDs(ids...)
}

// ClearToTrainedPokemonMove3 clears all "to_trained_pokemon_move3" edges to the TrainedPokemonDetails entity.
func (mu *MovesUpdate) ClearToTrainedPokemonMove3() *MovesUpdate {
	mu.mutation.ClearToTrainedPokemonMove3()
	return mu
}

// RemoveToTrainedPokemonMove3IDs removes the "to_trained_pokemon_move3" edge to TrainedPokemonDetails entities by IDs.
func (mu *MovesUpdate) RemoveToTrainedPokemonMove3IDs(ids ...int) *MovesUpdate {
	mu.mutation.RemoveToTrainedPokemonMove3IDs(ids...)
	return mu
}

// RemoveToTrainedPokemonMove3 removes "to_trained_pokemon_move3" edges to TrainedPokemonDetails entities.
func (mu *MovesUpdate) RemoveToTrainedPokemonMove3(t ...*TrainedPokemonDetails) *MovesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveToTrainedPokemonMove3IDs(ids...)
}

// ClearToTrainedPokemonMove4 clears all "to_trained_pokemon_move4" edges to the TrainedPokemonDetails entity.
func (mu *MovesUpdate) ClearToTrainedPokemonMove4() *MovesUpdate {
	mu.mutation.ClearToTrainedPokemonMove4()
	return mu
}

// RemoveToTrainedPokemonMove4IDs removes the "to_trained_pokemon_move4" edge to TrainedPokemonDetails entities by IDs.
func (mu *MovesUpdate) RemoveToTrainedPokemonMove4IDs(ids ...int) *MovesUpdate {
	mu.mutation.RemoveToTrainedPokemonMove4IDs(ids...)
	return mu
}

// RemoveToTrainedPokemonMove4 removes "to_trained_pokemon_move4" edges to TrainedPokemonDetails entities.
func (mu *MovesUpdate) RemoveToTrainedPokemonMove4(t ...*TrainedPokemonDetails) *MovesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveToTrainedPokemonMove4IDs(ids...)
}

// ClearMoveToPokemon clears all "move_to_pokemon" edges to the Pokemons entity.
func (mu *MovesUpdate) ClearMoveToPokemon() *MovesUpdate {
	mu.mutation.ClearMoveToPokemon()
	return mu
}

// RemoveMoveToPokemonIDs removes the "move_to_pokemon" edge to Pokemons entities by IDs.
func (mu *MovesUpdate) RemoveMoveToPokemonIDs(ids ...int) *MovesUpdate {
	mu.mutation.RemoveMoveToPokemonIDs(ids...)
	return mu
}

// RemoveMoveToPokemon removes "move_to_pokemon" edges to Pokemons entities.
func (mu *MovesUpdate) RemoveMoveToPokemon(p ...*Pokemons) *MovesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveMoveToPokemonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MovesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MovesUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MovesUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MovesUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MovesUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := moves.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := mu.mutation.GetType(); ok {
		if err := moves.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Power(); ok {
		if err := moves.PowerValidator(v); err != nil {
			return &ValidationError{Name: "power", err: fmt.Errorf("ent: validator failed for field \"power\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Accuracy(); ok {
		if err := moves.AccuracyValidator(v); err != nil {
			return &ValidationError{Name: "accuracy", err: fmt.Errorf("ent: validator failed for field \"accuracy\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Pp(); ok {
		if err := moves.PpValidator(v); err != nil {
			return &ValidationError{Name: "pp", err: fmt.Errorf("ent: validator failed for field \"pp\": %w", err)}
		}
	}
	return nil
}

func (mu *MovesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moves.Table,
			Columns: moves.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moves.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moves.FieldName,
		})
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: moves.FieldType,
		})
	}
	if value, ok := mu.mutation.Species(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moves.FieldSpecies,
		})
	}
	if value, ok := mu.mutation.Power(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPower,
		})
	}
	if value, ok := mu.mutation.AddedPower(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPower,
		})
	}
	if value, ok := mu.mutation.Accuracy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldAccuracy,
		})
	}
	if value, ok := mu.mutation.AddedAccuracy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldAccuracy,
		})
	}
	if value, ok := mu.mutation.Pp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPp,
		})
	}
	if value, ok := mu.mutation.AddedPp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPp,
		})
	}
	if value, ok := mu.mutation.IsContact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: moves.FieldIsContact,
		})
	}
	if value, ok := mu.mutation.IsCanGuard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: moves.FieldIsCanGuard,
		})
	}
	if mu.mutation.ToTrainedPokemonMove1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove1Table,
			Columns: []string{moves.ToTrainedPokemonMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedToTrainedPokemonMove1IDs(); len(nodes) > 0 && !mu.mutation.ToTrainedPokemonMove1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove1Table,
			Columns: []string{moves.ToTrainedPokemonMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ToTrainedPokemonMove1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove1Table,
			Columns: []string{moves.ToTrainedPokemonMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ToTrainedPokemonMove2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove2Table,
			Columns: []string{moves.ToTrainedPokemonMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedToTrainedPokemonMove2IDs(); len(nodes) > 0 && !mu.mutation.ToTrainedPokemonMove2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove2Table,
			Columns: []string{moves.ToTrainedPokemonMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ToTrainedPokemonMove2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove2Table,
			Columns: []string{moves.ToTrainedPokemonMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ToTrainedPokemonMove3Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove3Table,
			Columns: []string{moves.ToTrainedPokemonMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedToTrainedPokemonMove3IDs(); len(nodes) > 0 && !mu.mutation.ToTrainedPokemonMove3Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove3Table,
			Columns: []string{moves.ToTrainedPokemonMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ToTrainedPokemonMove3IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove3Table,
			Columns: []string{moves.ToTrainedPokemonMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ToTrainedPokemonMove4Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove4Table,
			Columns: []string{moves.ToTrainedPokemonMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedToTrainedPokemonMove4IDs(); len(nodes) > 0 && !mu.mutation.ToTrainedPokemonMove4Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove4Table,
			Columns: []string{moves.ToTrainedPokemonMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ToTrainedPokemonMove4IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove4Table,
			Columns: []string{moves.ToTrainedPokemonMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MoveToPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   moves.MoveToPokemonTable,
			Columns: moves.MoveToPokemonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMoveToPokemonIDs(); len(nodes) > 0 && !mu.mutation.MoveToPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   moves.MoveToPokemonTable,
			Columns: moves.MoveToPokemonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MoveToPokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   moves.MoveToPokemonTable,
			Columns: moves.MoveToPokemonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moves.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MovesUpdateOne is the builder for updating a single Moves entity.
type MovesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovesMutation
}

// SetName sets the "name" field.
func (muo *MovesUpdateOne) SetName(s string) *MovesUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetType sets the "type" field.
func (muo *MovesUpdateOne) SetType(pr property.Types) *MovesUpdateOne {
	muo.mutation.SetType(pr)
	return muo
}

// SetSpecies sets the "species" field.
func (muo *MovesUpdateOne) SetSpecies(ps property.MoveSpecies) *MovesUpdateOne {
	muo.mutation.SetSpecies(ps)
	return muo
}

// SetPower sets the "power" field.
func (muo *MovesUpdateOne) SetPower(i int) *MovesUpdateOne {
	muo.mutation.ResetPower()
	muo.mutation.SetPower(i)
	return muo
}

// AddPower adds i to the "power" field.
func (muo *MovesUpdateOne) AddPower(i int) *MovesUpdateOne {
	muo.mutation.AddPower(i)
	return muo
}

// SetAccuracy sets the "accuracy" field.
func (muo *MovesUpdateOne) SetAccuracy(i int) *MovesUpdateOne {
	muo.mutation.ResetAccuracy()
	muo.mutation.SetAccuracy(i)
	return muo
}

// AddAccuracy adds i to the "accuracy" field.
func (muo *MovesUpdateOne) AddAccuracy(i int) *MovesUpdateOne {
	muo.mutation.AddAccuracy(i)
	return muo
}

// SetPp sets the "pp" field.
func (muo *MovesUpdateOne) SetPp(i int) *MovesUpdateOne {
	muo.mutation.ResetPp()
	muo.mutation.SetPp(i)
	return muo
}

// AddPp adds i to the "pp" field.
func (muo *MovesUpdateOne) AddPp(i int) *MovesUpdateOne {
	muo.mutation.AddPp(i)
	return muo
}

// SetIsContact sets the "is_contact" field.
func (muo *MovesUpdateOne) SetIsContact(b bool) *MovesUpdateOne {
	muo.mutation.SetIsContact(b)
	return muo
}

// SetNillableIsContact sets the "is_contact" field if the given value is not nil.
func (muo *MovesUpdateOne) SetNillableIsContact(b *bool) *MovesUpdateOne {
	if b != nil {
		muo.SetIsContact(*b)
	}
	return muo
}

// SetIsCanGuard sets the "is_can_guard" field.
func (muo *MovesUpdateOne) SetIsCanGuard(b bool) *MovesUpdateOne {
	muo.mutation.SetIsCanGuard(b)
	return muo
}

// SetNillableIsCanGuard sets the "is_can_guard" field if the given value is not nil.
func (muo *MovesUpdateOne) SetNillableIsCanGuard(b *bool) *MovesUpdateOne {
	if b != nil {
		muo.SetIsCanGuard(*b)
	}
	return muo
}

// AddToTrainedPokemonMove1IDs adds the "to_trained_pokemon_move1" edge to the TrainedPokemonDetails entity by IDs.
func (muo *MovesUpdateOne) AddToTrainedPokemonMove1IDs(ids ...int) *MovesUpdateOne {
	muo.mutation.AddToTrainedPokemonMove1IDs(ids...)
	return muo
}

// AddToTrainedPokemonMove1 adds the "to_trained_pokemon_move1" edges to the TrainedPokemonDetails entity.
func (muo *MovesUpdateOne) AddToTrainedPokemonMove1(t ...*TrainedPokemonDetails) *MovesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddToTrainedPokemonMove1IDs(ids...)
}

// AddToTrainedPokemonMove2IDs adds the "to_trained_pokemon_move2" edge to the TrainedPokemonDetails entity by IDs.
func (muo *MovesUpdateOne) AddToTrainedPokemonMove2IDs(ids ...int) *MovesUpdateOne {
	muo.mutation.AddToTrainedPokemonMove2IDs(ids...)
	return muo
}

// AddToTrainedPokemonMove2 adds the "to_trained_pokemon_move2" edges to the TrainedPokemonDetails entity.
func (muo *MovesUpdateOne) AddToTrainedPokemonMove2(t ...*TrainedPokemonDetails) *MovesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddToTrainedPokemonMove2IDs(ids...)
}

// AddToTrainedPokemonMove3IDs adds the "to_trained_pokemon_move3" edge to the TrainedPokemonDetails entity by IDs.
func (muo *MovesUpdateOne) AddToTrainedPokemonMove3IDs(ids ...int) *MovesUpdateOne {
	muo.mutation.AddToTrainedPokemonMove3IDs(ids...)
	return muo
}

// AddToTrainedPokemonMove3 adds the "to_trained_pokemon_move3" edges to the TrainedPokemonDetails entity.
func (muo *MovesUpdateOne) AddToTrainedPokemonMove3(t ...*TrainedPokemonDetails) *MovesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddToTrainedPokemonMove3IDs(ids...)
}

// AddToTrainedPokemonMove4IDs adds the "to_trained_pokemon_move4" edge to the TrainedPokemonDetails entity by IDs.
func (muo *MovesUpdateOne) AddToTrainedPokemonMove4IDs(ids ...int) *MovesUpdateOne {
	muo.mutation.AddToTrainedPokemonMove4IDs(ids...)
	return muo
}

// AddToTrainedPokemonMove4 adds the "to_trained_pokemon_move4" edges to the TrainedPokemonDetails entity.
func (muo *MovesUpdateOne) AddToTrainedPokemonMove4(t ...*TrainedPokemonDetails) *MovesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddToTrainedPokemonMove4IDs(ids...)
}

// AddMoveToPokemonIDs adds the "move_to_pokemon" edge to the Pokemons entity by IDs.
func (muo *MovesUpdateOne) AddMoveToPokemonIDs(ids ...int) *MovesUpdateOne {
	muo.mutation.AddMoveToPokemonIDs(ids...)
	return muo
}

// AddMoveToPokemon adds the "move_to_pokemon" edges to the Pokemons entity.
func (muo *MovesUpdateOne) AddMoveToPokemon(p ...*Pokemons) *MovesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddMoveToPokemonIDs(ids...)
}

// Mutation returns the MovesMutation object of the builder.
func (muo *MovesUpdateOne) Mutation() *MovesMutation {
	return muo.mutation
}

// ClearToTrainedPokemonMove1 clears all "to_trained_pokemon_move1" edges to the TrainedPokemonDetails entity.
func (muo *MovesUpdateOne) ClearToTrainedPokemonMove1() *MovesUpdateOne {
	muo.mutation.ClearToTrainedPokemonMove1()
	return muo
}

// RemoveToTrainedPokemonMove1IDs removes the "to_trained_pokemon_move1" edge to TrainedPokemonDetails entities by IDs.
func (muo *MovesUpdateOne) RemoveToTrainedPokemonMove1IDs(ids ...int) *MovesUpdateOne {
	muo.mutation.RemoveToTrainedPokemonMove1IDs(ids...)
	return muo
}

// RemoveToTrainedPokemonMove1 removes "to_trained_pokemon_move1" edges to TrainedPokemonDetails entities.
func (muo *MovesUpdateOne) RemoveToTrainedPokemonMove1(t ...*TrainedPokemonDetails) *MovesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveToTrainedPokemonMove1IDs(ids...)
}

// ClearToTrainedPokemonMove2 clears all "to_trained_pokemon_move2" edges to the TrainedPokemonDetails entity.
func (muo *MovesUpdateOne) ClearToTrainedPokemonMove2() *MovesUpdateOne {
	muo.mutation.ClearToTrainedPokemonMove2()
	return muo
}

// RemoveToTrainedPokemonMove2IDs removes the "to_trained_pokemon_move2" edge to TrainedPokemonDetails entities by IDs.
func (muo *MovesUpdateOne) RemoveToTrainedPokemonMove2IDs(ids ...int) *MovesUpdateOne {
	muo.mutation.RemoveToTrainedPokemonMove2IDs(ids...)
	return muo
}

// RemoveToTrainedPokemonMove2 removes "to_trained_pokemon_move2" edges to TrainedPokemonDetails entities.
func (muo *MovesUpdateOne) RemoveToTrainedPokemonMove2(t ...*TrainedPokemonDetails) *MovesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveToTrainedPokemonMove2IDs(ids...)
}

// ClearToTrainedPokemonMove3 clears all "to_trained_pokemon_move3" edges to the TrainedPokemonDetails entity.
func (muo *MovesUpdateOne) ClearToTrainedPokemonMove3() *MovesUpdateOne {
	muo.mutation.ClearToTrainedPokemonMove3()
	return muo
}

// RemoveToTrainedPokemonMove3IDs removes the "to_trained_pokemon_move3" edge to TrainedPokemonDetails entities by IDs.
func (muo *MovesUpdateOne) RemoveToTrainedPokemonMove3IDs(ids ...int) *MovesUpdateOne {
	muo.mutation.RemoveToTrainedPokemonMove3IDs(ids...)
	return muo
}

// RemoveToTrainedPokemonMove3 removes "to_trained_pokemon_move3" edges to TrainedPokemonDetails entities.
func (muo *MovesUpdateOne) RemoveToTrainedPokemonMove3(t ...*TrainedPokemonDetails) *MovesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveToTrainedPokemonMove3IDs(ids...)
}

// ClearToTrainedPokemonMove4 clears all "to_trained_pokemon_move4" edges to the TrainedPokemonDetails entity.
func (muo *MovesUpdateOne) ClearToTrainedPokemonMove4() *MovesUpdateOne {
	muo.mutation.ClearToTrainedPokemonMove4()
	return muo
}

// RemoveToTrainedPokemonMove4IDs removes the "to_trained_pokemon_move4" edge to TrainedPokemonDetails entities by IDs.
func (muo *MovesUpdateOne) RemoveToTrainedPokemonMove4IDs(ids ...int) *MovesUpdateOne {
	muo.mutation.RemoveToTrainedPokemonMove4IDs(ids...)
	return muo
}

// RemoveToTrainedPokemonMove4 removes "to_trained_pokemon_move4" edges to TrainedPokemonDetails entities.
func (muo *MovesUpdateOne) RemoveToTrainedPokemonMove4(t ...*TrainedPokemonDetails) *MovesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveToTrainedPokemonMove4IDs(ids...)
}

// ClearMoveToPokemon clears all "move_to_pokemon" edges to the Pokemons entity.
func (muo *MovesUpdateOne) ClearMoveToPokemon() *MovesUpdateOne {
	muo.mutation.ClearMoveToPokemon()
	return muo
}

// RemoveMoveToPokemonIDs removes the "move_to_pokemon" edge to Pokemons entities by IDs.
func (muo *MovesUpdateOne) RemoveMoveToPokemonIDs(ids ...int) *MovesUpdateOne {
	muo.mutation.RemoveMoveToPokemonIDs(ids...)
	return muo
}

// RemoveMoveToPokemon removes "move_to_pokemon" edges to Pokemons entities.
func (muo *MovesUpdateOne) RemoveMoveToPokemon(p ...*Pokemons) *MovesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveMoveToPokemonIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MovesUpdateOne) Select(field string, fields ...string) *MovesUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Moves entity.
func (muo *MovesUpdateOne) Save(ctx context.Context) (*Moves, error) {
	var (
		err  error
		node *Moves
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MovesUpdateOne) SaveX(ctx context.Context) *Moves {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MovesUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MovesUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MovesUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := moves.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := muo.mutation.GetType(); ok {
		if err := moves.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Power(); ok {
		if err := moves.PowerValidator(v); err != nil {
			return &ValidationError{Name: "power", err: fmt.Errorf("ent: validator failed for field \"power\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Accuracy(); ok {
		if err := moves.AccuracyValidator(v); err != nil {
			return &ValidationError{Name: "accuracy", err: fmt.Errorf("ent: validator failed for field \"accuracy\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Pp(); ok {
		if err := moves.PpValidator(v); err != nil {
			return &ValidationError{Name: "pp", err: fmt.Errorf("ent: validator failed for field \"pp\": %w", err)}
		}
	}
	return nil
}

func (muo *MovesUpdateOne) sqlSave(ctx context.Context) (_node *Moves, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moves.Table,
			Columns: moves.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moves.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Moves.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moves.FieldID)
		for _, f := range fields {
			if !moves.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != moves.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moves.FieldName,
		})
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: moves.FieldType,
		})
	}
	if value, ok := muo.mutation.Species(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moves.FieldSpecies,
		})
	}
	if value, ok := muo.mutation.Power(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPower,
		})
	}
	if value, ok := muo.mutation.AddedPower(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPower,
		})
	}
	if value, ok := muo.mutation.Accuracy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldAccuracy,
		})
	}
	if value, ok := muo.mutation.AddedAccuracy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldAccuracy,
		})
	}
	if value, ok := muo.mutation.Pp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPp,
		})
	}
	if value, ok := muo.mutation.AddedPp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: moves.FieldPp,
		})
	}
	if value, ok := muo.mutation.IsContact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: moves.FieldIsContact,
		})
	}
	if value, ok := muo.mutation.IsCanGuard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: moves.FieldIsCanGuard,
		})
	}
	if muo.mutation.ToTrainedPokemonMove1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove1Table,
			Columns: []string{moves.ToTrainedPokemonMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedToTrainedPokemonMove1IDs(); len(nodes) > 0 && !muo.mutation.ToTrainedPokemonMove1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove1Table,
			Columns: []string{moves.ToTrainedPokemonMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ToTrainedPokemonMove1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove1Table,
			Columns: []string{moves.ToTrainedPokemonMove1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ToTrainedPokemonMove2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove2Table,
			Columns: []string{moves.ToTrainedPokemonMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedToTrainedPokemonMove2IDs(); len(nodes) > 0 && !muo.mutation.ToTrainedPokemonMove2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove2Table,
			Columns: []string{moves.ToTrainedPokemonMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ToTrainedPokemonMove2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove2Table,
			Columns: []string{moves.ToTrainedPokemonMove2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ToTrainedPokemonMove3Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove3Table,
			Columns: []string{moves.ToTrainedPokemonMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedToTrainedPokemonMove3IDs(); len(nodes) > 0 && !muo.mutation.ToTrainedPokemonMove3Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove3Table,
			Columns: []string{moves.ToTrainedPokemonMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ToTrainedPokemonMove3IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove3Table,
			Columns: []string{moves.ToTrainedPokemonMove3Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ToTrainedPokemonMove4Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove4Table,
			Columns: []string{moves.ToTrainedPokemonMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedToTrainedPokemonMove4IDs(); len(nodes) > 0 && !muo.mutation.ToTrainedPokemonMove4Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove4Table,
			Columns: []string{moves.ToTrainedPokemonMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ToTrainedPokemonMove4IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   moves.ToTrainedPokemonMove4Table,
			Columns: []string{moves.ToTrainedPokemonMove4Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: trainedpokemondetails.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MoveToPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   moves.MoveToPokemonTable,
			Columns: moves.MoveToPokemonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMoveToPokemonIDs(); len(nodes) > 0 && !muo.mutation.MoveToPokemonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   moves.MoveToPokemonTable,
			Columns: moves.MoveToPokemonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MoveToPokemonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   moves.MoveToPokemonTable,
			Columns: moves.MoveToPokemonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Moves{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moves.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
