// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/forms"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/pokemons"
	"github.com/Symthy/PokeRest/pokeRest/adapters/orm/autogen/ent/predicate"
)

// FormsUpdate is the builder for updating Forms entities.
type FormsUpdate struct {
	config
	hooks    []Hook
	mutation *FormsMutation
}

// Where appends a list predicates to the FormsUpdate builder.
func (fu *FormsUpdate) Where(ps ...predicate.Forms) *FormsUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFormName sets the "form_name" field.
func (fu *FormsUpdate) SetFormName(s string) *FormsUpdate {
	fu.mutation.SetFormName(s)
	return fu
}

// SetIsRegionalVariant sets the "is_regional_variant" field.
func (fu *FormsUpdate) SetIsRegionalVariant(b bool) *FormsUpdate {
	fu.mutation.SetIsRegionalVariant(b)
	return fu
}

// SetNillableIsRegionalVariant sets the "is_regional_variant" field if the given value is not nil.
func (fu *FormsUpdate) SetNillableIsRegionalVariant(b *bool) *FormsUpdate {
	if b != nil {
		fu.SetIsRegionalVariant(*b)
	}
	return fu
}

// SetRegionName sets the "regionName" field.
func (fu *FormsUpdate) SetRegionName(s string) *FormsUpdate {
	fu.mutation.SetRegionName(s)
	return fu
}

// AddFormHolderIDs adds the "form_holder" edge to the Pokemons entity by IDs.
func (fu *FormsUpdate) AddFormHolderIDs(ids ...int) *FormsUpdate {
	fu.mutation.AddFormHolderIDs(ids...)
	return fu
}

// AddFormHolder adds the "form_holder" edges to the Pokemons entity.
func (fu *FormsUpdate) AddFormHolder(p ...*Pokemons) *FormsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddFormHolderIDs(ids...)
}

// Mutation returns the FormsMutation object of the builder.
func (fu *FormsUpdate) Mutation() *FormsMutation {
	return fu.mutation
}

// ClearFormHolder clears all "form_holder" edges to the Pokemons entity.
func (fu *FormsUpdate) ClearFormHolder() *FormsUpdate {
	fu.mutation.ClearFormHolder()
	return fu
}

// RemoveFormHolderIDs removes the "form_holder" edge to Pokemons entities by IDs.
func (fu *FormsUpdate) RemoveFormHolderIDs(ids ...int) *FormsUpdate {
	fu.mutation.RemoveFormHolderIDs(ids...)
	return fu
}

// RemoveFormHolder removes "form_holder" edges to Pokemons entities.
func (fu *FormsUpdate) RemoveFormHolder(p ...*Pokemons) *FormsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveFormHolderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FormsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FormsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FormsUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FormsUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FormsUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FormsUpdate) check() error {
	if v, ok := fu.mutation.FormName(); ok {
		if err := forms.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "form_name", err: fmt.Errorf("ent: validator failed for field \"form_name\": %w", err)}
		}
	}
	if v, ok := fu.mutation.RegionName(); ok {
		if err := forms.RegionNameValidator(v); err != nil {
			return &ValidationError{Name: "regionName", err: fmt.Errorf("ent: validator failed for field \"regionName\": %w", err)}
		}
	}
	return nil
}

func (fu *FormsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   forms.Table,
			Columns: forms.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: forms.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FormName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: forms.FieldFormName,
		})
	}
	if value, ok := fu.mutation.IsRegionalVariant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: forms.FieldIsRegionalVariant,
		})
	}
	if value, ok := fu.mutation.RegionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: forms.FieldRegionName,
		})
	}
	if fu.mutation.FormHolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   forms.FormHolderTable,
			Columns: []string{forms.FormHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFormHolderIDs(); len(nodes) > 0 && !fu.mutation.FormHolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   forms.FormHolderTable,
			Columns: []string{forms.FormHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FormHolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   forms.FormHolderTable,
			Columns: []string{forms.FormHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forms.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FormsUpdateOne is the builder for updating a single Forms entity.
type FormsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FormsMutation
}

// SetFormName sets the "form_name" field.
func (fuo *FormsUpdateOne) SetFormName(s string) *FormsUpdateOne {
	fuo.mutation.SetFormName(s)
	return fuo
}

// SetIsRegionalVariant sets the "is_regional_variant" field.
func (fuo *FormsUpdateOne) SetIsRegionalVariant(b bool) *FormsUpdateOne {
	fuo.mutation.SetIsRegionalVariant(b)
	return fuo
}

// SetNillableIsRegionalVariant sets the "is_regional_variant" field if the given value is not nil.
func (fuo *FormsUpdateOne) SetNillableIsRegionalVariant(b *bool) *FormsUpdateOne {
	if b != nil {
		fuo.SetIsRegionalVariant(*b)
	}
	return fuo
}

// SetRegionName sets the "regionName" field.
func (fuo *FormsUpdateOne) SetRegionName(s string) *FormsUpdateOne {
	fuo.mutation.SetRegionName(s)
	return fuo
}

// AddFormHolderIDs adds the "form_holder" edge to the Pokemons entity by IDs.
func (fuo *FormsUpdateOne) AddFormHolderIDs(ids ...int) *FormsUpdateOne {
	fuo.mutation.AddFormHolderIDs(ids...)
	return fuo
}

// AddFormHolder adds the "form_holder" edges to the Pokemons entity.
func (fuo *FormsUpdateOne) AddFormHolder(p ...*Pokemons) *FormsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddFormHolderIDs(ids...)
}

// Mutation returns the FormsMutation object of the builder.
func (fuo *FormsUpdateOne) Mutation() *FormsMutation {
	return fuo.mutation
}

// ClearFormHolder clears all "form_holder" edges to the Pokemons entity.
func (fuo *FormsUpdateOne) ClearFormHolder() *FormsUpdateOne {
	fuo.mutation.ClearFormHolder()
	return fuo
}

// RemoveFormHolderIDs removes the "form_holder" edge to Pokemons entities by IDs.
func (fuo *FormsUpdateOne) RemoveFormHolderIDs(ids ...int) *FormsUpdateOne {
	fuo.mutation.RemoveFormHolderIDs(ids...)
	return fuo
}

// RemoveFormHolder removes "form_holder" edges to Pokemons entities.
func (fuo *FormsUpdateOne) RemoveFormHolder(p ...*Pokemons) *FormsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveFormHolderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FormsUpdateOne) Select(field string, fields ...string) *FormsUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Forms entity.
func (fuo *FormsUpdateOne) Save(ctx context.Context) (*Forms, error) {
	var (
		err  error
		node *Forms
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FormsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FormsUpdateOne) SaveX(ctx context.Context) *Forms {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FormsUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FormsUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FormsUpdateOne) check() error {
	if v, ok := fuo.mutation.FormName(); ok {
		if err := forms.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "form_name", err: fmt.Errorf("ent: validator failed for field \"form_name\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.RegionName(); ok {
		if err := forms.RegionNameValidator(v); err != nil {
			return &ValidationError{Name: "regionName", err: fmt.Errorf("ent: validator failed for field \"regionName\": %w", err)}
		}
	}
	return nil
}

func (fuo *FormsUpdateOne) sqlSave(ctx context.Context) (_node *Forms, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   forms.Table,
			Columns: forms.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: forms.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Forms.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, forms.FieldID)
		for _, f := range fields {
			if !forms.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != forms.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.FormName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: forms.FieldFormName,
		})
	}
	if value, ok := fuo.mutation.IsRegionalVariant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: forms.FieldIsRegionalVariant,
		})
	}
	if value, ok := fuo.mutation.RegionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: forms.FieldRegionName,
		})
	}
	if fuo.mutation.FormHolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   forms.FormHolderTable,
			Columns: []string{forms.FormHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFormHolderIDs(); len(nodes) > 0 && !fuo.mutation.FormHolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   forms.FormHolderTable,
			Columns: []string{forms.FormHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FormHolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   forms.FormHolderTable,
			Columns: []string{forms.FormHolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemons.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Forms{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forms.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
