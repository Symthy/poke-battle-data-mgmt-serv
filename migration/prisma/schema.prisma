// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- master data ---
model Pokemons {
  id     Int   @default(autoincrement())
  formId Int   @map("form_id")
  forms  Forms @relation(fields: [formId], references: [id])

  name             String    @db.VarChar(20)
  type1            Type
  type2            Type
  abilityId1       Int       @map("ability_id1")
  abilities1       Abilities @relation("ability1", fields: [abilityId1], references: [id])
  abilityId2       Int       @map("ability_id2")
  abilities2       Abilities @relation("ability2", fields: [abilityId2], references: [id])
  hiddenAbilityId  Int       @map("hidden_ability_id")
  abilities3       Abilities @relation("ability3", fields: [hiddenAbilityId], references: [id])
  isFinalEvolution Boolean   @db.Boolean

  baseStatsH Int @default(0) @map("base_stats_h")
  baseStatsA Int @default(0) @map("base_stats_a")
  baseStatsB Int @default(0) @map("base_stats_b")
  BaseStatsC Int @default(0) @map("base_stats_c")
  BaseStatsD Int @default(0) @map("base_stats_d")
  baseStatsS Int @default(0) @map("base_stats_s")

  trainedPokemons TrainedPokemons[]
  battleRecord1   BattleOpponentParty[] @relation("opponentPokemon1")
  battleRecord2   BattleOpponentParty[] @relation("opponentPokemon2")
  battleRecord3   BattleOpponentParty[] @relation("opponentPokemon3")
  battleRecord4   BattleOpponentParty[] @relation("opponentPokemon4")
  battleRecord5   BattleOpponentParty[] @relation("opponentPokemon5")
  battleRecord6   BattleOpponentParty[] @relation("opponentPokemon6")

  @@id([id, formId])
  @@map("pokemons")
}

model Forms {
  id                Int     @id
  formName          String  @map("form_name") @db.VarChar(40)
  isRegionalVariant Boolean @default(false) @map("is_regional_variant") @db.Boolean
  regionName        String  @map("region_name") @db.VarChar(20)

  pokemons Pokemons[]

  @@map("forms")
}

// 特性
model Abilities {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(20)
  description String?

  // 物理技威力補正値
  physicalMovePowerCorrectionValue  Int @default(1) @map("physical_move_power_correction_value")
  // 特殊技威力補正値
  specialMovePowerCorrectionValue   Int @default(1) @map("special_move_power_correction_value")
  // 攻撃威力補正値
  attackPowerCorrectionValue        Int @default(1) @map("attack_power_correction_value")
  // 特殊攻撃威力補正値
  specialAttackPowerCorrectionValue Int @default(1) @map("special_attack_power_correction_value")
  // 攻撃(力)補正値
  attackCorrectionValue             Int @default(1) @map("attack_correction_value")
  // 特殊攻撃(力)補正値
  specialAttackCorrectionValue      Int @default(1) @map("special_attack_correction_value")

  // 防御(力)補正値
  defenseCorrectionValue        Int @default(1) @map("deffense_correction_value")
  // 特殊防御(力)補正値
  specialDefenseCorrectionValue Int @default(1) @map("special_deffense_correction_value")

  // ダメージ補正値
  damageCorrectionType1  Type  @default(None) @map("damage_correction_type1")
  damageCorrectionValue1 Int   @default(1) @map("damage_correction_value1")
  damageCorrectionType2  Type? @map("damage_correction_type2")
  damageCorrectionValue2 Int?  @map("damage_correction_value2")
  // 重さ補正値
  weightCorrectionValue  Int   @default(1) @map("weight_correction_value")

  pokemons1       Pokemons[]        @relation("ability1")
  pokemons2       Pokemons[]        @relation("ability2")
  pokemons3       Pokemons[]        @relation("ability3")
  trainedPokemons TrainedPokemons[]

  @@map("abilities")
}

// タイプ対照表
model TypeCompatibility {
  attackType    Type @map("attack_type")
  defenceType   Type @map("defence_type")
  compatibility Int  @default(1)

  @@id([attackType, defenceType])
  @@map("type_compatibility")
}

// 技
model Moves {
  id            Int     @id @default(autoincrement())
  name          String  @unique @db.VarChar(20)
  type          Type
  moveSpecies   Species @map("move_species")
  power         Int // 威力
  accuracy      Int // 命中率
  pp            Int
  isContactMove Boolean @map("is_contact_move") @db.Boolean
  isCanGuard    Boolean @map("is_can_guard") @db.Boolean

  trainedPokemons1 TrainedPokemons[] @relation("move1")
  trainedPokemons2 TrainedPokemons[] @relation("move2")
  trainedPokemons3 TrainedPokemons[] @relation("move3")
  trainedPokemons4 TrainedPokemons[] @relation("move4")
  @@map("moves")
}

model HeldItems {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(40)
  description String?

  // 物理技威力補正値
  physicalMovePowerCorrectionValue Int @default(1) @map("physical_move_power_correction_value")
  // 特殊技威力補正値
  specialMovePowerCorrectionValue  Int @default(1) @map("special_move_power_correction_value")
  // 攻撃威力補正値
  attackPowerCorrectionValue       Int @default(1) @map("attack_power_correction_value")
  // 特殊攻撃威力補正値
  specialPowerCorrectionValue      Int @default(1) @map("special_power_correction_value")
  // 攻撃(力)補正値
  attackCorrectionValue            Int @default(1) @map("attack_correction_value")
  // 特殊攻撃(力)補正値
  specialCorrectionValue           Int @default(1) @map("special_correction_value")

  // ダメージ補正値
  damageCorrectionType1  Type  @default(None) @map("damage_correction_type1")
  damageCorrectionValue1 Int   @default(1) @map("damage_correction_value1")
  damageCorrectionType2  Type? @map("damage_correction_type2")
  damageCorrectionValue2 Int?  @map("damage_correction_value2")
  // 重さ補正値
  weightCorrectionValue  Int   @default(1) @map("weight_correction_value")

  TrainedPokemons TrainedPokemons[]
  @@map("held_items")
}

// --- transaction data ---

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String   @db.VarChar(20)
  role    Role     @default(USER)
  profile Profile?
  party   Party[]

  @@map("user")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])

  @@map("profile")
}

// 育成済み個体
model TrainedPokemons {
  id         Int       @id @default(autoincrement())
  pokemonId  Int       @map("pokemon_id")
  formId     Int       @map("form_id")
  pokemons   Pokemons  @relation(fields: [pokemonId, formId], references: [id, formId])
  nickname   String    @db.VarChar(12)
  sex        SEX
  abilityId  Int       @map("ability_id")
  abilities  Abilities @relation(fields: [abilityId], references: [id])
  heldItemId Int       @map("held_item_id")
  heldItems  HeldItems @relation(fields: [heldItemId], references: [id])

  effortValueH Int @map("effort_value_h")
  effortValueA Int @map("effort_value_a")
  effortValueB Int @map("effort_value_b")
  effortValueC Int @map("effort_value_c")
  effortValueD Int @map("effort_value_d")
  effortValueS Int @map("effort_value_s")

  move1  Int
  moves1 Moves @relation("move1", fields: [move1], references: [id])
  move2  Int
  moves2 Moves @relation("move2", fields: [move2], references: [id])
  move3  Int
  moves3 Moves @relation("move3", fields: [move3], references: [id])
  move4  Int
  moves4 Moves @relation("move4", fields: [move4], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  party1 Party[] @relation("trainedPokemons1")
  party2 Party[] @relation("trainedPokemons2")
  party3 Party[] @relation("trainedPokemons3")
  party4 Party[] @relation("trainedPokemons4")
  party5 Party[] @relation("trainedPokemons5")
  party6 Party[] @relation("trainedPokemons6")

  @@map("trained_pokemons")
}

model Party {
  id         Int        @id @default(autoincrement())
  userId     Int
  user       User       @relation(fields: [userId], references: [id])
  name       String?    @db.VarChar(200)
  battleRule BattleRule
  maxRate    Int?

  trainedPokemonId1 Int
  trainedPokemons1  TrainedPokemons @relation("trainedPokemons1", fields: [trainedPokemonId1], references: [id])
  trainedPokemonId2 Int
  trainedPokemons2  TrainedPokemons @relation("trainedPokemons2", fields: [trainedPokemonId2], references: [id])
  trainedPokemonId3 Int
  trainedPokemons3  TrainedPokemons @relation("trainedPokemons3", fields: [trainedPokemonId3], references: [id])
  trainedPokemonId4 Int
  trainedPokemons4  TrainedPokemons @relation("trainedPokemons4", fields: [trainedPokemonId4], references: [id])
  trainedPokemonId5 Int
  trainedPokemons5  TrainedPokemons @relation("trainedPokemons5", fields: [trainedPokemonId5], references: [id])
  trainedPokemonId6 Int
  trainedPokemons6  TrainedPokemons @relation("trainedPokemons6", fields: [trainedPokemonId6], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  partyTag PartyTag[] @relation("partyToTag")

  BattleRecord BattleRecord[]
  @@map("party")
}

model Tag {
  id           Int     @id @default(autoincrement())
  name         String  @unique @db.VarChar(50)
  isSeasonType Boolean @map("is_season_type") @db.Boolean

  partyTag PartyTag[] @relation("tagToParty")
  @@map("tag")
}

model PartyTag {
  partyId Int   @map("party_id")
  party   Party @relation("partyToTag", fields: [partyId], references: [id])
  tagId   Int   @map("tag_id")
  tag     Tag   @relation("tagToParty", fields: [tagId], references: [id])

  @@id([partyId, tagId])
  @@map("party_tag")
}

model BattleRecord {
  id         Int        @id @default(autoincrement())
  partyId    Int        @map("party_id")
  party      Party      @relation(fields: [partyId], references: [id])
  battleRule BattleRule @map("battle_rule")

  BattleOpponentPartyId Int @map("battle_opponent_party_id")

  // 自身選出
  selfElectionPokemonId1     Int
  selfElectionPokemonId2     Int
  selfElectionPokemonId3     Int
  selfElectionPokemonId4     Int?
  // 相手選出
  opponentElectionPokemonId1 Int
  opponentElectionPokemonId2 Int
  opponentElectionPokemonId3 Int
  opponentElectionPokemonId4 Int?
}

model BattleOpponentParty {
  id Int @id @default(autoincrement())

  opponentPokemonId1     Int      @map("opponent_pokemon_id1")
  opponentPokemonFormId1 Int      @map("opponent_pokemon_form_id1")
  pokemons1              Pokemons @relation("opponentPokemon1", fields: [opponentPokemonId1, opponentPokemonFormId1], references: [id, formId])

  opponentPokemonId2     Int      @map("opponent_pokemon_id2")
  opponentPokemonFormId2 Int      @map("opponent_pokemon_form_id2")
  pokemons2              Pokemons @relation("opponentPokemon2", fields: [opponentPokemonId2, opponentPokemonFormId2], references: [id, formId])

  opponentPokemonId3     Int      @map("opponent_pokemon_id3")
  opponentPokemonFormId3 Int      @map("opponent_pokemon_form_id3")
  pokemons3              Pokemons @relation("opponentPokemon3", fields: [opponentPokemonId3, opponentPokemonFormId3], references: [id, formId])

  opponentPokemonId4     Int      @map("opponent_pokemon_id4")
  opponentPokemonFormId4 Int      @map("opponent_pokemon_form_id4")
  pokemons4              Pokemons @relation("opponentPokemon4", fields: [opponentPokemonId4, opponentPokemonFormId4], references: [id, formId])

  opponentPokemonId5     Int      @map("opponent_pokemon_id5")
  opponentPokemonFormId5 Int      @map("opponent_pokemon_form_id5")
  pokemons5              Pokemons @relation("opponentPokemon5", fields: [opponentPokemonId5, opponentPokemonFormId5], references: [id, formId])

  opponentPokemonId6     Int      @map("opponent_pokemon_id6")
  opponentPokemonFormId6 Int      @map("opponent_pokemon_form_id6")
  pokemons6              Pokemons @relation("opponentPokemon6", fields: [opponentPokemonId6, opponentPokemonFormId6], references: [id, formId])

  @@map("BattleOpponentRecord")
}

// --- constant ---

enum Role {
  USER
  ADMIN
}

enum SEX {
  Male
  Female
}

enum Species {
  Physical // 物理
  Special // 特殊
}

enum Type {
  Normal
  Fighting
  Flying
  Poison
  Ground
  Rock
  Bug
  Ghost
  Steel
  Fire
  Water
  Grass
  Electric
  Psychic
  Ice
  Dragon
  Dark
  None
}

enum BattleRule {
  Single
  Double
}
